<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML xmlns="http://www.w3.org/1999/xhtml">
<HEAD>
<TITLE>awk文本处理总结（入门，中级，高级） - Lost in Kernel - CSDNBlog</TITLE>
<LINK 
href="1.ico" 
rel="Shortcut Icon">
<LINK media=all 
href="Cogitation_1.css" type=text/css 
rel=stylesheet>
<LINK title=RSS href="rss.aspx" 
type=application/rss+xml rel=alternate>
<LINK 
href="webimPopup.css" 
type=text/css rel=stylesheet>
</HEAD>

<BODY id=defaultuser>
<DIV id=csdnblog_allwrap>
  <FORM id=Form1 name=Form1 action=3847425.aspx method=post>
    <DIV id=csdnblog_midwrap>
      <DIV id=csdnblog_content>
        <DIV class=gutter>
          <DIV class=default_contents>
            <DIV class=user_article><!--StartFragment-->
              <H1><IMG height=14 alt=转载 src="turnship.gif" width=15 border=0>&nbsp;<A 
href="http://blog.csdn.net/blackbillow/archive/2009/01/21/3847425.aspx">awk文本处理总结（入门，中级，高级）</A><CITE 
class=fav_csdnstylebykimi><A class=fav_csdnstylebykimi title=收藏到我的网摘中，并分享给我的朋友 
href="javascript:d=document;t=d.selection%3F(d.selection.type!='None'?d.selection.createRange().text:''):(d.getSelection?d.getSelection():'');void(saveit=window.open('http://wz.csdn.net/storeit.aspx?t='+escape(d.title)+'&amp;u='+escape(d.location.href)+'&amp;c='+escape(t),'saveit','scrollbars=no,width=590,height=300,left=75,top=20,status=no,resizable=yes'));saveit.focus();">收藏</A></CITE></H1>
              <DIV class=blogstory><SPAN id=Post.ascx_ViewPost_PreviousAndNextEntriesUp>
                <H3>&nbsp;|&nbsp;<A 
href="http://blog.csdn.net/blackbillow/archive/2009/01/20/3839695.aspx">旧一篇:&nbsp;IP 
                  Networking Control Files</A></H3>
                </SPAN> 
                <H1>awk文本处理总结（入门，中级，高级）</H1>
                <P>&nbsp;<BR>
                  awk处理文本总结 - Alex.Wang&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2008-2-19 15:55</P>
                <P>&nbsp;</P>
                <P>作为技术支持工程我们最最经常的工作就是经常碰到要处理文本文件，不管是什么数据库最后都可以导成文本，我们就可以对他进行处理了，这样即使你不是对所有数据库操作都很熟悉也可以对他的数据进行处理了。<BR>
                  &nbsp;&nbsp;&nbsp; 
                  我们必须的工具有两个一个是shell一个是awk，awk对于处理文本文件是最最适合的掌握了awk我们就可以很方便的处理文本文件再借助一些shell命令我们可以很方便得到自己想要的结果。现在从简单的例子来总结一下我觉得会经常碰到的问题。<BR>
                </P>
                <HR>
                <P>&nbsp;</P>
                <H2>awk入门篇</H2>
                <P>&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp; awk入门，文本内容example1.txt.<BR>
                  &nbsp;&nbsp;&nbsp; <BR>
                  user1 password1 username1 
                  unit1 10<BR>
                  user2 password2 username2 unit2 20<BR>
                  user3 password3 username3 
                  unit3 30&nbsp;&nbsp;&nbsp; </P>
                <P>&nbsp;&nbsp;&nbsp; 在unix环境中我们可以使用一下命令来打印出第一列<BR>
                  &nbsp;&nbsp;&nbsp; <BR>
                  [root@mail awk]# awk '{print $1}' 
                  example1.txt</P>
                <P>&nbsp;&nbsp;&nbsp; 得到的结果是如下，解释一下"'{" 单引号大括号包含awk语句是为了和shell 
                  命令区别，$1的意思就是文本文件的第一列，正常的awk命令跟随-F参数指定间隔符号，如果是空格或tab键就可以省略了。<BR>
                  &nbsp;&nbsp;&nbsp; <BR>
                  user1<BR>
                  user2<BR>
                  user3&nbsp; </P>
                <P>[root@mail awk]# awk '{if($5&gt;20) {print $1}}' example1.txt</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这行命令和上一行比较增加了“if($5&gt;20)”，得到的结果是</P>
                <P>user3</P>
                <P>这个if语句就没有必要更详细的解释了吧！就是第5列大于20的显示出满足条件的第一列</P>
                <P>[root@mail awk]# awk '{if($5&gt;20 || $5==10) {print $1}}' example1.txt</P>
                <P>user1<BR>
                  user3</P>
                <P>在来一个初级的又增加了一个“if($5&gt;20 || $5==10)”&nbsp;&nbsp;&nbsp; 做逻辑判断逻辑判断的三个“|| &amp;&amp; !” 
                  或、与、非三个可以任意加到里面，这个语句的意思是如果第5列大于20或者等于10的都显示处理，在我们的工作中可能有用户会要求找出所有空间大于多少的或者是空间等于多少的账户然后再做批量修改。</P>
                <P>if是awk循环中的一个还有其他很多，man awk可以看到，<BR>
                  &nbsp;&nbsp; Control Statements<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The 
                  control statements are as follows:</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (condition) statement [ else statement ]<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  while (condition) statement<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do statement while 
                  (condition)<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (expr1; expr2; expr3) 
                  statement<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (var in array) statement<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  break<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete 
                  array[index]<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete array<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit [ expression 
                  ]<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { statements }</P>
                <P><BR>
                  学习awk可以经常使用一下man awk 可以看到所有的函数和使用方法。&nbsp;&nbsp;&nbsp; </P>
                <P>了解每个符号的意义我们才能更好的使用awk，最开始先记住几个命令知道他可实现的结果我们慢慢的再去理解。</P>
                <HR>
                <P>&nbsp;</P>
                <H2>awk中级篇</H2>
                <P>这里顺便介绍一下vi的一个替换命令，现在我们要把example1.txt文本里的空格都替换为“:”冒号这里在vi里使用的命令就是：</P>
                <P>%s/ /:/g&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
                <P>这个命令对于使用vi的人来说是用得最多的。我们现在做了一个新的文件example2.txt。</P>
                <P>user1:password1:username1:unit1:10<BR>
                  user2:password2:username2:unit2:20<BR>
                  user3:password3:username3:unit3:30</P>
                <P>现在我们来做一个awk脚本，之前都是在命令行操作，实际上所有的操作在命令行上是可以都实现的，已我们最经常使用的批量添加用户来开始！script1.awk</P>
                <P>#!/bin/awk -f&nbsp;&nbsp; # 当文件有可执行权限的时候你可以直接执行<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ./script1.awk 
                  example2.txt<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 如果没有以上这行可能会出现错误，或者<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # awk -f 
                  script1.awk example2.txt 参数f指脚本文件 </P>
                <P>BEGIN {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # “BEGIN{”是awk脚本开始的地方<BR>
                  &nbsp;&nbsp;&nbsp; FS=":";&nbsp;&nbsp;&nbsp;&nbsp; # FS 
                  是在awk里指分割符的意思<BR>
                  }</P>
                <P>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 接下来的“{” 是内容部分<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "add 
                  {";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 一下都是使用了一个awk函数print <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "uid=" $1;<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 
                  "userPassword=" $2;<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "domain=eyou.com" ;<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 
                  "bookmark=1";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "voicemail=1";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 
                  "securemail=1"<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "storage=" $5;<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print "}";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 
                  ".";<BR>
                  }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # “}”&nbsp;&nbsp;&nbsp; 内容部分结束<BR>
                  END 
                  {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # “END{” 结束部分<BR>
                  &nbsp;&nbsp;&nbsp; print "exit";<BR>
                  }</P>
                <P>执行结果<BR>
                  [root@mail awk]# awk -f script1.awk example2.txt<BR>
                  add 
                  {<BR>
                  uid=user1<BR>
                  userPassword=password1<BR>
                  domain=eyou.com<BR>
                  bookmark=1<BR>
                  voicemail=1<BR>
                  securemail=1<BR>
                  storage=10<BR>
                  }<BR>
                  .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  .<BR>
                  .<BR>
                  .<BR>
                  .<BR>
                  .<BR>
                  exit</P>
                <P>文本操作就是更方便一些。</P>
                <P>下面给两个返回效果一样的例子<BR>
                  [root@mail awk]# awk -F: '{print $1"@"$2}' 
                  example2.txt<BR>
                  [root@mail awk]# awk -F: '{printf "%s@%s\n",$1,$2}' 
                  example2.txt</P>
                <P>user1@password1</P>
                <P>这里的区别是使用print 
                  和printf的区别，printf格式更自由一些，我们可以更加自由的指定要输出的数据，print会自动在行尾给出空格，而printf是需要给定" 
                  \n"的，如果感兴趣你可以把“\n”去掉看一下结果。%s代表字符串%d 
                  代表数字，基本上%s都可以处理了因为在文本里一切都可以看成是字符串，不像C语言等其他语言还要区分数字、字符、字符串等。</P>
                <P>awk还有一些很好的函数细细研究一下还是很好用的。<BR>
                  这次碰到了一个问题客户有一个用户列表,大概有2w用户，他有一个有趣的工作要做，就是把每个账户目录放到特定的目录下，例如13910011234这个目录要放到139/10/这个目录下，从这里可以看出规律是手机号码的前三位是二级目录名，手机的第3、4为是三级目录名，我们有的就只有一个用户列表，规律找到了我们现在开始想办法处理吧。</P>
                <P>example3.txt</P>
                <P>13910011234&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  15920312343<BR>
                  13922342134<BR>
                  15922334422<BR>
                  ......</P>
                <P>第一步是要找到一个方法来吧，就是要把每一个手机号分开，最初可能你就会想到这个也没有任何间隔，我们怎么用awk分开他们呢？说实话最初我也考虑了20多分钟，后来想起原来学习python的时候有split函数可以分就想找找awk里是不是有类似的函数，man 
                  awk 发现substr 这个函数子串,</P>
                <P>[root@mail awk]# awk '{print substr($1,1,3)}'&nbsp; example3.txt</P>
                <P>[root@mail awk]# awk '{printf "%s/%s\n",substr($1,1,3),substr($1,4,2)}'&nbsp; 
                  example3.txt</P>
                <P>[root@mail awk]# awk '{printf "mv %s 
                  %s/%s\n",$1,substr($1,1,3),substr($1,4,2)}'&nbsp; example3.txt</P>
                <P>以上的两步的返回自己做一下，最后我们就得到了我们想要的结果。</P>
                <P>mv 13910011234 139/10<BR>
                  mv 15920312343 159/20<BR>
                  mv 13922342134 139/22<BR>
                  mv 
                  15922334422 159/22</P>
                <P>把这部分输出拷贝到一个shell脚本里，在数据当前目录下执行就可以了！</P>
                <P>substr(s, i [, n])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Returns&nbsp; the at most n-character substring of 
                  s<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; starting at i.&nbsp; If n is omitted, the rest 
                  of&nbsp; s<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is 
                  used.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  substr函数解释，s代表我们要处理的字符串，i 
                  是我们从这个字符串的第几个位置上开始，n 
                  是我们从开始的位置取多少个字符。多看看man英文也会有所提高的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
                <P>awk有很多有趣的函数如果感兴趣可以自己去查查看，<BR>
                  man awk<BR>
                  String Functions&nbsp; 
                  字符串函数，举几个觉得常用的函数<BR>
                  &nbsp;&nbsp;&nbsp; length([s])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Returns&nbsp; the&nbsp; length&nbsp; of&nbsp; the&nbsp; 
                  string s, or the<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length of $0 if s is not 
                  supplied.<BR>
                  &nbsp;&nbsp;&nbsp; length 你可以得到字符串的长度，这个是比较常用的一个函数&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp; split(s, a [, r])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Splits the string s into the&nbsp; array&nbsp; a&nbsp; on&nbsp; 
                  the<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regular expression r, and returns the 
                  number of<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fields.&nbsp; If r is omitted, FS is&nbsp; 
                  used&nbsp; instead.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The&nbsp;&nbsp; array&nbsp; a&nbsp; is&nbsp; cleared&nbsp; 
                  first.&nbsp;&nbsp; Splitting<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; behaves&nbsp;&nbsp; identically&nbsp;&nbsp; 
                  to&nbsp;&nbsp; field&nbsp;&nbsp; splitting,<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; described above.&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tolower(str)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Returns&nbsp; 
                  a copy of the string str, with all the<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  upper-case&nbsp; characters&nbsp; in&nbsp; str&nbsp; translated&nbsp; 
                  to<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; their&nbsp; corresponding&nbsp; lower-case&nbsp; 
                  counterparts.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Non-alphabetic characters are 
                  left unchanged.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  toupper(str)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Returns a copy of the string str, with all&nbsp; 
                  the<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lower-case&nbsp; characters&nbsp; in&nbsp; str&nbsp; 
                  translated&nbsp; to<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; their&nbsp; corresponding&nbsp; 
                  upper-case&nbsp; counterparts.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Non-alphabetic 
                  characters are left 
                  unchanged.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  Time Functions&nbsp; 
                  时间函数，我们最最常用到的是时间戳转换函数<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  strftime([format [, timestamp]])<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Formats&nbsp; timestamp&nbsp; 
                  according to the specification in format.<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The timestamp 
                  should be of the same form as returned by&nbsp; sys-<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; time().&nbsp;&nbsp; If 
                  timestamp is missing, the current time of day is<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; used.&nbsp; If 
                  format is missing, a default format&nbsp; equivalent&nbsp; to<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the 
                  output of date(1) is used.&nbsp; See the specification for the<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  strftime() function in ANSI C for the format conversions 
                  that<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; are&nbsp; guaranteed&nbsp; to be available.&nbsp; A public-domain 
                  version of<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strftime(3) and a man page for it come&nbsp; with&nbsp; 
                  gawk;&nbsp; if&nbsp; that<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; version&nbsp; was&nbsp; used to build gawk, then all 
                  of the conversions<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; described in that man page are available 
                  to 
                  gawk.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  这里举例说明时间戳函数是如何使用的</P>
                <P>[root@ent root]# date +%s | awk '{print strftime("%F %T",$0)}'<BR>
                  2008-02-19 
                  15:59:19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
                <P>我们先使用date命令做一个时间戳，然后再把他转换为时间&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>
                  还有一些我们现在可能不经常用到的函数，详细内容man awk 自己可以看一下。<BR>
                  &nbsp;Bit Manipulations Functions&nbsp;&nbsp; 
                  二进制函数<BR>
                  &nbsp;Internationalization Functions&nbsp; 国际标准化函数<BR>
                  &nbsp;<BR>
                  &nbsp;USER-DEFINED 
                  FUNCTIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户也可以自己定义自己的函数，感兴趣自己可以再深入研究一下。<BR>
                  &nbsp;<BR>
                  &nbsp;For example:</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function&nbsp; f(p, q,&nbsp;&nbsp;&nbsp;&nbsp; a, b)&nbsp;&nbsp; # a and b are 
                  local<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /abc/&nbsp;&nbsp;&nbsp;&nbsp; { ... ; f(1, 2) ; ... }<BR>
                  &nbsp;DYNAMICALLY LOADING NEW 
                  FUNCTIONS&nbsp; 动态加载新函数，这个可能就更高级一些了！</P>
                <HR>
                <P>&nbsp;</P>
                <H2>&nbsp;awk高级篇</H2>
                <P>&nbsp;<BR>
                  &nbsp;不管学习任何语言，我们学到的都是工具，工具知道的越多，我们做起工作来就越方便，但是工具在你的手里并不一定能造出好的产品，编辑脚本和编程序也是一样的重要的是算法，别人不知道怎么处理的问题你要知道如何处理。这才能证明你比别人更高，工具只要你慢慢练习都会使用。<BR>
                  &nbsp;<BR>
                  &nbsp;&nbsp;&nbsp; 
                  下面给大家一个我认为是比较高级的问题了，感兴趣的可以自己再想想更好的解决办法。问题是这样的我们有一个从ldap里导出的文件，它都是一行一个字段来说明的，每个用户的数据是已空行分割的。我们必须把对应的uid 
                  和userPassword找出来而且是对应的。<BR>
                  &nbsp;&nbsp;&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp; 例子：example4.txt<BR>
                  &nbsp;&nbsp;&nbsp; <BR>
                  dn: 
                  uid=cailiying,domain=ccc.com.cn,o=mail.ccc.com.cn<BR>
                  uid: 
                  cailiying<BR>
                  userPassword:: e21kNX0zREl4VEIwODBJdXZkTnU3WFFtS3lRPT0=<BR>
                  letters: 
                  300<BR>
                  quota: 100</P>
                <P>dn: uid=caixiaoning,domain=ccc.com.cn,o=mail.ccc.com.cn<BR>
                  userPassword:: 
                  e21kNX1kejFXU0doZWprR2RNYnV5ajJJRWl3PT0=<BR>
                  letters: 300<BR>
                  quota: 100<BR>
                  uid: 
                  chenzheng<BR>
                  domain: cqc.com.cn</P>
                <P>dn: uid=caixiaoning,domain=ccc.com.cn,o=mail.ccc.com.cn<BR>
                  userPassword:: 
                  e21kNX1kejFXU0doZWprR2RNYnV5ajJJRWl3PT0=<BR>
                  letters: 300<BR>
                  quota: 100</P>
                <P>dn: uid=caixiaoning,domain=ccc.com.cn,o=mail.ccc.com.cn<BR>
                  userPassword:: 
                  e21kNX1kejFXU0doZWprR2RNYnV5ajJJRWl3PT0=<BR>
                  letters: 300<BR>
                  quota: 100<BR>
                  uid: 
                  chenzheng<BR>
                  domain: 
                  cqc.com.cn<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  处理这个文本我们需要考虑的问题是：<BR>
                  1 uid&nbsp; 和userPassword 并不是每一个段落里都有<BR>
                  2 
                  在每一段里面uid和userPassword 先后顺序是随机的<BR>
                  3 有的段落里可能只有uid 或者只有userPassword </P>
                <P>从文本上分析可以看出必须使用的间隔符号，一个是空行，一个是冒号。<BR>
                  冒号我们awk 
                  -F:就可以了，不过空行我们不好判断现在想到length()这个函数，在unix里空行最多只有一个\n字符，如果一行字符数小于2我们判断为空行，好现在间隔符号问题解决，空行只能通过循环来实现对空行的判断。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
                <P>现在碰到的另外一个问题是我们的某个段里的信息是不完全的，我们就要放弃这段这儿如何来做，就是要做两个标记变量u 和 p&nbsp; 再做一个循环如果u&nbsp; 和&nbsp; p 
                  同事满足我们才输出结果下面的awk脚本就是通过这个思考来解决ldif文本的处理的！</P>
                <P># 此脚本的目的是方便我们以后导ldap的其他邮件的数据，<BR>
                  # 我们之前使用slapdcat -l 导出所有信息，然后我们需要<BR>
                  # 
                  整理出uid&nbsp; password , 这里的设置都是默认以":" 间隔的<BR>
                  # 例slapcat -l user.ldif&nbsp; 如果想得到一份uid 
                  和userPassword 对应的文件，<BR>
                  # 修改username = "dn"; password = "userpassword"; awk -f 
                  ldap2txt.awk user.ldif | grep uid | more&nbsp; 可以查看结果 (有可能是多域的邮件)<BR>
                  # 如果想得到domain 
                  所对应的密码，修改username = "dn"; password = "userpassword";&nbsp; 运行 awk -f ldap2txt.awk 
                  user.ldif |grep domain | more </P>
                <P><BR>
                  #!/bin/awk -f <BR>
                  # File name: ldap2txt.awk </P>
                <P>BEGIN {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS = ":";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; username = "uid";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; password 
                  = "userPassword";<BR>
                  }</P>
                <P>{</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(length($0) == 0 ) <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (name != 
                  "u"&nbsp; &amp;&amp;&nbsp; pword != "p")<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  printf ("%s:%s\n", name,pword); <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = 
                  "u";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pword = "p";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  }</P>
                <P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ($1 == 
                  username)<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = "u";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  name = $0; <BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if($1 == 
                  password)<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pword = 
                  "p";<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pword = $0;<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                  }<BR>
                  }<BR>
                  END {</P>
                <P>}</P>
                <P>实际上对于学习语言首先是熟悉一些常用的函数，然后就是试着去解决别人解决过的问题，然后自己再思考一下是不是有更好，速度更快的解决办法，实际上大部分的程序员都是在重复的使用着别人好的解决办法，把别人的方法转变为自己的方法，就是反复练习解决不同的问题，思考更好的方法！</P>
              </DIV>
              <!--EndFragment--></DIV>
          </DIV>
        </DIV>
      </DIV>
    </DIV>
  </FORM>
</DIV>
</BODY>
</HTML>