<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>讨厌的 Socket TIME_WAIT 问题_在0与1中寻找快乐</TITLE>
<STYLE type=text/css>
.error{color:#FF0000;font-size:12px}
</STYLE>
</HEAD>

<BODY>

<CENTER>

<DIV id=main style="WIDTH: 996px" align=left>

<DIV class=stage>

<DIV class=stagepad>

<DIV style="WIDTH: 100%">

<DIV class=modbox id=m_blog><!--StartFragment--><DIV class=tit>讨厌的 Socket TIME_WAIT 问题</DIV>
<DIV class=date>2009-03-02 16:20</DIV>
<TABLE style="TABLE-LAYOUT: fixed">
<TBODY>
<TR>
<TD>
<DIV class=cnt id=blog_text>
<P><CODE><FONT face=NSimsun>netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key 
in state) print key,"\t",state[key]}'</FONT></CODE></P>
<P>会得到类似下面的结果，具体数字会有所不同：</P>
<BLOCKQUOTE>
<P>LAST_ACK 1<BR>SYN_RECV 14<BR>ESTABLISHED 79<BR>FIN_WAIT1 28<BR>FIN_WAIT2 
3<BR>CLOSING 5<BR>TIME_WAIT 1669</P></BLOCKQUOTE>
<P>状态：描述<BR>CLOSED：无连接是活动的或正在进行<BR>LISTEN：服务器在等待进入呼叫<BR>SYN_RECV：一个连接请求已经到达，等待确认<BR>SYN_SENT：应用已经开始，打开一个连接<BR>ESTABLISHED：正常数据传输状态<BR>FIN_WAIT1：应用说它已经完成<BR>FIN_WAIT2：另一边已同意释放<BR>ITMED_WAIT：等待所有分组死掉<BR>CLOSING：两边同时尝试关闭<BR>TIME_WAIT：另一边已初始化一个释放<BR>LAST_ACK：等待所有分组死掉</P>
<P>也就是说，这条命令可以把当前系统的网络连接状态分类汇总。</P>
<P>下面解释一下为啥要这样写：</P>
<P>一个简单的管道符连接了netstat和awk命令。</P>
<P>------------------------------------------------------------------</P>
<P>每个TCP报文在网络内的最长时间，就称为MSL（Maximum Segment Lifetime），它的作用和IP数据包的TTL类似。</P>
<P>RFC793指出，MSL的值是2分钟，但是在实际的实现中，常用的值有以下三种：30秒，1分钟，2分钟。</P>
<P>注意一个问题，进入TIME_WAIT状态的一般情况下是客户端，大多数服务器端一般执行被动关闭，不会进入TIME_WAIT状态，当在服务</P>
<P>器端关闭某个服务再重新启动时，它是会进入TIME_WAIT状态的。</P>
<P>举例：<BR>1.客户端连接服务器的80服务，这时客户端会启用一个本地的端口访问服务器的80，访问完成后关闭此连接，立刻再次访问服务器的</P>
<P>80，这时客户端会启用另一个本地的端口，而不是刚才使用的那个本地端口。原因就是刚才的那个连接还处于TIME_WAIT状态。<BR>2.客户端连接服务器的80服务，这时服务器关闭80端口，立即再次重启80端口的服务，这时可能不会成功启动，原因也是服务器的连</P>
<P>接还处于TIME_WAIT状态。</P>
<P><BR>检查net.ipv4.tcp_tw当前值，将当前的值更改为1分钟：<BR>[root@aaa1 ~]# sysctl -a|grep 
net.ipv4.tcp_tw<BR>net.ipv4.tcp_tw_reuse = 0<BR>net.ipv4.tcp_tw_recycle = 
0<BR>[root@aaa1 ~]#</P>
<P>vi /etc/sysctl<BR>增加或修改net.ipv4.tcp_tw值：<BR>net.ipv4.tcp_tw_reuse = 
1<BR>net.ipv4.tcp_tw_recycle = 1</P>
<P>使内核参数生效：<BR>[root@aaa1 ~]# sysctl -p</P>
<P>[root@aaa1 ~]# sysctl -a|grep net.ipv4.tcp_tw<BR>net.ipv4.tcp_tw_reuse = 
1<BR>net.ipv4.tcp_tw_recycle = 1</P>
<P>用netstat再观察正常</P>
<P><BR>这里解决问题的关键是如何能够重复利用time_wait的值，我们可以设置时检查一下time和wait的值<BR>#sysctl -a | grep 
time | grep wait<BR>net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait = 
120<BR>net.ipv4.netfilter.ip_conntrack_tcp_timeout_close_wait = 
60<BR>net.ipv4.netfilter.ip_conntrack_tcp_timeout_fin_wait = 120</P>
<P>问一下TIME_WAIT有什么问题，是闲置而且内存不回收吗？</P>
<P>是的，这样的现象实际是正常的，有时和访问量大有关，设置这两个参数： reuse是表示是否允许重新应用处于TIME-WAIT状态的</P>
<P>socket用于新的TCP连接； recyse是加速TIME-WAIT sockets回收</P>
<P></P>
<P>Q: 我正在写一个unix server程序，不是daemon，经常需要在命令行上重启它，绝大 <BR>多数时候工作正常，但是某些时候会报告"bind: 
address in use"，于是重启失 <BR>败。 <BR><BR>A: Andrew Gierth 
<BR>server程序总是应该在调用bind()之前设置SO_REUSEADDR套接字选项。至于 
<BR>TIME_WAIT状态，你无法避免，那是TCP协议的一部分。 <BR><BR>Q: 如何避免等待60秒之后才能重启服务 <BR><BR>A: Erik 
Max Francis <BR><BR>使用setsockopt，比如 
<BR><BR>-------------------------------------------------------------------------- 
<BR>int option = 1; <BR><BR>if ( setsockopt ( masterSocket, SOL_SOCKET, 
SO_REUSEADDR, &amp;option, <BR>sizeof( option ) ) &lt; 0 ) <BR>{ <BR>die( 
"setsockopt" ); <BR>} 
<BR>-------------------------------------------------------------------------- 
<BR><BR>Q: 编写 TCP/SOCK_STREAM 服务程序时，SO_REUSEADDR到底什么意思？ <BR><BR>A: 
这个套接字选项通知内核，如果端口忙，但TCP状态位于 TIME_WAIT ，可以重用 
<BR>端口。如果端口忙，而TCP状态位于其他状态，重用端口时依旧得到一个错误信息， 
<BR>指明"地址已经使用中"。如果你的服务程序停止后想立即重启，而新套接字依旧 <BR>使用同一端口，此时 SO_REUSEADDR 
选项非常有用。必须意识到，此时任何非期 <BR>望数据到达，都可能导致服务程序反应混乱，不过这只是一种可能，事实上很不 <BR>可能。 
<BR><BR>一个套接字由相关五元组构成，协议、本地地址、本地端口、远程地址、远程端 <BR>口。SO_REUSEADDR 
仅仅表示可以重用本地本地地址、本地端口，整个相关五元组 <BR>还是唯一确定的。所以，重启后的服务程序有可能收到非期望数据。必须慎重使 <BR>用 
SO_REUSEADDR 选项。 <BR><BR>Q: 在客户机/服务器编程中(TCP/SOCK_STREAM)，如何理解TCP自动机 TIME_WAIT 状 
<BR>态？ <BR><BR>A: W. Richard Stevens &lt;1999年逝世，享年49岁&gt; <BR><BR>下面我来解释一下 
TIME_WAIT 状态，这些在&lt;<UNIX></UNIX>&gt; <BR>中2.6节解释很清楚了。 
<BR><BR>MSL(最大分段生存期)指明TCP报文在Internet上最长生存时间，每个具体的TCP实现 <BR>都必须选择一个确定的MSL值。RFC 
1122建议是2分钟，但BSD传统实现采用了30秒。 <BR><BR>TIME_WAIT 状态最大保持时间是2 * MSL，也就是1-4分钟。 
<BR><BR>IP头部有一个TTL，最大值255。尽管TTL的单位不是秒(根本和时间无关)，我们仍需 
<BR>假设，TTL为255的TCP报文在Internet上生存时间不能超过MSL。 
<BR><BR>TCP报文在传送过程中可能因为路由故障被迫缓冲延迟、选择非最优路径等等，结果 
<BR>发送方TCP机制开始超时重传。前一个TCP报文可以称为"漫游TCP重复报文"，后一个 
<BR>TCP报文可以称为"超时重传TCP重复报文"，作为面向连接的可靠协议，TCP实现必须 <BR>正确处理这种重复报文，因为二者可能最终都到达。 
<BR><BR>一个通常的TCP连接终止可以用图描述如下： <BR><BR>client server <BR>FIN M <BR>close 
-----------------&gt; (被动关闭) <BR>ACK M+1 <BR>&lt;----------------- <BR>FIN N 
<BR>&lt;----------------- close <BR>ACK N+1 <BR>-----------------&gt; 
<BR><BR>为什么需要 TIME_WAIT 状态？ 
<BR><BR>假设最终的ACK丢失，server将重发FIN，client必须维护TCP状态信息以便可以重发 
<BR>最终的ACK，否则会发送RST，结果server认为发生错误。TCP实现必须可靠地终止连 <BR>接的两个方向(全双工关闭)，client必须进入 
TIME_WAIT 状态，因为client可能面 <BR>临重发最终ACK的情形。 <BR><BR>{ <BR>scz 2001-08-31 13:28 
<BR><BR>先调用close()的一方会进入TIME_WAIT状态 <BR>} 
<BR><BR>此外，考虑一种情况，TCP实现可能面临先后两个同样的相关五元组。如果前一个连 <BR>接处在 TIME_WAIT 
状态，而允许另一个拥有相同相关五元组的连接出现，可能处理 <BR>TCP报文时，两个连接互相干扰。使用 SO_REUSEADDR 选项就需要考虑这种情况。 
<BR><BR>为什么 TIME_WAIT 状态需要保持 2MSL 这么长的时间？ <BR><BR>如果 TIME_WAIT 
状态保持时间不足够长(比如小于2MSL)，第一个连接就正常终止了。 <BR>第二个拥有相同相关五元组的连接出现，而第一个连接的重复报文到达，干扰了第二 
<BR>个连接。TCP实现必须防止某个连接的重复报文在连接终止后出现，所以让TIME_WAIT 
<BR>状态保持时间足够长(2MSL)，连接相应方向上的TCP报文要么完全响应完毕，要么被 <BR>丢弃。建立第二个连接的时候，不会混淆。 <BR><BR>A: 
小四 <BR><BR>在Solaris 7下有内核参数对应 TIME_WAIT 状态保持时间 <BR><BR># ndd -get /dev/tcp 
tcp_time_wait_interval <BR>240000 <BR># ndd -set /dev/tcp tcp_time_wait_interval 
1000 <BR><BR>缺省设置是240000ms，也就是4分钟。如果用ndd修改这个值，最小只能设置到1000ms， 
<BR>也就是1秒。显然内核做了限制，需要Kernel Hacking。 <BR><BR># echo "tcp_param_arr/W 0t0" | adb 
-kw /dev/ksyms /dev/mem <BR>physmem 3b72 <BR>tcp_param_arr: 0x3e8 = 0x0 <BR># 
ndd -set /dev/tcp tcp_time_wait_interval 0 
<BR><BR>我不知道这样做有什么灾难性后果，参看&lt;&gt;的声明。 <BR><BR>Q: TIME_WAIT 
状态保持时间为0会有什么灾难性后果？在普遍的现实应用中，好象也 <BR>就是服务器不稳定点，不见得有什么灾难性后果吧？ <BR><BR>D: 
rain@bbs.whnet.edu.cn <BR><BR>Linux 内核源码 /usr/src/linux/include/net/tcp.h 中 
<BR><BR>#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to successfully 
<BR>* close the socket, about 60 seconds */ 
<BR><BR>最好不要改为0，改成1。端口分配是从上一次分配的端口号+1开始分配的，所以一般 
<BR>不会有什么问题。端口分配算法在tcp_ipv4.c中tcp_v4_get_port中。</P></DIV></TD></TR></TBODY></TABLE><BR><!--EndFragment--></DIV>
</DIV>
</DIV>
</DIV>
</DIV>
</CENTER>
</BODY>
</HTML>