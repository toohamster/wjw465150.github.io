<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>NFS速度优化</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
</head>
<body>
<!--StartFragment--><div class="articalTitle"> 
					
			<h2 id="t_3cb6a78c0100jwa8" class="titName SG_txta">NFS速度优化</h2>
			
					<span class="time SG_txtc">(2010-06-22 21:10:32)</span><div class="turnBoxzz"><a href="javascript:;" id="quote_set_sign2" onClick="scope.articel_quote_alert &amp;&amp; scope.articel_quote_alert('3cb6a78c0100jwa8');return false;" class="SG_aBtn SG_aBtn_ico SG_turn"><cite><img class="SG_icon SG_icon111" src="sg_trans.gif" width="15" height="15" align="absmiddle">转载</cite></a></div>		</div>
		<div class="articalTag" id="sina_keyword_ad_area">
			<table>
				<tbody><tr>
					<td class="blog_tag">
					
											<span class="SG_txtb">标签：</span>
																				<h3><a href="http://uni.sina.com.cn/c.php?t=blog&amp;k=nfs&amp;ts=bpost&amp;stype=tag" target="_blank">nfs</a></h3>
																				<h3><a href="http://uni.sina.com.cn/c.php?t=blog&amp;k=%CB%D9%B6%C8&amp;ts=bpost&amp;stype=tag" target="_blank">速度</a></h3>
																				<h3><a href="http://uni.sina.com.cn/c.php?t=blog&amp;k=%D3%C5%BB%AF&amp;ts=bpost&amp;stype=tag" target="_blank">优化</a></h3>
																				<h3><a href="http://uni.sina.com.cn/c.php?t=blog&amp;k=it&amp;ts=bpost&amp;stype=tag" target="_blank">it</a></h3>
																</td>
					<td class="blog_class">
											<span class="SG_txtb">分类：</span>
						<a target="_blank" href="http://blog.sina.com.cn/s/articlelist_1018603404_2_1.html">Linux</a>
										</td>
				</tr>
			</tbody></table>
		</div>
						
		<div id="sina_keyword_ad_area2" class="articalContent  ">
			<span style="font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; line-height: 25px; color: rgb(68, 68, 68); -webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px;">
<strong style="word-wrap: break-word; word-break: break-all;">1.设置块大小</strong><br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

mount命令的risize和wsize指定了server端和client端的传输的块大小。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

mount -t nfs -o rsize=8192,wsize=8192,timeo=14,intr
client:/partition /partition<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

如果未指定，系统根据nfs version来设置缺省的risize和wsize大小。大多数情况是4K对于nfs
v2，最大是8K，对于v3，通过server端kernel设置risize和wsize的限制<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

vi /usr/src/linux2.4.22/include/linux/nfsd/const.h<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

修改常量: NFSSVC_MAXBLKSIZE<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

所有的2.4的的client都支持最大32K的传输块。系统缺省的块可能会太大或者太小，这主要取决于你的kernel和你的网卡，太大或者太小都有可能导致nfs速度很慢。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

具体的可以使用Bonnie，Bonnie++，iozone等benchmark来测试不同risize和wsize下nfs的速度。当然，也可以使用dd来测试。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

＃time dd if=/dev/zero of=/testfs/testfile bs=8k
count=1024　　测试nfs写<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

＃time dd if=/testfs/testfile of=/dev/null bs=8k　　　　　　　
测试nfs读<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

测试时文件的大小至少是系统RAM的两倍，每次测试都使用umount
和mount对/testfs进行挂载，通过比较不同的块大小，得到优化的块大小。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<strong style="word-wrap: break-word; word-break: break-all;">2.网络传输包的大小</strong><br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

网络在包传输过程，对包要进行分组，过大或者过小都不能很好的利用网络的带宽，所以对网络要进行测试和调优。可以使用ping -s 2048
-f hostname进行ping，尝试不同的package size，这样可以看到包的丢失情况。同时，可以使用nfsstat -o
net
测试nfs使用udp传输时丢包的多少。因为统计不能清零，所以要先运行此命令记住该值，然后可以再次运行统计。如果，经过上面的统计丢包很多。那么可以看看网络传输包的大小。使用下面的命令：<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#tracepath node1/端口号<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#ifconfig eth0<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

比较网卡的mtu和刚刚的pmtu，使用#ifconfig eth0 mtu
16436设置网卡的mtu和测试的一致。当然如果risize和wsize比mtu的值大，那么的话，server端的包传到client端就要进行重
组，这是要消耗client端的cpu资源。此外，包重组可能导致网络的不可信和丢包，任何的丢包都会是的rpc请求重新传输，rpc请求的重传有会导致
超时，严重降低nfs的性能。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

可以通过查看<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/ipv4/ipfrag_high_thresh<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/ipv4/ipfrag_low_thresh<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

了解系统可以处理的包的数目，如果网络包到达了ipfrag_high_thresh，那么系统就会开始丢包，直到包的数目到达ipfrag_low_thresh。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<strong style="word-wrap: break-word; word-break: break-all;">3.nfs挂载的优化</strong><br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

timeo：　　如果超时，客户端等待的时间，以十分之一秒计算<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

retrans：　超时尝试的次数。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

bg：　　　 后台挂载，很有用<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

hard：　　 如果server端没有响应，那么客户端一直尝试挂载<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

wsize：　　写块大小<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

rsize：　　读块大小<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

intr：　　 可以中断不成功的挂载<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

noatime：　不更新文件的inode访问时间，可以提高速度<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

async：　　异步读写<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<strong style="word-wrap: break-word; word-break: break-all;">4.nfsd的个数</strong><br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

缺省的系统在启动时，有8个nfsd进程<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#ps -efl|grep nfsd<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

通过查看/proc/net/rpc/nfsd文件的th行，第一个是nfsd的个数，后十个是线程是用的时间数，第二个到第四个值如果很大，那么就需要增加nfsd的个数。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

具体如下：<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#vi /etc/init.d/nfs<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

找到RPCNFSDCOUNT,修改该值，一般和client端数目一致。<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#service nfs restart<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#mount -a<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<strong style="word-wrap: break-word; word-break: break-all;">5.nfsd的队列长度</strong><br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

对于8个nfsd进程，系统的nfsd队列长度是64k大小，如果是多于8个，就要相应的增加相应的队列大小，具体的在<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/core/rwmem_default<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/core/wwmem_default<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/core/rmmem_max<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

/proc/sys/net/core/wmmem_max<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

队列的长度最好是每一个nfsd有8k的大小。这样，server端就可以对client的请求作排队处理。如果要永久更改此值<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#vi /etc/sysctl.conf<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

net.core.rmmem_default=数目<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

net.core.wmmem_default=数目<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

net.core.rmmem_max=数目<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

net.core.wmmem_max=数目<br style="word-wrap: break-word; word-break: break-all; line-height: normal;">

#service nfs restart</span>							
		</div><!--EndFragment-->
</body>
</htm</html>