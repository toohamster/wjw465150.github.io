<!-- saved from url=http://hi.baidu.com/jabber/blog/item/7e879852a23efd0f0cf3e3ea.html -->
<script>
window.onerror = new Function("return(false);")
</script><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>JGroups 简介、适用场合、配置、程序例子Demo等完全使用指南_XMPP Jabber practice 即时通讯开发实践</TITLE>
<STYLE>.error{color:#FF0000;font-size:12px}</STYLE>

<SCRIPT language=javascript src="popup.js"></SCRIPT>

<SCRIPT language=JavaScript src="g_spjs.js"></SCRIPT>

<SCRIPT language=javascript>
<!--

var allkey="";
var i=0;
var flag=0;
function setpv(allnum)
{
	var num = allnum.split('_');
	document.getElementById("result").innerHTML=num[0];
}
		 
function checkMail(s) 
{ 
  	var pattern=/\w+@\w+\.[a-z]+/; 
  	if(pattern.test(s)) 
    { 
       return true; 
    } 
  	else 
   { 
      return false; 
   } 
} 


function checkeandu(eanduid)
{
	var eanduvalue=G(eanduid).value;
	var len=bytes(eanduvalue);
	if(len>128)
	{
		showErr(2,"您输入的网址或邮箱太长，请保持在128字节以内。");
		return false;
	}
	else
	{ 
		 return true;
	}
		
}

function cmtdel(str)
{
	var pop=new Popup({ contentType:3,isReloadOnClose:false,width:340,height:80});
	pop.setContent("title","删除评论");
	pop.setContent("confirmCon","您确定要彻底删除这条评论吗？");
	pop.setContent("callBack",delCallback2);
	pop.setContent("parameter",{fid:str,popup:pop});
	pop.build();
	pop.show();
	return false;
}
function delCallback2(para)
{
	var o_pop=para["popup"];
	o_pop.config.contentType=1;
	o_pop.setContent("contentUrl","");
	o_pop.reBuild();
	G(para["fid"]).target=o_pop.iframeIdName;
	eval("document."+para["fid"]).submit();
}



function checkname(strid)
{
	var ele=document.getElementById(strid);
	var len=bytes(ele.value);
	if(len>49)
	{
		showErr(1,"您输入的姓名太长，请保持在49字节以内。");
		return false;
	}
	else 
	{		
		if(len==0)
		{
			document.getElementById(strid).value="匿名网友";
		}
		 return true;
	}	
	
}

function checktext(textid)
{
		document.getElementById(textid).value=trimlr(textid);
		var str=trimrn(textid);
		len=str.length;
		if(len==0 || ((/^[\s,　]+$/gi).test(str)) )
		{
			showErr(3,"您必须输入评论内容，请检查。");
			return false;
		}
		else 
		{
				if(len>1000)
				{
					showErr(3,"您输入的评论内容太长，请保持在500字以内。");
					return false;
				}
			return true;
		}	
}

function showErr(index,str)
{
	G(index+"_err").style.display="";
	G(index+"_err_con").innerHTML=str;
}
function hidErr(index)
{
	G(index+"_err").style.display="none";
	G(index+"_err_con").innerHTML="";
}

function alertPop(tit,con)
{
	var pop=new Popup({ contentType:4,isReloadOnClose:false,width:340,height:80});
	pop.setContent("title",tit);
	pop.setContent("alertCon",con);
	pop.build();
	pop.show();
}

function cmtfull()
{
	var cnum=0;
	if(cnum>=50000)
	{
		alertPop("发表评论","单篇日志评论数最多为50000条.");
		return false;
	}
	else
	{
		return true;
	}
}

function checkcmtform()
{
	if(checkname("spBlogCmtor")&&checkeandu("spBlogCmtURL")&&checktext("spBlogCmtText")&&cmtfull())
	{
		submitForm();
		return true;
	}
	else
	{
		return false;
	}
}

var g_pop=null;
function submitForm()
{
	g_pop=new Popup({ contentType:1,isReloadOnClose:false,width:340,height:80});
	g_pop.setContent("title","添加评论");
	g_pop.setContent("contentUrl","");
	g_pop.build();
	G("popFormSubmit").target=g_pop.iframeIdName;
	g_pop.show();
}

function g_close_pop()
{
	g_pop.close();
}

function formatonlinpic()
{
var picobj=document.getElementsByName("onlinepic");
var picnum=picobj.length;
	
	for(var i=0;i<picnum;i++)
	{
		if(picobj[i].width>200)
		{
			picobj[i].width=200;
		}
		if(picobj[i].height>200)
		{
			picobj[i].height=200;
		}
	}

}

//-->
</SCRIPT>
</HEAD>

<BODY scroll=yes onload=formatonlinpic();>

<CENTER>

<DIV id=main style="WIDTH: 996px" align=left>

<DIV class=stage>

<DIV class=stagepad>

<DIV style="WIDTH: 100%">

<DIV class=modbox id=m_blog><!--StartFragment--><DIV class=tit>JGroups 简介、适用场合、配置、程序例子Demo等完全使用指南</DIV>
<DIV class=date>2007-05-08 14:38</DIV>
<TABLE style="TABLE-LAYOUT: fixed">
<TBODY>
<TR>
<TD>
<DIV 
class=cnt>目前项目中在克服JGroups初期使用的困难之后，已经使用比较稳定了。感觉比较烦琐和容易出错的还是JGroups配置。感觉中文的资源较少，现将自己总结的经验总结如下<BR>Tim 
<A href="http://hi.baidu.com/jabber/blog/item/7e879852a23efd0f0cf3e3ea.html" 
target=_blank>http://hi.baidu.com/jabber/blog/item/7e879852a23efd0f0cf3e3ea.html</A><BR><BR><STRONG>JGroups 
适合使用场合</STRONG><BR>服务器集群cluster、多服务器通讯、服务器replication(复制)等，分布式cache缓存<BR><BR><STRONG>JGroups 
简介</STRONG><BR>JGroups是一个基于Java语言的提供可靠多播(组播)的开发工具包。在IP 
Multicast基础上提供可靠服务，也可以构建在TCP或者WAN上。主要是由Bela 
Ban开发，属于JBoss.org，在JBoss的网站也有一些相关文档。目前在 
SourceForge上还是比较活跃，经常保持更新。<BR><BR><STRONG>JGroups 配置</STRONG><BR><BR>PING: 
发现初始成员<BR>MERGE2: 将网络层切分的包重新合并。<BR>FD_SOCK: Failure Dectection 
错误检测，基于TCP<BR>FD：Failure Dectection 错误检测，基于心跳<BR>VERIFY_SUSPECT: 
检查貌似失败的节点<BR>pbcast.NAKACK: 应答，提供可靠传输<BR>UNICAST: 可靠的UNICAST<BR>pbcast.STABLE: 
计算广播信息是否稳定<BR>VIEW_SYNC: 定期广播view(成员名单)<BR>pbcast.GMS: Group membership, 
处理joins/leaves/crashes等<BR>FC: 流量控制<BR>FRAG2:Fragmentation 
layer，分包，将大的数据包分拆成适合网络层传输<BR><BR>以上一些是比较重要的配置，基本上不能少。如果要深入研究可以在　org.jgroups.protocols　里面查看源代码<BR><BR><STRONG>JGroups使用例子, 
JGroups demo, Tim的hello world例子</STRONG><BR><FONT 
style="BACKGROUND-COLOR: rgb(192,192,192)" face=宋体 color=#000000 size=1>// 
Timreceiver.java<BR><BR>import org.jgroups.tests.perf.Receiver;<BR>import 
org.jgroups.tests.perf.Transport;<BR>import org.jgroups.util.Util;<BR><BR>public 
class TimReceiver implements Receiver {<BR>&nbsp;&nbsp;&nbsp; private Transport transport = 
null;<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
TimReceiver t = new TimReceiver();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int 
sendMsgCount = 5000;<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int msgSize = 1000;<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
t.start();<BR><BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; t.sendMessages(sendMsgCount, msgSize);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; System.out.println("########## Begin to recv...");<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
Thread.currentThread().join();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (Exception e) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
e.printStackTrace();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } finally {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (t != null) 
{<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; t.stop();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; public void start()<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throws Exception {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
transport = (Transport) new TimTransport();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
transport.create(null);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transport.setReceiver(this);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
transport.start();<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; public void stop() {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if 
(transport != null) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transport.stop();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
transport.destroy();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; private int count = 
0;<BR>&nbsp;&nbsp;&nbsp; public void receive(Object sender, byte[] data) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
System.out.print(".");<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (++count == 5000) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
System.out.println("\r\nRECV DONE.");<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.exit(0);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; private void sendMessages(int count, int 
msgSize)<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throws Exception {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; byte[] buf = new 
byte[msgSize];<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (int k = 0; k &lt; msgSize; k++)<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
buf[k] = 'T';<BR><BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println("-- sending " + count + " " + 
Util.printBytes(msgSize) + " messages");<BR><BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 
count; i++) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transport.send(null, buf);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println("######### send complete");<BR>&nbsp;&nbsp;&nbsp; 
}<BR>}<BR><BR><BR><BR>// TimTransport.java<BR><BR>import 
java.util.Map;<BR>import java.util.Properties;<BR><BR>import 
org.jgroups.Address;<BR>import org.jgroups.JChannel;<BR>import 
org.jgroups.Message;<BR>import org.jgroups.ReceiverAdapter;<BR>import 
org.jgroups.tests.perf.Receiver;<BR>import 
org.jgroups.tests.perf.Transport;<BR><BR>public class TimTransport extends 
ReceiverAdapter implements Transport{<BR>&nbsp;&nbsp;&nbsp; private JChannel channel = 
null;<BR>&nbsp;&nbsp;&nbsp; private String groupName = "TimDemo";<BR>&nbsp;&nbsp;&nbsp; private Receiver 
receiver = null;<BR>&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; String PROTOCOL_STACK_UDP1 = 
"UDP(bind_addr=192.168.100.59"; <BR>&nbsp;&nbsp;&nbsp; String PROTOCOL_STACK_UDP2 = 
";mcast_port=8888";<BR>&nbsp;&nbsp;&nbsp; String PROTOCOL_STACK_UDP3 = 
";mcast_addr=225.1.1.1";<BR>&nbsp;&nbsp;&nbsp; String PROTOCOL_STACK_UDP4 = 
";tos=8;loopback=false;max_bundle_size=64000;" +<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
"use_incoming_packet_handler=true;use_outgoing_packet_handler=false;ip_ttl=2;enable_bundling=true):"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
+ "PING:MERGE2:FD_SOCK:FD:VERIFY_SUSPECT:"<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
+"pbcast.NAKACK(gc_lag=50;max_xmit_size=50000;use_mcast_xmit=false;" +<BR>&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
"retransmit_timeout=300,600,1200,2400,4800;discard_delivered_msgs=true):"<BR>&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; +"UNICAST:pbcast.STABLE:VIEW_SYNC:"<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
+"pbcast.GMS(print_local_addr=false;join_timeout=3000;" +<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
"join_retry_timeout=2000;" +<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
"shun=true;view_bundling=true):"<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
+"FC(max_credits=2000000;min_threshold=0.10):FRAG2(frag_size=50000)";<BR><BR>&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; public Object getLocalAddress() {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return channel != null 
? channel.getLocalAddress() : null;<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; public void start() 
throws Exception {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; channel.connect(groupName);&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp; 
}<BR><BR>&nbsp;&nbsp;&nbsp; public void stop() {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (channel != null) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; channel.shutdown();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; public void destroy() 
{<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (channel != null) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; channel.close();<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp; channel = null;<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; public void 
setReceiver(Receiver r) {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; this.receiver = r;<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; 
public Map dumpStats() {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return channel != null ? channel.dumpStats() 
: null;<BR>&nbsp;&nbsp;&nbsp; }<BR><BR>&nbsp;&nbsp;&nbsp; public void send(Object destination, byte[] payload) 
throws Exception {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; byte[] tmp = new byte[payload.length];<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
System.arraycopy(payload, 0, tmp, 0, payload.length);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Message msg = 
null;<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; msg = new Message((Address) destination, null, tmp);<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
if (channel != null) {<BR>&nbsp;&nbsp;&