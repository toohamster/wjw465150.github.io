
<html>
<head>
<meta HTTP-EQUIV="Content-Type" content="text/html; charset=gb2312">
<LINK href="style1.css" rel=stylesheet>
<title>Java_Mail_API介绍</title>

</head>

<body background="../pic/bg.gif">
<p>Java Mail API 介绍<br>
<br>
作 者 : 阿 良<br>
　　 Java Mail API的开发是Sun为Java开发者提供公用API框架的持续努力的良好例证。提倡公用框架，反对受限于供应商的解决方案，充分预示着一个日益开放的开发环境的建立。<br>
<br>
　　 在email通讯领域，面向最终应用的开发者（以及用户）已经能够购买到最适合他们需要的公用API框架实现，而低层开发者能够提供有效访问特定邮件服务的解决方案。其意义在于：小型开发组能够集中精力于开发高性能的客户端邮件软件，而为它提供不同邮件环境下的支持则变得相当容易；大型开发组织则侧重于为新开发的企业级邮件服务提供公用的访问支持，并由此获得丰富的应用软件支持。最大的赢家是信息系统用户，它能够按照要求（性能、投资等）方便地集成由不同厂商提供的产品和方案。 
开发高度可重用的开放API框架的关键之一在于强调抽象接口技术，即在支持现有标准的基础上，支持未来扩展和可选实现。Java 
Mail API体现了这一思想。Sun和其它开发商正在为大多数现有的公用标准和协议提供缺省实现和工具。已经可用的支持至少包括：POP3、SMTP、IMAP等。<br>
<br>
　　 一、 Java Mail API 介绍<br>
<br>
　　 Java Mail API 
的结构本身证明了它的开发者的基本目标之一――软件开发的工作量应该取决于应用程序本身的复杂程度以及开发者所要求的控制程度。换句话说，Java 
Mail API尽可能地保持简单。本文所附示例程序ListServer（以及API软件包所带的演示程序）充分说明了这一点。<br>
<br>
　　 乍看起来，Java Mail API所拥有的类总数以及类之间的关系可能让人误解为需要漫长的学习时间。实际上，一旦正式开始使用，你就会发现该API不失为在应用程序中加入健壮的邮件/通讯支持的简单工具。<br>
<br>
　　 Java Mail API包括的类数量远远大于此处涉及的类数量。下面按照在一个典型的应用程序中各个类出现过程为序，集中介绍部分核心类的功能和作用：<br>
<br>
　　 ◆javax.mail.Session<br>
<br>
　　 javax.mail.Session是Java Mail API最高层入口类。它最常用的方法用于为不同邮件协议控制和装载SPI（即Service 
Provider Implementation）。如javax.mail.Store是通过Session类获得的。<br>
<br>
　　 ◆javax.mail.Store<br>
<br>
　　 javax.mail.Store类实现特定邮件协议上的读、写、监视、查找等操作。通过javax.mail.Store类可以访问javax.mail.Folder类。<br>
<br>
　　 ◆javax.mail.Transport<br>
<br>
　　 javax.mail.Transport类也是由服务提供者提供的类，实现用特定协议发送消息/邮件。<br>
<br>
　　 ◆javax.mail.Folder<br>
<br>
　　 javax.mail.Folder类用于分级组织邮件，并提供按照javax.mail.Message格式访问email的能力。<br>
<br>
　　 ◆javax.mail.Message<br>
<br>
　　 javax.mail.Message类模型化实际email消息的所有细节，如标题、发送/接收地址、发送日期等等。<br>
<br>
　　 ◆Java Mail API 与 JAF<br>
<br>
　　 值得一提的是，Java Mail API实际上依赖于另外一个Java 
扩展JAF，即JavaBean活动框架（JavaBean Activation Framework）。JAF的目的在于统一处理不同数据格式的方法（不管数据格式为简单文本还是由图片、声音、视频甚至其它“活动”内容共同组成的复合文档）。在这个意义上，JAF对Java的作用正如插件对Web浏览器的作用。<br>
<br>
<br>
二、一个Java Mail API 演示程序<br>
<br>
作 者 : 阿 良<br>
<br>
　　 邮件列表服务经常用于为工作组提供基于email的讨论环境，订阅者通过它讨论共同感兴趣的问题。<br>
<br>
　　 本文提供的示例程序ListServer是一个简单的邮件列表转发服务器：它从指定帐号读取新邮件并发送给所有订阅者。Java 
Mail API不仅使得实现其基本功能相当简单（使用缺省的POP3和SMTP），而且保证了程序易于支持任何可能遇到的系统环境。<br>
<br>
　　 运行该程序需要包含以下支持文件：Java Mail （mail.jar）、JAF（activation.jar）以及缺省的POP3支持（pop3.jar），如下面DOS批命令文件所示（这些JAR文件可以从Sun的Java 
Mail主页下载，参见相关资源）：<br>
<br>
　　 @echo off<br>
<br>
　　 PATH .;d:\jdk1.1\bin<br>
<br>
　　 set CLASSPATH=.;d:\jdk1.1\lib\classes.zip;activation.jar;mail.jar;pop3.jar<br>
<br>
　　 java ListServer %1 %2 %3 %4 %5 %6 %7 %8 %9<br>
<br>
　　 程序启动后先由main()过程读取命令行参数，如邮件服务器、邮件帐号、更新周期等。接下来创建ListServer实例，最后进入“读取新邮件并转发给订阅者/等待直到下一次检查时间到来”无限循环。ListServer的核心功能（即读取和转发所有新邮件）在process()过程实现，其主要操作过程为：<br>
<br>
　　 ◆获取javax.mail.Session实例，并进而获得javax.mail.Store实例。<br>
<br>
　　 ◆利用javax.mail.Store实例获得缺省收件箱（INBOX）javax.mail.Folder实例。<br>
<br>
　　 ◆使用javax.mail.Folder对象提取新邮件，存储为javax.mail.Message对象数组。<br>
<br>
　　 ◆创建javax.mail.FetchProfile以（潜在地）优化对特定邮件组成成分的提取。<br>
<br>
　　 请注意此处javax.mail.FetchProfile类的应用。FetchProfile类提供邮件协议提供者特有可选参数，其目的是更有效地实现邮件组成成分的预提取。Java 
Mail API鼓励延迟提取邮件成分――即仅在真正需要的时候才提取。这不仅有利于改善系统的响应时间，某些操作（如显示邮件标题列表）也能够从中得到好处。下面代码说明了FetchProfile的基本用法：<br>
<br>
　　 // 提取所有邮件的属性和标记<br>
Message[] messages = folder.getMessages();<br>
FetchProfile fp = new FetchProfile();<br>
fp.add(FetchProfile.Item.ENVELOPE);<br>
fp.add(FetchProfile.Item.FLAGS);<br>
fp.add(&quot;X-Mailer&quot;);<br>
folder.fetch(messages, fp);<br>
<br>
<br>
　　 sendMsg()过程由processMsg()调用，负责分析指定收件并将它转发给所有订阅者。它首先获得缺省Session实例，然后创建javax.mail.Transport对象发送消息：<br>
<br>
　　 // 设置属性并获得缺省进程实例<br>
Properties props = new Properties();<br>
props.put(&quot;mail.smtp.host&quot;, _smtpHost);<br>
Session session = Session.getDefaultInstance(props, null);<br>
......<br>
// 发送消息<br>
Transport transport = session.getTransport(SMTP_MAIL);<br>
transport.connect(_smtpHost, _user, _password);<br>
transport.sendMessage(newMessage, _toList);<br>
<br>
<br>
　　 
邮件字段（如收件人、发件人、邮件主题和日期等）的设置方法如下：<br>
<br>
　　 // 创建新邮件 Address replyToList[] = { new InternetAddress(replyTo) 
};<br>
Message newMessage = new MimeMessage(session);<br>
if (_fromName != null)<br>
newMessage.setFrom(new InternetAddress(from,<br>
_fromName + &quot; / &quot; + replyTo));<br>
else<br>
newMessage.setFrom(new InternetAddress(from));<br>
newMessage.setReplyTo(replyToList);<br>
newMessage.setRecipients(Message.RecipientType.BCC, _toList);<br>
newMessage.setSubject(subject);<br>
newMessage.setSentDate(sentDate);<br>
<br>
<br>
　　 
填写邮件内容应该区分其类型（纯文本和复合内容使用不同方法）：<br>
<br>
　　 // 填写邮件内容 Object content = message.getContent(); //原邮件内容<br>
String debugText = &quot;主题: &quot; + subject + &quot;, 发送日期: &quot; 
+ sentDate;<br>
if (content instanceof Multipart)<br>
{<br>
debugMsg(&quot;转发复合内容邮件 (&quot; + debugText + &quot;)&quot;);<br>
newMessage.setContent((Multipart)message.getContent());<br>
}<br>
else<br>
{<br>
debugMsg(&quot;转发纯文本邮件 (&quot; + debugText + &quot;)&quot;);<br>
newMessage.setText((String)content);<br>
}<br>
　　 可以看到，javax.mail.internet.MimeMessage内容读取例程getContent()只需要一次调用就可以读取复杂的分级复合邮件。<br>
<br>
<br>
三、相关资源<br>
<br>
作 者 : 阿 良<br>
<br>
　　 1．Java Mail API软件包下载（版本1.1.2）<br>
<br>
　　 ftp://usmt.java.sun.com/pub/javamail/tyo39/javamail1_1_2.zip<br>
<br>
　　 缺省POP3实现软件包下载：<br>
<br>
　　 ftp://usmt.java.sun.com/pub/javamial/tyo39/pop31_1.zip<br>
<br>
　　 以上文件也可以从Sun的Java Mail API主页下载<br>
<br>
　　 http://java.sun.com/products/javamail/<br>
<br>
　　 2．JavaBeans Activation Framework（JAF）主页<br>
<br>
　　 http://java.sun.com/beans/glasgow/jaf.html<br>
<br>
　　 3．用Java Mail API开发的第三方产品列表，部分可以下载源代码<br>
<br>
　　 http://java.sun.com/products/javamail/Third_Party.html<br>
<br>
　　 4．Java meets e-mail<br>
<br>
　　 http://www.developer.com/journal/techworkshop/112498_jmail.html<br>
<br>
　　 5．Cutting Edge Java Technology: The JavaMail API<br>
<br>
　　 http://www.sigs.com/<br>
<br>
　　 6．订阅由Sun维护的关于Java Mail API的邮件列表<br>
<br>
　　 发信给listserv@java.sun.com，内容:<br>
<br>
　　 subscribe javamail-interest<br>
</p>
</body>                                 
</html>                                 
