<html>
<title>动态生成JNLP</title>
<body>
<!--StartFragment-->
<div class="post">
  <div class="postbody">Java很早就推出了Java Web 
    Start（简称JWS）技术。这一技术的初衷很好：希望将桌面程序和Web页面之间搭起一个无缝的桥梁。虽然Applet技术已经存在了十多年，但是它
    日趋老迈衰落，所以JWS也就应运而生了。
    但是JWS并未顺利实现它的初衷。从Java的几次大改版都可以看到，JWS的bug多多，漏洞频频，Sun和Oracle不得不频繁的进行打补丁修复。
    可以看看Java 5和6每次大小版本升级变化中，有多少是和Java Web Start有关的。难怪很多人都这样感叹：“哥再也不用Java Web
    
    Start部署应用了！”其实也未必，随着Java的不断完善，我们只要了解更多的技巧，就可以有效的消除一些JWS潜在的问题，并顺利的应用在企业应用
    中。
    以2BizBox ERP项目为例，本文介绍如何在企业应用中利用动态生成JNLP文件的技术来实现应用的快速部署。<br>
    <div style="text-align: center;"></div>
    &nbsp; &nbsp; &nbsp; 大家知道，2BizBox 
    ERP作为一个免费的高质量ERP软件，有成千上万的用户。就我们开发团队负责维护的服务器，就有近千台。每台服务器都是一家企业，每家企业又有几十上百
    的客户端。如果采用下载客户端安装程序进行安装的方式来维护诸多的客户端，无疑是巨大的工作量，用户和我们开发团队都不会轻松方便。为了解决这一问题，采
    用JWS无疑是必然的选择。 <br>
    &nbsp; &nbsp; &nbsp; 为了让客户端自动启动下载和安装程序，我们在企业的2BizBox ERP服务器上部署以下JNLP文件内容：<br>
    <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">&nbsp;1</span>&nbsp;<br>
      <span style="color: #008080; ">&nbsp;2</span>&lt;?xml&nbsp;version="1.0"&nbsp;encoding="utf-8"?&gt;<br>
      <span style="color: #008080; ">&nbsp;3</span>&nbsp;&lt;jnlp&nbsp;spec="1.0+"&nbsp;codebase="http://**.**.**.**/webstart/"&gt;<br>
      <span style="color: #008080; ">&nbsp;4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;information&gt;<br>
      <span style="color: #008080; ">&nbsp;5</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;2BizBox&lt;/title&gt;<br>
      <span style="color: #008080; ">&nbsp;6</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;vendor&gt;Serva&nbsp;Software&lt;/vendor&gt;<br>
      <span style="color: #008080; ">&nbsp;7</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;homepage&nbsp;href="http://www.2bizbox.com/"/&gt;<br>
      <span style="color: #008080; ">&nbsp;8</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;description&gt;2BizBox&nbsp;ERP&nbsp;3&lt;/description&gt;<br>
      <span style="color: #008080; ">&nbsp;9</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;offline-allowed/&gt;<br>
      <span style="color: #008080; ">10</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/information&gt;<br>
      <span style="color: #008080; ">11</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;security&gt;<br>
      <span style="color: #008080; ">12</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;all-permissions/&gt;<br>
      <span style="color: #008080; ">13</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/security&gt;<br>
      <span style="color: #008080; ">14</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;update&nbsp;check="always"&nbsp;policy="always"/&gt;<br>
      <span style="color: #008080; ">15</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resources&gt;<br>
      <span style="color: #008080; ">16</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;j2se&nbsp;href="j2se"&nbsp;version="1.6+"&nbsp;initial-heap-size="128m"&nbsp;max-heap-size="512m"/&gt;<br>
      <span style="color: #008080; ">17</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jar&nbsp;href="&gt;<br>
      <span style="color: #008080; ">18</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jar&nbsp;href="&gt;<br>
      <span style="color: #008080; ">19</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jar&nbsp;href="&gt;<br>
      <span style="color: #008080; ">20</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jar&nbsp;href="&gt;<br>
      <span style="color: #008080; ">21</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jar&nbsp;href="&gt;<br>
      <span style="color: #008080; ">22</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;more&nbsp;jar.&nbsp;&nbsp;&nbsp;--&gt;<br>
      <span style="color: #008080; ">23</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resources&gt;<br>
      <span style="color: #008080; ">24</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;application-desc&nbsp;main-class="com.serva.bb2.gui.Main"&gt;<br>
      <span style="color: #008080; ">25</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;argument&gt;**.**.**.**&lt;/argument&gt;<br>
      <span style="color: #008080; ">26</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/application-desc&gt;<br>
      <span style="color: #008080; ">27</span>&nbsp;&lt;/jnlp&gt;<font color="#008080"><br>
      </font></div>
    <br>
    &nbsp; &nbsp; &nbsp; 上面的JNLP文件定义了2BizBox ERP客户端启动所需要的jar包以及下载位置、jre版本等。<br>
    &nbsp; &nbsp; &nbsp; <br>
    &nbsp;
    &nbsp; &nbsp; 
    在实际应用中，效果良好。但是由于JNLP和JWS本身的bug，在某些情况下，后台jar程序更新升级后，用户侧启动jnlp并不能获得更新，需要强行
    清空JWS缓存才行，这肯定不是一般用户懂得的。还有一种情况，就是由于ERP本身的jar包发生了变化（例如发生了增减），此时相当于jnlp文件的内
    容发生了变化。这时候，要求用户一侧机器必须意识到jnlp的变化并先将jnlp进行更新。在很多java版本中（例如jre6的早期版本――例如
    jre6 update20之前），由于潜在的一些bug等原因，都不能顺利的进行更新，导致程序启动失败。<br>
    &nbsp; &nbsp; &nbsp; <br>
    &nbsp; &nbsp; &nbsp; 如何解决这一情况呢？采用动态jnlp是一个有效的方法。<br>
    &nbsp; &nbsp; &nbsp; <br>
    &nbsp; &nbsp; &nbsp; 动态jnlp的思路是：在服务器的后端，通过jsp或servlet来动态的生成一个jnlp文件，而不是放置一个静态的固定不变的jnlp文件。这样，jnlp文件内容就可以通过后台应用的逻辑进行动态生成创建：需要什么jar包、需要什么jre版本等等。<br>
    &nbsp;
    &nbsp; &nbsp; 
    以jsp为例。在这个jsp中，首先要注意的几个技术点是：要设置本页面不要被浏览器缓存，放置jnlp内容变化无法及时被更新；其次要设置mime类型
    让浏览器认为它是一个jnlp文件，以便下载执行而不是直接在浏览器中显示出来。通过设置response即可达到这些目的： <br>
    <br>
    <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">1</span>&nbsp;response.setHeader("Pragma",&nbsp;"no-cache");<br>
      <span style="color: #008080; ">2</span>&nbsp;response.setHeader("Expires",&nbsp;"0");<br>
      <span style="color: #008080; ">3</span>&nbsp;response.setHeader("Content-Disposition",&nbsp;"filename=\"bb.jnlp\";");<br>
      <span style="color: #008080; ">4</span>&nbsp;response.setContentType("application/x-java-jnlp-file");<font color="#008080"><br>
      </font></div>
    &nbsp;<br>
    &nbsp; &nbsp; &nbsp;其中，禁止浏览器和webstart缓存jnlp内容，通过设置：response.setHeader("Pragma", "no-cache");和response.setHeader("Expires", "0"); <br>
    &nbsp; &nbsp; 
    &nbsp;设置文件类型，并给定一个动态的文件名。这个通过这个进行：response.setHeader("Content-Disposition", 
    "filename=\"bb.jnlp\";");response.setContentType("application/x-java-jnlp-file"); <br>
    &nbsp; &nbsp; &nbsp;<br>
    &nbsp; &nbsp; &nbsp;一个需要注意的问题是，在动态生成jnlp文件时，要注意<strong>jnlp文件中的href标签不要进行设置</strong>。为什么呢？看一下jnlp的格式文档是这样说的： <a href="http://lopica.sourceforge.net/ref.html#jnlp">http://lopica.sourceforge.net/ref.html#jnlp<br>
    <br>
    </a> <code> The jnlp file's one and only root.<br>
    <br>
    </code> <code> </code> <code>Attributes <br>
    spec=version , optional <br>
    Specifies what versions of the jnlp spec a jnlp file works with. The
    default value is 1.0+. Thus, you can typically leave it out. <br>
    version=version , optional <br>
    Specifies the version of the application as well as the version of the jnlp file itself. <br>
    codebase=url , optional <br>
    Specifies the codebase for the application. Codebase is also used as base URL for all relative URLs in href attributes.<br>
    href=url , optional <br>
    Contains the location of the jnlp file as a URL. If you leave out 
    the href attribute, Web Start will disable the update check on your JNLP
    file, and Web Start will not treat each new JNLP file as an application
    update - only updated jar files will. Leaving out href usually makes 
    only sense if your jnlp file is created dynamically (that is, throug a 
    cgi-script, for example) and if your jnlp file's arguments or properties
    change from request to request (user to user). <br>
    Note, that Java Web Start needs href to list your app in the Web Start Application Manager.</code> <br>
    &nbsp; &nbsp; &nbsp; 可见在动态生成jnlp时候就不要设置href了，这样就可以保证每次浏览器会重新下载jnlp文件内容，否则可能会被缓存，无法及时更新程序。 <br>
    <br>
    &nbsp; &nbsp; &nbsp; 
    另外一个技巧是：jnlp文件中的jar包，可以进行动态检查文件jar包并动态生成。这样，如果以后程序的jar文件有增减，就不必修改jnlp文件
    了。方法也很简单：检查当前web在服务器的绝对路径，并list所有的jar文件，然后在jnlp生成时候输出即可：<br>
    <br>
    <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">&nbsp;1</span>&nbsp;<br>
      <span style="color: #008080; ">&nbsp;2</span>&nbsp;&lt;%<br>
      <span style="color: #008080; ">&nbsp;3</span>&nbsp;String&nbsp;urlString=request.getRequestURL().toString();<br>
      <span style="color: #008080; ">&nbsp;4</span>&nbsp;URL&nbsp;url=<span style="color: #0000FF; ">new</span>&nbsp;URL(urlString);<br>
      <span style="color: #008080; ">&nbsp;5</span>&nbsp;String&nbsp;host=url.getHost();<br>
      <span style="color: #008080; ">&nbsp;6</span>&nbsp;String&nbsp;path&nbsp;=&nbsp;request.getSession().getServletContext().getRealPath("/");<br>
      <span style="color: #008080; ">&nbsp;7</span>&nbsp;path=path.replace("\\.\\",&nbsp;"\\");<br>
      <span style="color: #008080; ">&nbsp;8</span>&nbsp;File&nbsp;file=<span style="color: #0000FF; ">new</span>&nbsp;File(path);<br>
      <span style="color: #008080; ">&nbsp;9</span>&nbsp;String[]&nbsp;files&nbsp;=&nbsp;file.list();<br>
      <span style="color: #008080; ">10</span>&nbsp;ArrayList&nbsp;jarNames=<span style="color: #0000FF; ">new</span>&nbsp;ArrayList();<br>
      <span style="color: #008080; ">11</span>&nbsp;<span style="color: #0000FF; ">for</span>(<span style="color: #0000FF; ">int</span>&nbsp;i=0;i&lt;files.length;i++){<br>
      <span style="color: #008080; ">12</span>&nbsp;String&nbsp;fileName=files[i];<br>
      <span style="color: #008080; ">13</span>&nbsp;<span style="color: #0000FF; ">if</span>(fileName.toLowerCase().endsWith(".jar")){<br>
      <span style="color: #008080; ">14</span>&nbsp;jarNames.add(fileName);<br>
      <span style="color: #008080; ">15</span>&nbsp;}<br>
      <span style="color: #008080; ">16</span>&nbsp;}<br>
      <span style="color: #008080; ">17</span>&nbsp;%&gt;<br>
      <span style="color: #008080; ">18</span>&nbsp;</div>
    &nbsp; &nbsp; &nbsp; 然后在jar的部分这样列出：<br>
    <br>
    <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">&nbsp;1</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resources&gt;<br>
      <span style="color: #008080; ">&nbsp;2</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;j2se&nbsp;href="j2se"&nbsp;version="1.6+"&nbsp;initial-heap-size="128m"&nbsp;max-heap-size="512m"/&gt;<br>
      <span style="color: #008080; ">&nbsp;3</span>&nbsp;&lt;%<br>
      <span style="color: #008080; ">&nbsp;4</span>&nbsp;<span style="color: #0000FF; ">for</span>(<span style="color: #0000FF; ">int</span>&nbsp;i=0;i&lt;jarNames.size();i++){<br>
      <span style="color: #008080; ">&nbsp;5</span>&nbsp;out.write("\n");<br>
      <span style="color: #008080; ">&nbsp;6</span>&nbsp;out.write("&lt;jar&nbsp;href=file:///C:/""+jarNames.get(i).toString()+"\"/&gt;");<br>
      <span style="color: #008080; ">&nbsp;7</span>&nbsp;}<br>
      <span style="color: #008080; ">&nbsp;8</span>&nbsp;%&gt;<br>
      <span style="color: #008080; ">&nbsp;9</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resources&gt;<br>
      <span style="color: #008080; ">10</span>&nbsp;</div>
    &nbsp;
    &nbsp; &nbsp; 
    最后，如果需要在jnlp中指定当前服务器的ip地址或主机地址，也可以通过动态生成。例如jnlp文件中的codebase，就是如此。另
    外，2BizBox 
    ERP还需要在主函数中给出当前服务器的ip地址。而对于上千家的2BizBox服务器，每个jnlp要手工维护ip地址，是不可想象的。这里通过动态生
    成，就永远的解决了这个问题：<br>
    <br>
    <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">1</span>&nbsp;String&nbsp;urlString=request.getRequestURL().toString();<br>
      <span style="color: #008080; ">2</span>&nbsp;URL&nbsp;url=<span style="color: #0000FF; ">new</span>&nbsp;URL(urlString);<br>
      <span style="color: #008080; ">3</span>&nbsp;String&nbsp;host=url.getHost();<font color="#008080"><br>
      </font></div>
    <br>
    &nbsp; &nbsp; &nbsp; 然后在jnlp中：<br>
    <jnlp spec="1.0+" codebase="http://&lt;%=host%&gt;/webstart/"><br>
      <div style="background-color:#eeeeee;font-size:13px;border:1px solid #CCCCCC;padding-right: 5px;padding-bottom: 4px;padding-left: 4px;padding-top: 4px;width: 98%;word-break:break-all"><span style="color: #008080; ">1</span>&nbsp;&lt;jnlp&nbsp;spec="1.0+"&nbsp;codebase="http://&lt;%=host%&gt;/webstart/"&gt;<br>
        <span style="color: #008080; ">2</span>&nbsp;<img src="dot.gif" alt=""><br>
        <span style="color: #008080; ">3</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;application-desc&nbsp;main-class="com.serva.bb2.gui.Main"&gt;<br>
        <span style="color: #008080; ">4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;argument&gt;&lt;%=host%&gt;&lt;/argument&gt;<br>
        <span style="color: #008080; ">5</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/application-desc&gt;<font color="#008080"><br>
        </font></div>
      &nbsp; &nbsp; &nbsp;<br>
      &nbsp; &nbsp; &nbsp;这样，通过jsp动态生成jnlp的方案就完成了。它在2BizBox ERP中应用良好，方便的让上千家2BizBox ERP的云主机用户快速得到程序更新，而简化了程序的维护方式。 </jnlp>
  </div>
</div>
<div id="AjaxHolder_UpdatePanel1">
<a name="pagedcomment"></a> <br>
</body>
</htm>