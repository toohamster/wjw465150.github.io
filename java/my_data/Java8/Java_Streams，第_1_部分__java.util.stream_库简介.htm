<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Java Streams，第 1 部分: java.util.stream 库简介</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>Java 
SE 8 中主要的新语言特性是<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">拉姆达表达式</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。可以将拉姆达表达式想作一种匿名方法；像方法一样，拉姆达表达式具有带类型的参数、主体和返回类型。但真正的亮点不是拉姆达表达式本身，而是它们所实现的功能。拉姆达表达式使得<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><STRONG 
style="FONT-WEIGHT: bold; TEXT-INDENT: 0px">将行为表达为数据</STRONG><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>变得很容易，从而使开发具有更强表达能力、更强大的库成为可能。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>Java 
SE 8 中引入的一个这样的库是<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>java.util.stream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>包 
(Streams)，它有助于为各种数据来源上的可能的并行批量操作建立简明的、声明性的表达式。较早的 Java 版本中也编写过像 Streams 
这样的库，但没有紧凑的行为即数据语言特性，而且它们的使用很麻烦，以至于没有人愿意使用它们。您可以将 Streams 视为 Java 
中第一个充分利用了拉姆达表达式的强大功能的库，但它没有什么特别奇妙的地方（尽管它被紧密集成到核心 JDK 库中）。Streams 不是该语言的一部分 — 
它是一个精心设计的库，充分利用了一些较新的语言特性。</P>
<DIV 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">关于本系列</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">借助<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>java.util.stream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>包，您可以简明地、声明性地表达集合、数组和其他数据源上可能的并行批量操作。在 
Java 语言架构师 Brian Goetz 编写的这个系列 中，全面了解 Streams 库，并了解如何最充分地使用它。</P></DIV>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>本文是一个深入探索<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>java.util.stream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>库的系列的第一部分。本期介绍该库，并概述它的优势和设计原理。在后续几期中，您将学习如何使用流来聚合和汇总数据，了解该库的内部原理和性能优化。</P>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>使用流的查询</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>流的最常见用法之一是表示对集合中的数据的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">查询</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。清单 1 
给出了一个简单的流管道示例。该管道获取一个在买家和卖家之间模拟购买的交易集合，并计算生活在纽约的卖家的交易总价值。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
1. 一个简单的流管道</H4><PRE class="prettyprint perl" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">int</SPAN> totalSalesFromNY
    = txns.stream()
          .filter(t -&gt; t.getSeller().getAddr().getState().equals(<SPAN class=string style="COLOR: rgb(221,17,68)">"NY"</SPAN>))
          .mapToInt(t -&gt; t.getAmount())
          .sum();</PRE>
<DIV 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em"><SPAN>“</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>流利用了这种最强大的计算原理：组合。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>”</SPAN></P></DIV>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>filter()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>操作仅选择与来自纽约的卖家进行的交易。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>mapToInt()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>操作选择所关注交易的交易金额。最终的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sum()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>操作将对这些金额求和。</P>
<DIV 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'>
<H2 
style="FONT-SIZE: 18px; FONT-FAMILY: inherit; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0px 0.5em; LINE-HEIGHT: 1.6em; TEXT-INDENT: 1em; text-rendering: optimizeLegibility">学习更多知识。开发更多项目。联系更多同行。</H2>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em">全新的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><A 
style="TEXT-DECORATION: none; BORDER-BOTTOM: rgb(148,148,148) 1px dashed; FONT-WEIGHT: bold; COLOR: rgb(148,148,148); OUTLINE-WIDTH: 0px; FONT-STYLE: italic; OUTLINE-STYLE: none; OUTLINE-COLOR: invert; transition: 0.25s" 
href="https://www.ibm.com/developerworks/cn/premium/?lang=zh_CN&amp;ca=dwchina-_-j-java-streams-1-brian-goetz-_-article" 
rel=nofollow,noindex target=_blank>developerWorks Premium</A><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>订阅计划提供了强大的开发工具和资源，包括 500 篇通过 Safari 
Books Online 提供的顶级技术文章（包含作者的<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">Java 并发性实战</EM>）、最重要开发人员活动的大幅折扣、最新的 O'Reilly 
大会的视频录像，等等。立即注册。</P></DIV>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>这个例子非常容易理解，即使比较挑剔的人也会发现这个查询的命令版本（<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>for</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>循环）非常简单，而且需要更少的代码行即可表达。为了体现流方法的好处，示例问题没有必要变得过于复杂。流利用了这种最强大的计算原理：组合。通过使用简单的构建块（过滤、映射、排序、聚合）来组合复杂的操作，在问题变得比相同数据源上更加临时的计算更复杂时，流查询更可能保留写入和读取的简单性。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>作为来自清单 
1 中的相同领域的更复杂查询，考虑 “打印与年龄超过 65 岁的买家进行交易的卖家姓名，并按姓名排序。”以旧式的（命令）方式编写此查询可能会得到类似清单 2 
的结果。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
2. 对一个集合的临时查询</H4><PRE class="prettyprint xml" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'>Set<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;<SPAN class=title style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">Seller</SPAN>&gt;</SPAN> sellers = new HashSet<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;&gt;</SPAN>();
for (Txn t : txns) {
    if (t.getBuyer().getAge() &gt;= 65)
        sellers.add(t.getSeller());
}
List<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;<SPAN class=title style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">Seller</SPAN>&gt;</SPAN> sorted = new ArrayList<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;&gt;</SPAN>(sellers);
Collections.sort(sorted, new Comparator<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;<SPAN class=title style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">Seller</SPAN>&gt;</SPAN>() {
    public int compare(Seller a, Seller b) {
        return a.getName().compareTo(b.getName());
    }
});
for (Seller s : sorted)
    System.out.println(s.getName());</PRE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>尽管此查询比第一个查询稍微复杂一点，但很明显采用命令方法的结果代码的组织结构和可读性已开始下降。读者首先看到的不是计算的起点和终点；而是一个一次性中间结果的声明。要阅读此代码，您需要在头脑中缓存大量上下文，然后才能明白代码的实际用途。清单 
3 展示了可以如何使用 Streams 重写此查询。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
3. 使用 Streams 表达的清单 2 中的查询</H4><PRE class="prettyprint perl" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'>txns.stream()
    .filter(t -&gt; t.getBuyer().getAge() &gt;= <SPAN class=number style="COLOR: rgb(0,153,153)">65</SPAN>)
    .<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">map</SPAN>(Txn::getSeller)
    .distinct()
    .sorted(comparing(Seller::getName))
    .<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">map</SPAN>(Seller::getName)
    .forEach(System.out::println);</PRE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>清单 
3 中的代码更容易阅读，因为用户既没有被 “垃圾” 变量（比如<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sellers</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sorted</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）分心，也不需要在阅读代码的同时跟踪记录大量上下文；而且代码看起来几乎就像问题陈述一样。可读性更强的代码也更不容易出错，因为维护者更容易一眼就看出代码在做什么。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>Streams 
登录所采用的设计方法实现了实际的关注点分离。客户端负责指定计算的是 “什么”，而库负责控制 
“如何做”。这种分离倾向于与专家经验的分发平行进行；客户端编写者通常能够更好地了解问题领域，而库编写者通常拥有所执行的算法属性的更多专业技能。编写允许这种关注点分离的库的主要推动力是，能够像传递数据一样轻松地传递行为，从而使调用方可在 
API 中描述复杂计算的结构，然后离开，让库来选择执行战略。</P>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>流管道剖析</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>所有流计算都有一种共同的结构：它们具有一个<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">流来源</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>、0 或多个<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">中间操作</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，以及一个<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">终止操作</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。流的元素可以是对象引用 (<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream&lt;String&gt;</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>)，也可以是原始整数 (<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>)、长整型 (<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>LongStream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>) 或双精度 (<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>DoubleStream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>)。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>因为 
Java 程序使用的大部分数据都已存储在集合中，所以许多流计算使用集合作为它们的来源。JDK 中的<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Collection</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>实现都已增强，可充当高效的流来源。但是，还存在其他可能的流来源，比如数组、生成器函数或内置的工厂（比如数字范围），而且（如本系列中的第 
3 期 所示）可以编写自定义的流适配器，以便可以将任意数据源充当流来源。表 1 给出了 JDK 中的一些流生成方法。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>表 
1. JDK 中的流来源</H4>
<TABLE class="table table-bordered" 
style='BORDER-LEFT-WIDTH: 0px; MARGIN-BOTTOM: 1.5em; MAX-WIDTH: 100%; BORDER-TOP: rgb(221,221,221) 1px solid; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 603px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: separate; BORDER-BOTTOM: rgb(221,221,221) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 14px/1.3em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; BORDER-SPACING: 0px; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px' 
cellSpacing=0>
  <THEAD xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-left-radius: 4px" 
    width="35%" scope=col>方法</TH>
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-right-radius: 4px" 
    scope=col>描述</TH></TR></THEAD>
  
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Collection.stream()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">使用一个集合的元素创建一个流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.of(T...)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">使用传递给工厂方法的参数创建一个流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.of(T[])</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">使用一个数组的元素创建一个流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.empty()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个空流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.iterate(T 
      first, BinaryOperator&lt;T&gt; f)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个包含序列<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>first, 
      f(first), f(f(first)), ...</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>的无限流</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.iterate(T 
      first, Predicate&lt;T&gt; test, BinaryOperator&lt;T&gt; f)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">（仅限 
      Java 9）类似于<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.iterate(T 
      first, BinaryOperator&lt;T&gt; f)</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>，但流在测试预期返回<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>false</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>的第一个元素上终止。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.generate(Supplier&lt;T&gt; 
      f)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">使用一个生成器函数创建一个无限流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream.range(lower, 
      upper)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个由下限到上限（不含）之间的元素组成的<CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream.rangeClosed(lower, 
      upper)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个由下限到上限（含）之间的元素组成的<CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>BufferedReader.lines()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个有来自<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>BufferedReader</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>的行组成的流。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>BitSet.stream()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">创建一个由<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>BitSet</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>中的设置位的索引组成的<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE>。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-left-radius: 4px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream.chars()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-right-radius: 4px">创建一个与<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>String</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>中的字符对应的<SPAN 
      class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>。</TD></TR></TABLE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>中间操作负责将一个流转换为另一个流，中间操作包括<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>filter()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>（选择与条件匹配的元素）、<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>（根据函数来转换元素）、<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>distinct()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>（删除重复）、<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>limit()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>（在特定大小处截断流）和<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sorted()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。一些操作（比如<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>mapToInt()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）获取一种类型的流并返回一种不同类型的流；中的示例的开头处有一个<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Stream&lt;Transaction&gt;</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，它随后被转换为<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>IntStream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。表 2 给出了一些中间流操作。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>表 
2. 中间流操作</H4>
<TABLE class="table table-bordered" 
style='BORDER-LEFT-WIDTH: 0px; MARGIN-BOTTOM: 1.5em; MAX-WIDTH: 100%; BORDER-TOP: rgb(221,221,221) 1px solid; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 603px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: separate; BORDER-BOTTOM: rgb(221,221,221) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 14px/1.3em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; BORDER-SPACING: 0px; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px' 
cellSpacing=0>
  <THEAD xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-left-radius: 4px" 
    scope=col>操作</TH>
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-right-radius: 4px" 
    scope=col>内容</TH></TR></THEAD>
  
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>filter(Predicate&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">与预期匹配的流的元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map(Function&lt;T, 
      U&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">将提供的函数应用于流的元素的结果</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>flatMap(Function&lt;T, 
      Stream&lt;U&gt;&gt;</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">将提供的流处理函数应用于流元素后获得的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>distinct()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">已删除了重复的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sorted()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">按自然顺序排序的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>Sorted(Comparator&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">按提供的比较符排序的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>limit(long)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">截断至所提供长度的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>skip(long)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">丢弃了前 
      N 个元素的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>takeWhile(Predicate&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">（仅限 
      Java 9）在第一个提供的预期不是<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>true</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>的元素处阶段的流元素</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-left-radius: 4px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>dropWhile(Predicate&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-right-radius: 4px">（仅限 
      Java 9）丢弃了所提供的预期为<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>true</CODE><SPAN 
      class=Apple-converted-space>&nbsp;</SPAN>的初始元素分段的流元素</TD></TR></TABLE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>中间操作始终是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">惰性的</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>：调用中间操作只会设置流管道的下一个阶段，不会启动任何操作。重建操作可进一步划分为<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">无状态</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">有状态</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>操作。无状态操作（比如<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>filter()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）可独立处理每个元素，而有状态操作（比如<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sorted()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>distinct()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）可合并以前看到的影响其他元素处理的元素状态。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>数据集的处理在执行终止操作时开始，比如缩减（<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sum()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>max()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）、应用 (<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>forEach()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>) 或搜索 (<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>findFirst()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>) 
操作。终止操作会生成一个结果或副作用。执行终止操作时，会终止流管道，如果您想再次遍历同一个数据集，可以设置一个新的流管道。表 3 给出了一些终止流操作。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>表 
3. 终止流操作</H4>
<TABLE class="table table-bordered" 
style='BORDER-LEFT-WIDTH: 0px; MARGIN-BOTTOM: 1.5em; MAX-WIDTH: 100%; BORDER-TOP: rgb(221,221,221) 1px solid; BORDER-RIGHT: rgb(221,221,221) 1px solid; WIDTH: 603px; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: separate; BORDER-BOTTOM: rgb(221,221,221) 1px solid; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 14px/1.3em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; BORDER-SPACING: 0px; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px' 
cellSpacing=0>
  <THEAD xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-left-radius: 4px" 
    scope=col>操作</TH>
    <TH 
    style="VERTICAL-ALIGN: bottom; FONT-WEIGHT: bold; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.5em; PADDING-RIGHT: 8px; BORDER-TOP-WIDTH: 0px; border-top-right-radius: 4px" 
    scope=col>描述</TH></TR></THEAD>
  
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>forEach(Consumer&lt;T&gt; 
      action)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">将提供的操作应用于流的每个元素。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>toArray()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">使用流的元素创建一个数组。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>reduce(...)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">将流的元素聚合为一个汇总值。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>collect(...)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">将流的元素聚合到一个汇总结果容器中。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>min(Comparator&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">通过比较符返回流的最小元素。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>max(Comparator&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">通过比较符返回流的最大元素。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>count()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">返回流的大小。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>{any,all,none}Match(Predicate&lt;T&gt;)</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">返回流的任何/所有元素是否与提供的预期相匹配。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>findFirst()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px">返回流的第一个元素（如果有）。</TD></TR>
  <TR style="FONT-SIZE: 14px; LINE-HEIGHT: 1.3em">
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-left-radius: 4px"><CODE 
      style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>findAny()</CODE></TD>
    <TD     style="FONT-SIZE: 14px; BORDER-TOP: rgb(221,221,221) 1px solid; VERTICAL-ALIGN: top; PADDING-BOTTOM: 8px; TEXT-ALIGN: left; PADDING-TOP: 8px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 8px; border-bottom-right-radius: 4px">返回流的任何元素（如果有）。</TD></TR></TABLE>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>流与集合比较</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>尽管流在表面上可能类似于集合（您可以认为二者都包含数据），但事实上，它们完全不同。集合是一种数据结构；它的主要关注点是在内存中组织数据，而且集合会在一段时间内持久存在。集合通常可用作流管道的来源或目标，但流的关注点是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><STRONG 
style="FONT-WEIGHT: bold; TEXT-INDENT: 0px">计算</STRONG>，而不是数据。数据来自其他任何地方（集合、数组、生成器函数或 
I/O 通道），而且可通过一个计算步骤管道处理来生成结果或副作用，在此刻，流已经完成了。流没有为它们处理的元素提供存储空间，而且流的生命周期更像一个时间点 — 
调用终止操作。不同于集合，流也可以是无限的；相应地，一些操作（<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>limit()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>、<CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>findFirst()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>）是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">短路</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，而且可在无限流上运行有限的计算。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>集合和流在执行操作的方式上也不同。集合上的操作是急切和突变性的；在<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>List</CODE>上调用<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>remove()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>方法时，调用返回后，您知道列表状态会发生改变，以反映指定元素的删除。对于流，只有终止操作是急切的；其他操作都是惰性的。流操作表示其输入（也是流）上的功能转换，而不是数据集上的突变性操作（过滤一个流会生成一个新流，新流的元素是输入流的子集，但没有从来源删除任何元素）。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>将流管道表达为功能转换序列可以实现多种有用的执行战略，比如<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">惰性</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>、<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">短路</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<EM 
style="FONT-STYLE: italic">操作融合</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。短路使得管道能够成功终止，而不必检查所有数据；类似 “找到第一笔超过 
1000 美元的交易” 这样的查询不需要在找到匹配值后检查其他任何交易。操作融合表示，可在数据上的一轮中执行多个操作；在的示例中，3 
个操作组合成了数据上的一轮操作，而不是首先选择所有匹配的交易，然后选择所有对应的金额，最后对它们求和。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>类似和中的查询的命令版本通常依靠物化集合来获得中间计算的结果，比如过滤或映射的结果。这些结果不仅可能让代码变得杂乱，还可能让执行变得混乱。中间集合的物化仅作用于实现，而不作用于结果，而且它使用计算周期将中间结果组织为将会被丢弃的数据结构。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>相反，流管道将它们的操作融合到数据上尽可能少的轮次中，通常为单轮。（有状态中间操作，比如排序，可引入对多轮执行必不可少的障碍点。）流管道的每个阶段惰性地生成它的元素，仅在需要时计算元素，并直接将它们提供给下一阶段。您不需要使用集合来保存过滤或映射的中间结果，所以省去了填充（和垃圾收集）中间集合的工作。另外，遵循 
“深度优先” 而不是 “宽度优先” 的执行战略（跟踪一个数据元素在整个管道中的深度），会让被处理的操作在缓存中变得更 
“热”，所以您可以将更多时间用于计算，花更少时间来等待数据。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>除了将流用于计算之外，您可能还希望考虑通过 
API 
方法使用流来返回聚合结果，而在以前，您可能返回一个数组或集合。返回流的效率通常更高一些，因为您不需要将所有数据复制到一个新数组或集合中。返回流通常更加灵活；库选择返回的集合形式可能不是调用方所需要的，而且很容易将流转换为任何集合类型。（返回流不合适，而返回物化集合更合适的主要情形是，调用方需要查看某个时间点的状态的一致快照。）</P>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>并行性</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>将计算构建为功能转换的一个有益的结果是，您只需对代码进行极少的更改，即可轻松地在顺序和并行执行之间切换。流计算的顺序表达和相同计算的并行表达几乎相同。清单 
4 展示了如何并行地执行中的查询。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
4. 清单 1 的并行版本</H4><PRE class="prettyprint perl" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">int</SPAN> totalSalesFromNY
    = txns.parallelStream()
          .filter(t -&gt; t.getSeller().getAddr().getState().equals(<SPAN class=string style="COLOR: rgb(221,17,68)">"NY"</SPAN>))
          .mapToInt(t -&gt; t.getAmount())
          .sum();</PRE>
<DIV 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'>
<P 
style="FONT-SIZE: 16px; MARGIN: 0px 0px 0.75em; LINE-HEIGHT: 1.7em; TEXT-INDENT: 1em"><SPAN>“</SPAN><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>将流管道表达为一系列功能转换，有助于实施一些有用的执行战略，比如惰性、并行性、短路和操作融合。<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><SPAN>”</SPAN></P></DIV>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>第一行将会请求一个并行流而不是顺序流，这是与的唯一区别，因为 
Streams 
库有效地从执行计算的战略中分解出了计算的描述和结构。以前，并行执行要求完全重写代码，这样做不仅代价高昂，而且往往容易出错，因为得到的并行代码与顺序版本不太相似。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>所有流操作都可以顺序或并行执行，但请记住，并行性并不是高性能的原因。并行执行可能比顺序执行更快、一样快或更慢。最好首先从顺序流开始，在您知道您能够获得提速（并从中受益）时才应用并行性。本系列后面的一期文章会返回分析流管道的并行性能。</P>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>附加信息</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>尽管 
Streams 
库是为计算而精心设计的，但执行计算涉及到回调客户端所提供的拉姆达表达式，这些拉姆达表达式的用途具有一定的限制。违反这些限制可能导致流管道失败或计算出不正确的结果。此外，对于具有副作用的拉姆达表达式，这些副作用的时限（或存在）可能在某些情况下不合情理。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>大多数流操作都要求传递给它们的拉姆达表达是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">互不干扰</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>和<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">无状态</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>的。互不干扰意味着它们不会修改流来源；无状态意味着它们不会访问（读或写）任何可能在流操作寿命内改变的状态。对于缩减操作（例如计算<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>sum</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>、<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>min</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>或<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>max</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>等汇总数据），传递给这些操作的拉姆达表达式必须是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">结合性</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>的（或遵守类似的要求）。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>从某种程度讲，这些要求源于以下事实：如果管道并行执行，流库可能从多个线程访问数据源，或并发地调用这些拉姆达表达式。需要这些限制才能确保计算保持正确。（这些限制也可能得到更加简单、更容易理解的代码，无论是否采用并行性。）您可能倾向于让自己相信，您可以忽略这些限制，因为您认为特定的管道从不会并行运行，但最好控制住这一倾向，否则您会在代码中埋下定时炸弹。花点精力来表达您的流管道，使得无论采用何种执行战略，它们都是正确的。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>所有并发性风险的根源是<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">共享可变状态</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>。共享可变状态的一种可能来源是流来源。如果来源是像<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>ArrayList</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>这样的传统集合，Streams 
库会假设它在流操作过程中保持不变。（明显为了实现并发访问而设计的集合，比如<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>ConcurrentHashMap</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，不符合这一假设。）互不干扰要求不仅不包括在流操作期间被其他操作突变的来源，而且传递给流操作的拉姆达表达式本身也应避免突变来源。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>除了不修改流来源之外，传递给流操作的拉姆达表达式也应是无状态的。例如，清单 
5 中的代码（尝试消除任何与前面的元素重复的元素）就违背了这一规则。</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
5. 使用有状态拉姆达表达式的流管道（不要这么做！）</H4><PRE class="prettyprint xml" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'>HashSet<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;<SPAN class=title style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">Integer</SPAN>&gt;</SPAN> twiceSeen = new HashSet<SPAN class=tag style="FONT-WEIGHT: normal; COLOR: rgb(0,0,128)">&lt;&gt;</SPAN>();
int[] result
    = elements.stream()
              .filter(e -&gt; {
                  twiceSeen.add(e * 2);
                  return twiceSeen.contains(e);
              })
              .toArray();</PRE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>如果并行执行，此管道会生成错误的结果，原因有两个。首先，对<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>twiceSeen</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>集的访问是从多个线程进行的，没有进行任何协调，因此不是线程安全的。第二，因为数据被分区了，所以无法确保在处理给定元素时已经处理了该元素前面的所有元素。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>最好的情况是，如果传递给流操作的拉姆达表达式完全<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">没有副作用</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，也就是说，它们不会突变任何基于堆的状态或在执行过程中执行任何 
I/O。如果有副作用，它们应负责执行任何需要的协调，以确保这些副作用是线程安全的。</P>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>此外，无法保证所有副作用都将执行。例如，在清单 
6 中，该库被释放了，以完全避免执行传递给<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>的拉姆达表达式。因为来源具有已知大小，<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map()</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>操作被认为会保持该大小，而且映射不会影响计算的结果，所以库可以通过完全不执行映射来优化计算！（这种优化可以将计算从<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">O(n)</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>转换到<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><EM 
style="FONT-STYLE: italic">O(1)</EM><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>，还可以消除与调用映射函数相关的工作。）</P>
<H4 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>清单 
6. 具有可能不会被执行的副作用的流管道</H4><PRE class="prettyprint perl" style='WORD-WRAP: break-word; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; OVERFLOW-Y: auto; BORDER-BOTTOM: 1px solid; TEXT-TRANSFORM: none; WORD-BREAK: break-all; COLOR: rgb(51,51,51); PADDING-BOTTOM: 0.3em; PADDING-TOP: 0.3em; FONT: 12px/1.5em Monaco, Menlo, Consolas, "Courier New", monospace; PADDING-LEFT: 0.3em; MARGIN: 0px 0px 1.5em; BORDER-LEFT: 1px solid; WIDOWS: 1; DISPLAY: block; LETTER-SPACING: normal; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: rgb(246,246,246); TEXT-INDENT: 0px; border-radius: 4px; -webkit-text-stroke-width: 0px'><SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">int</SPAN> count = 
    anArrayList.stream()
               .<SPAN class=keyword style="FONT-WEIGHT: bold; COLOR: rgb(51,51,51)">map</SPAN>(e -&gt; { System.out.println(<SPAN class=string style="COLOR: rgb(221,17,68)">"Saw "</SPAN> + e); e })
               .count();</PRE>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'>您会注意到受这种优化影响的唯一情况（除了计算速度快得多）是，传递给<SPAN 
class=Apple-converted-space>&nbsp;</SPAN><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>map()</CODE>的拉姆达表达式具有副作用 
— 
在这种情况下，如果这些副作用没有发生，您可能感到非常奇怪。能够实现这些优化的假设前提是，流操作属于功能转换。在大多数时候，该库使我们的代码能够运行得更快，而且不需要我们投入精力。能够执行这样的优化的代价是，我们必须接受对我们传递给流操作的拉姆达表达式的操作的一些限制，以及我们对副作用的一定的依赖。（总之，这是一次很划算的交易。）</P>
<H2 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: bold 18px/1.6em "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.5em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; text-rendering: optimizeLegibility; -webkit-text-stroke-width: 0px'>第 
1 部分的小结</H2>
<P 
style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(51,51,51); FONT: 16px/27px "Helvetica Neue", Helvetica, Tahoma, Arial, STXihei, "Microsoft YaHei", 微软雅黑, sans-serif; MARGIN: 0px 0px 0.75em; WIDOWS: 1; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(254,254,254); TEXT-INDENT: 1em; -webkit-text-stroke-width: 0px'><CODE 
style='BORDER-TOP: medium none; FONT-FAMILY: Monaco, Menlo, Consolas, "Courier New", monospace; BORDER-RIGHT: medium none; WHITE-SPACE: normal; BORDER-BOTTOM: medium none; COLOR: rgb(51,51,51) !important; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: 4px; BORDER-LEFT: medium none; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(247,247,249); border-radius: 3px'>java.util.stream</CODE><SPAN 
class=Apple-converted-space>&nbsp;</SPAN>库提供了一种简单而又灵活的方法来表达各种数据源上可能并行的函数式查询，包括集合、数组、生成器函数、范围或自定义数据结构。一旦您开始使用这个库，就会被它深深吸引！下一期 
将介绍 Streams 库的一个最强大的特性：聚合。</P></body>
</html>
