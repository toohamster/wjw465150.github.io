<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>用 GlassFish v2 替换 Tomcat 5.x</TITLE><LINK 
href="favicon.ico" type=image/x-icon rel=icon><LINK href="favicon.ico" 
type=image/x-icon rel="shortcut icon"><LINK media=screen 
href="forum.css_1172652795" type=text/css rel=Stylesheet><LINK 
media=screen href="hse.css_1164769789" type=text/css 
rel=Stylesheet><LINK media=screen href="application.css_1195453884" 
type=text/css rel=Stylesheet><LINK media=screen 
href="highlight.css_1162654323" type=text/css rel=Stylesheet><LINK 
media=screen href="default.css_1158756033" type=text/css 
rel=Stylesheet><LINK media=screen 
href="alphacube.css_1158756033" type=text/css 
rel=Stylesheet>
s</HEAD>

<BODY scroll=yes>

<DIV id=wrapper>

<DIV id=post_list style="MARGIN-TOP: 10px">

<DIV style="MARGIN-TOP: 10px">

<TABLE class=forum-table cellSpacing=1 cellPadding=3 width="100%" border=0>

<TBODY>

<TR id=414595>

<TD class=row1 vAlign=top width="85%" height=28>

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>

<TBODY>

<TR>

<TD colSpan=2>

<DIV class=postbodydiv id=414595_body>

<TABLE width="100%">

<TBODY>

<TR>

<TD><!--StartFragment--><H1><FONT size=3>用 GlassFish v2 替换 Tomcat 5.x</FONT></H1>
<P><FONT face=Arial><STRONG>1. 背景</STRONG></FONT></P>
<P><FONT face=Arial>用了很多年的Tomcat, 无论开发环境还是生产环境, 应该说, 大家对它还是基本满意的.<BR>不过, 
也不是一点问题没有. 从开发人员的角度来说, Tomcat主要的缺点就是较弱的热部署<BR>(hot deploy)能力. 修改一个Java类, 保存后, 
Tomcat会重新加载这个类, 但不久就要重<BR>新启动Tomcat才能继续开发. 在企业关键应用的场景下, 若发生急迫的程序缺陷更正, 
让众多的用户<BR>停止手头的工作, 等待服务器重新启动, 显然十分不便.</FONT></P>
<P><FONT face=Arial>类似RubyOnRails的技术框架, 其方便之处就是脚本语言不要编译, 保存后直接可以使用. 
<BR>Java社区显然看到了这个问题, GlassFish v2 的热部署能力就是其主要的一个受大家欢迎的<BR>特性. 这也是我们要用 GlassFish 
v2 替换 Tomcat 5.x 的主要理由.</FONT></P>
<P><FONT face=Arial><STRONG>2. 使用环境</STRONG></FONT></P>
<P><FONT face=Arial>本文假设你使用下面所述的开发环境.<BR><FONT face=Arial>(1) JDK 1.5 或 1.6 
<BR>(2) Eclipse IDE for Java EE Developers (3.3.1.1 M20071023-1652)<BR>(3) 使用 
com.sysdeo.eclipse.tomcat_3.2.1 插件<BR></FONT></FONT></P>
<P><FONT face=Arial>如果你没有使用 Eclipse 3.3.1.1 Java EE 版本, 而是正在使用其他版本, 
也不影响本文所述的所有操作和效果, 只是不能借助Eclipse 启动和停止 GlassFish v2, 只能自己通过命令行进行操作.</FONT></P>
<P><FONT face=Arial>有关用 Eclipse 3.3.1.1 Java EE 版本操作 GlassFish v2 的详细说明, 
请参见</FONT><FONT face=Arial> <A 
href="https://glassfishplugins.dev.java.net/eclipse33/index.html">Eclipse 3.3 
and GlassFish Java EE 5 integration.</A></FONT></P>
<P><FONT face=Arial><STRONG>3. 下载并安装 GlassFish v2</STRONG></FONT></P>
<P><FONT face=Arial><FONT face=Arial>这方面的资料已经很容易从网上找到, 比较好的文章如下:<BR>(1) <A 
href="http://jeffreyhsu.javaeye.com/blog/86953">在Glassfish上部署web应用<BR></A>(2) <A 
href="http://tamino.javaeye.com/blog/140550">Glassfish初试</A> <BR>(3) <A 
href="http://www.javaeye.com/topic/135653">从tomcat到glashfish(glassfish的安装启动笔记)</A> 
</FONT></FONT></P>
<P><FONT face=Arial><STRONG>4. 创建 Tomcat 项目</STRONG></FONT></P>
<P><FONT face=Arial>相信你一定也知道如何创建 Tomcat 项目. 本文假设你创建的 Tomcat 项目:<BR>(1) 位于 
D:/Sample 目录.<BR>(2) Context name 为 Sample.</FONT></P>
<P><FONT face=Arial>其他采用默认设置. </FONT></P>
<P><FONT face=Arial><STRONG>5. 为测试 GlassFish v2 的热部署能力, 创建首页JSP和Servlet 
Java类.</STRONG></FONT></P>
<P><FONT face=Arial>第1步: 在根目录中创建 index.jsp 文件<BR>第2步: 在 WEB-INF\src 中, 创建一个简单的 
servlet 类 SampleServlet.java, <BR>第3步: 配置web.xml文件.</FONT></P>
<P><FONT face=Arial>完整的Sample项目, 请参见附件.</FONT></P>
<P><FONT face=Arial><STRONG>6. 什么是 GlassFish v2 的目录部署?</STRONG></FONT></P>
<P><FONT face=Arial>用Tomcat开发时, JSP/HTML/JS/CSS 等文件, 都是修改后保存, 刷新浏览器就可以使用.<BR>为了使 
GlassFish v2 达到同样的效果, 需要使用其目录部署(directory deployment)特性.</FONT></P>
<P><FONT face=Arial>这个特性不太容易找, 
因为使用象GlassFish这样的全功能应用服务器的开发人员,习惯了<BR>"编辑、编译、部署、运行"这样的步骤. 一开始, 我按照</FONT><FONT 
face=Arial> <A 
href="https://glassfishplugins.dev.java.net/eclipse33/index.html">Eclipse 3.3 
and GlassFish Java EE 5 integration.</A></FONT></P>
<P><FONT face=Arial><FONT face=Arial>一文的指引, 发现修改JSP文件后,仍然要经历上面的部署过程. 
虽然Eclipse会通过自动检测<BR>文件版本的变化, 触发Ant任务实现部署, 但仍然很浪费时间. 我们需要找到跳过"部署"的方法. 
<BR>在GlassFish官方论坛上发了几个帖子, 答复者的回帖没有起到什么作用, 
但通过搜索论坛基本<BR>知道这个问题已经得到了解决.</FONT></FONT> </P>
<P><FONT face=Arial>下面的文章引导我朝着正确的方向前进了一大步(非常感谢该文作者):<BR><A 
href="https://glassfishplugins.dev.java.net/eclipse33/index.html">GlassFish Auto 
Deployment and Hot Deployment</A></FONT></P>
<P><FONT face=Arial><FONT face=Arial>关于目录部署的详细说明,参见:<BR>Sun Java System 
Application Server Platform Edition 9.0 Application Deployment Guide <BR>Chapter 
1 中 <A 
href="https://glassfish.dev.java.net/javaee5/docs/ADG/beact.html">Deployment for 
Development</A> 一节</FONT></FONT> </P>
<P><FONT face=Arial><STRONG>7. GlassFish v2 的目录部署实战</STRONG></FONT></P>
<P><FONT face=Arial>第1步: 启动 GlassFish v2.</FONT></P>
<P><FONT face=Arial>第2步: 部署 Sample 项目到 GlassFish v2, DOS窗口下执行命令:<BR></FONT></P>
<P><FONT face=Arial></P>
<DIV class=dp-highlighter>
<OL class=dp-j><FONT size=+0>
<LI class=alt><SPAN><SPAN>GLASS_FISH_HOME/bin/asadmin deploydir D:/Sample 
</SPAN></SPAN></FONT></LI></OL></DIV></FONT><FONT face=Arial>其中 GLASS_FISH_HOME 
是 GlassFish 的安装目录, 命令执行完毕后,可以看到成功部署信息.</FONT>
<P></P>
<P><FONT face=Arial>第3步: 打开浏览器, 输入<A 
href="http://localhost:8080/Sample/index.jsp">http://localhost:8080/Sample/index.jsp</A>, 
看到页面内容.</FONT></P>
<P><FONT face=Arial>第4步: 打开浏览器, 输入 <A 
href="http://localhost:8080/Sample/servlet/Sample">http://localhost:8080/Sample/servlet/Sample</A>, 
看到页面内容.</FONT></P>
<P><FONT face=Arial><STRONG>8. 体验 GlassFish v2 的热部署特性</STRONG></FONT></P>
<P><FONT face=Arial>第1步: 修改 index.jsp 文件内容, 保存后, 刷新浏览器, 你就能马上看到新的内容.<BR>( <A 
href="http://localhost:8080/Sample/index.jsp">http://localhost:8080/Sample/index.jsp</A>)</FONT></P>
<P><FONT face=Arial>第2步: 修改 SampleServlet.java, 保存后, 等待片刻, Eclipse 已经自动编译这个类, 但 
GlassFish v2 控制台中没有任何提示, 刷新浏览器, 看不到新的内容.<BR>( <A 
href="http://localhost:8080/Sample/servlet/Sample">http://localhost:8080/Sample/servlet/Sample</A>)</FONT></P>
<P><FONT face=Arial>第3步: 现在, 在 Sample 项目根目录中创建文件名为".reload"的文件(内容为空). 
</FONT></P>
<P><FONT face=Arial>第4步: 观察GlassFish v2 控制台, 可以看到重新加载信息,刷新浏览器<BR><A 
href="http://localhost:8080/Sample/servlet/Sample">(http://localhost:8080/Sample/servlet/Sample</A>)<BR>看到了新的内容.</FONT></P>
<P><FONT face=Arial>第5步: 再次修改 SampleServlet.java 的内容, 保存后, 
遇到和第2步同样的问题.</FONT></P>
<P><FONT face=Arial>第6步: 再次打开 .reload 文件, 输入任意内容, 然后保存.</FONT></P>
<P><FONT face=Arial>第7步: 再次出现与第4步同样的效果.</FONT></P>
<P><FONT face=Arial>总结上述操作, GlassFish v2 对于非Java类的加载, 达到了和Tomcat同样的效果, 
但Java类的<BR>加载, 需要通过 .reload 文件的时间戳来控制. 这种做法对开发有好处, 在调试改错时, 可以修改<BR>多个 Java 类文件, 
然后让 GlassFish v2 一次加载全部修过的类.</FONT></P>
<P><FONT face=Arial><STRONG>9. 自动化 .reload 文件时间戳刷新</STRONG></FONT></P>
<P><FONT face=Arial>上一节中, 手工打开 .reload 文件, 通过修改其内容刷新其时间戳, 这种做法太麻烦.</FONT></P>
<P><FONT face=Arial>在 unix/linux 平台下, 通过命令 touch 刷新 .reload 文件的时间戳. 在 Window 平台, 
也有<BR>人实现了 touch. 我在 CodeProject 网站找到一个 touch.exe: </FONT><FONT face=Arial><A 
href="http://www.codeproject.com/tools/touch_win.asp">Touch for Windows - The 
Code Project - Free Tools</A>,</FONT><FONT face=Arial>很好用, 并且可以集成到 Eclipse 
的工具条按钮中来执行 touch 命令(</FONT><FONT face=Arial>touch.exe 已经包括在附件中)</FONT><FONT 
face=Arial>.</FONT></P>
<P><FONT face=Arial>第1步: 拷贝下载的 touch.exe 到 Sample 项目根目录.</FONT></P>
<P><FONT face=Arial>第2步: 在 Eclipse 下, 选择 Run &gt; External Tools &gt; Open 
External Tools Dialog.</FONT></P>
<P><FONT face=Arial>第3步: 选中左侧 Program 节点, 右击, 选择New菜单项.</FONT></P>
<P><FONT face=Arial>第4步: 在右侧出现的对话框中, 填入下面的内容<BR>Name: 
SampleTouch<BR>Main[页面]<BR>Localtion: 
${workspace_loc:/Sample/touch.exe}<BR>Working Directory: 
${workspace_loc:/Sample}<BR>Arguments: .reload<BR>Common[页面]<BR>Display in 
favorites menu: 选中External Tools<BR><BR>保存后, 
你可以在Eclipse的Run工具条按钮中看到新创建的项.</FONT></P>
<P><FONT face=Arial><STRONG>10. 结语</STRONG></FONT></P>
<P><FONT face=Arial>用 GlassFish v2 可以完全替换 Tomcat 5.x, 在开发中它保留了 Tomcat 
好的特性的<BR>同时,给我们带来了强壮的热部署功能, 显著地提高了开发效率. </FONT></P>
<P><FONT face=Arial>感谢GlassFish v2, 感谢为之付出心血的Java社区成员, 
是他们让我们感受到了技术<BR>进步的喜悦.<BR></FONT></P><!--EndFragment--></TD>
</TR>
</TBODY>
</TABLE>
</DIV>
</TD>
</TR>
</TBODY>
</TABLE>
</TD>
</TR>
</TBODY>
</TABLE>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>