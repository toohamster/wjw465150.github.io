<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>最佳PDF生成方案</TITLE><LINK 
href="favicon.ico" type=image/x-icon rel="shortcut icon"><LINK 
title=JavaEye论坛 href="Java" type=application/rss+xml 
rel=alternate><LINK media=screen 
href="forum.css_1257050886" type=text/css 
rel=stylesheet>
<LINK media=screen 
href="SyntaxHighlighter.css_1201588027" 
type=text/css rel=stylesheet>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>
</HEAD>

<BODY>

<DIV id=page>

<DIV class=clearfix id=content>

<DIV id=main>

<TABLE id=forum_main cellSpacing=1>

<TBODY id=posts>

<TR id=1231859>

<TD class=postcontent>

<DIV class="postbody clearfix"><!--StartFragment-->在Java世界，要想生成PDF，方案不少。最近一直在和这个东西打交道，所以简单做一个小结吧。 
<BR><BR>在此之前，先来勾画一下我心中比较理想的一个解决方案。在企业应用中，碰到的比较多的PDF的需求，可能是针对某个比较典型的具备文档特性的内容，导出成为PDF进行存档。由于我们现在往往使用一些开源框架，诸如ssh来构建我们的应用，所以我们相对熟悉的方案是针对具体的业务逻辑设计实体，使用开源框架来实现我们的业务逻辑。<STRONG>而PDF的导出，最好不要破坏现有的程序框架，甚至能复用我们业务逻辑层的代码。</STRONG>因为如果把PDF作为一种特殊的表现形式的话，实际上它有点类似模板。<STRONG><SPAN 
style="COLOR: red">最佳的情况，是我们能够通过编写某种模板，把PDF的大概样子确定下来，然后把数据和模板做一次整合，得到最后的结果</SPAN></STRONG> 
<BR><BR>带着这个目标，开始在网上搜索解决方案。也找到了一些方案，下面简单小结一下： <BR><BR><STRONG><SPAN 
style="COLOR: blue">Jasper Report</SPAN></STRONG> <BR><BR>看到的市面上采用的最多的方案，是Jasper 
Report。相关的文档也很多，不过很杂，需要完全掌握，我认为还是有些坡度和时间的。这个时间和坡度我认为主要来自于对iReport这个IDE的反复尝试，对里面的每个属性的摸索。 
<BR><BR>Jasper 
Report的设计思路，本身是不违反我上面所说的初衷的。因为我们的努力方向是先生成模板，然后得到数据，最后将两者整合得到结果。但是Jasper 
Report的问题在于，其生成模板的方式过于复杂，即使有IDE的帮助，我们还是需要对其中的众多规则有所了解才行，否则就会给调试带来极大的麻烦。 
<BR><BR>所以，我认为Jasper 
Report是一个半调子方案，这种强依赖于IDE进行可视化编辑的方式令我很不爽。同时，由此带来的诸多的限制，相信也让很多使用者颇为头疼。在经历了一番痛苦的挣扎后，决定放弃使用这种方案。 
<BR><BR><STRONG><SPAN style="COLOR: blue">iText</SPAN></STRONG> <BR><BR>其实Jasper 
Report是基于iText的。于是有的人会说，那么直接使用iText不是一种倒退么？的确，直接使用iText似乎就需要直接使用原生的API进行编程了。不过幸好iText其实提供了一些方便的API，通过使用这些API，我们可以直接将HTML代码转化成iText可识别的Document对象，从而导出PDF文档。 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/509417#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.io.FileOutputStream; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.io.FileReader; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.util.ArrayList; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.Document; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.Element; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.html.simpleparser.HTMLWorker; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.html.simpleparser.StyleSheet; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.pdf.PdfWriter; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;MainClass&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;main(String[]&nbsp;args)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;Exception&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;Document(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;StyleSheet&nbsp;st&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;StyleSheet(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;st.loadTagStyle(</SPAN><SPAN 
class=string>"body"</SPAN><SPAN>,&nbsp;</SPAN><SPAN 
class=string>"leading"</SPAN><SPAN>,&nbsp;</SPAN><SPAN 
class=string>"16,0"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;PdfWriter.getInstance(document,&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;FileOutputStream(</SPAN><SPAN 
class=string>"html2.pdf"</SPAN><SPAN>)); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;document.open(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&nbsp;p&nbsp;=&nbsp;HTMLWorker.parseToList(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;FileReader(</SPAN><SPAN 
class=string>"example.html"</SPAN><SPAN>),&nbsp;st); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>for</SPAN><SPAN>&nbsp;(</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>&nbsp;k&nbsp;=&nbsp;</SPAN><SPAN 
class=number>0</SPAN><SPAN>;&nbsp;k&nbsp;&lt;&nbsp;p.size();&nbsp;++k) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.add((Element)&nbsp;p.get(k)); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;document.close(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;

import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.html.simpleparser.HTMLWorker;
import com.lowagie.text.html.simpleparser.StyleSheet;
import com.lowagie.text.pdf.PdfWriter;

public class MainClass {
  public static void main(String[] args) throws Exception {
    Document document = new Document();
    StyleSheet st = new StyleSheet();
    st.loadTagStyle("body", "leading", "16,0");
    PdfWriter.getInstance(document, new FileOutputStream("html2.pdf"));
    document.open();
    ArrayList p = HTMLWorker.parseToList(new FileReader("example.html"), st);
    for (int k = 0; k &lt; p.size(); ++k)
      document.add((Element) p.get(k));
    document.close();
  }
}
</PRE><BR><BR>这是从网上找到的一个例子。从代码中，我们可以看到，iText本身提供了一个简单的HTML的解析器，它可以把HTML转化成我们需要的PDF的document。 
<BR><BR>有了这个东西，基本上我的目标就能达成一大半了。接下来我的任务就是根据实际情况去编写HTML代码，然后扔进这个方法，就OK了。而真正的HTML代码，我们则可以在这里使用真正的模板技术，Freemarker或者Velocity去生成我们所需要的内容。当然，这已经是我们熟门熟路的东西了。 
<BR><BR>正当我觉得这个方案基本能符合我的要求的时候，我也同样找到了它的很多弱项： <BR><BR><STRONG>1. 
无法识别很多HTML的tag和attribute(应该是iText的HTMLParser不够强大)</STRONG> <BR><STRONG>2. 
无法识别CSS</STRONG> 
<BR><BR>如果说第一点我还可以勉强接受的话，那么第二点我就完全不能接受了。无法识别简单的CSS，就意味着HTML失去了最基本的活力，也无法根据实际要求调整样式。 
<BR><BR>所以这种方案也必然无法成为我的方案。 <BR><BR><STRONG><SPAN style="COLOR: blue">flying 
sauser</SPAN></STRONG> <BR><BR>在这种情况下，我几乎已经燃起了自己编写一个支持CSS解析的HTML 
Parser的想法。幸好，在一个非常偶然的情况下，我在google中搜到了这样一个开源项目，它能够满足我的一切需求。这就是flying 
sauser，项目主页是：<A href="https://xhtmlrenderer.dev.java.net/" 
target=_blank>https://xhtmlrenderer.dev.java.net/</A> 
<BR><BR>项目的首页非常吸引人：<STRONG><SPAN style="COLOR: red">An XML/XHTML/CSS 2.1 
Renderer</SPAN></STRONG>。这不正是我要的东西么？ <BR><BR>仔细再看里面的文档： <BR><BR>
<DIV class=quote_title>引用</DIV>
<DIV class=quote_div>Flying Saucer is an XML/CSS renderer, which means it takes 
XML files as input, applies formatting and styling using CSS, and generates a 
rendered representation of that XML as output. The output may go to the screen 
(in a GUI), to an image, or to a PDF file. Because we believe most people will 
be interested in re-using their knowledge of web layout, our main target for 
content is XHTML 1.0 (strict), an XML document format that standardizes HTML. 
<BR></DIV><BR><BR>完美了。这东西能解析HTML和CSS，而且能输出成image，PDF等格式。哇！我们来看看sample代码(代码丑陋，不过已经能说明问题了)： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/509417#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=comment>/*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>*&nbsp;ITextRendererTest.java&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>*&nbsp;Copyright&nbsp;2009&nbsp;Shanghai&nbsp;TuDou.&nbsp;&nbsp; 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>*&nbsp;All&nbsp;rights&nbsp;reserved.&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>package</SPAN><SPAN>&nbsp;itext; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.io.File; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;java.io.FileOutputStream; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>import</SPAN><SPAN>&nbsp;java.io.OutputStream; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.xhtmlrenderer.pdf.ITextFontResolver; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;org.xhtmlrenderer.pdf.ITextRenderer; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>import</SPAN><SPAN>&nbsp;com.lowagie.text.pdf.BaseFont; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=comment>/**&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;TODO&nbsp;class&nbsp;description&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;* </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;@author&nbsp;pcwang </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;* </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;@version&nbsp;1.0,&nbsp;上午11:03:26&nbsp;&nbsp;create&nbsp;$Id$ 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;ITextRendererTest&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;main(String[]&nbsp;args)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;Exception&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;inputFile&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"conf/template/test.html"</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;url&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;File(inputFile).toURI().toURL().toString(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;outputFile&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"firstdoc.pdf"</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OutputStream&nbsp;os&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;FileOutputStream(outputFile); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ITextRenderer&nbsp;renderer&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ITextRenderer(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.setDocument(url); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;解决中文支持问题 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ITextFontResolver&nbsp;fontResolver&nbsp;=&nbsp;renderer.getFontResolver(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontResolver.addFont(</SPAN><SPAN 
class=string>"C:/Windows/Fonts/arialuni.ttf"</SPAN><SPAN>,&nbsp;BaseFont.IDENTITY_H,&nbsp;BaseFont.NOT_EMBEDDED); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;解决图片的相对路径问题 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.getSharedContext().setBaseURL(</SPAN><SPAN 
class=string>"file:/D:/Work/Demo2do/Yoda/branch/Yoda%20-%20All/conf/template/"</SPAN><SPAN>); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.layout(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.createPDF(os); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">/* 
* ITextRendererTest.java * 
* Copyright 2009 Shanghai TuDou.  
* All rights reserved. 
*/

package itext;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

import org.xhtmlrenderer.pdf.ITextFontResolver;
import org.xhtmlrenderer.pdf.ITextRenderer;

import com.lowagie.text.pdf.BaseFont;

/** 
 * TODO class description * 
 *
 * @author pcwang
 *
 * @version 1.0, 上午11:03:26  create $Id$
 */
public class ITextRendererTest {
	public static void main(String[] args) throws Exception {
		String inputFile = "conf/template/test.html";
        String url = new File(inputFile).toURI().toURL().toString();
        String outputFile = "firstdoc.pdf";
        OutputStream os = new FileOutputStream(outputFile);
        ITextRenderer renderer = new ITextRenderer();
        renderer.setDocument(url);

        // 解决中文支持问题
        ITextFontResolver fontResolver = renderer.getFontResolver();
        fontResolver.addFont("C:/Windows/Fonts/arialuni.ttf", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

        // 解决图片的相对路径问题
        renderer.getSharedContext().setBaseURL("file:/D:/Work/Demo2do/Yoda/branch/Yoda%20-%20All/conf/template/");
        
        renderer.layout();
        renderer.createPDF(os);
        
        os.close();
	}
}
</PRE><BR><BR>运行，成功！实在太简单了！API帮你完成了一切！ <BR><BR>有了这个东西，我们就可以将PDF的生成流程变成这样： 
<BR><BR><STRONG>1) 编写Freemarker或者Velocity模板，打造HTML，勾画PDF的样式(请任意使用CSS)</STRONG> 
<BR><BR><STRONG>2) 
在你的业务逻辑层引入Freemarker的引擎或者Velocity的引擎，并将业务逻辑层中可以获取的数据和模板，使用引擎生成最终的内容</STRONG> 
<BR><BR><STRONG>3) 将我上面的sample代码做简单封装后，调用，生成PDF</STRONG> 
<BR><BR>这样，我想作为一个web程序员来说，上面的3点，都不会成为你的绊脚石。你可以轻松驾驭PDF了。 <BR><BR>在Flying 
Saucer的官方文档中，有一些Q&amp;A，可以解决读者们大部分的问题。包括PDF的字体、PDF的格式、Image如何处理等等。大家可以尝试着去阅读。 
<BR><BR>还有一篇文章，好像是作者写的，非常不错：<A 
href="http://today.java.net/pub/a/today/2007/06/26/generating-pdfs-with-flying-saucer-and-itext.html" 
target=_blank>http://today.java.net/pub/a/today/2007/06/26/generating-pdfs-with-flying-saucer-and-itext.html</A> 
<!--EndFragment--></DIV>
</TD>
</TR>
</TBODY>
</TABLE>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>