<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Using SQL Calls</TITLE><!-- Run date = December 20, 2005 19:07:10 --><LINK 
title=Copyright href="cpyr.htm" type=text/html 
rel=copyright><LINK title="Oracle BLAFDoc" href="blafdoc.css" 
type=text/css rel=stylesheet><LINK title=Home href="products.htm" 
type=text/html rel=start><LINK title=Contents href="toc.htm" type=text/html 
rel=contents><LINK title=Glossary href="glossary.htm" type=text/html 
rel=glossary><LINK title=Index href="index.htm" type=text/html rel=index><LINK 
title=Previous href="qrybas003.htm" type=text/html rel=prev><LINK title=Next 
href="qrybas005.htm" type=text/html rel=next></HEAD>

<BODY><!--StartFragment--><DIV class=header><A id=top name=top></A>
<DIV class=zz-skip-header><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BEGIN">Skip Headers</A></DIV>
<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width="100%" 
summary="">
<TBODY>
<TR>
<TD vAlign=top align=left><B>Oracle TopLink Developer's Guide </B><BR><B>10<SPAN 
class=italic>g</SPAN> Release 3 (10.1.3) </B><BR>B13593-01 </TD>
<TD vAlign=bottom align=right>
<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width=225 
summary="">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/products.htm"><IMG 
alt="Go To Documentation Library" src="doclib.gif" 
border=0><BR><SPAN class=icon>Library</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/index.htm"><IMG alt="Go To Product List" 
src="doclib.gif" border=0><BR><SPAN 
class=icon>Product</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/toc.htm"><IMG alt="Go To Table Of Contents" 
src="toc.gif" border=0><BR><SPAN 
class=icon>Contents</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/index.htm"><IMG alt="Go To Index" 
src="index.gif" border=0><BR><SPAN 
class=icon>Index</SPAN></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<HR>

<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width=100 
summary="">
<TBODY>
<TR>
<TD align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas003.htm"><IMG alt=Previous 
src="leftnav.gif" border=0><BR><SPAN 
class=icon>Previous</SPAN></A> </TD>
<TD align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas005.htm"><IMG alt=Next 
src="rightnav.gif" border=0><BR><SPAN class=icon>Next</SPAN></A> 
</TD>
<TD>&nbsp;</TD></TR></TBODY></TABLE><A name=BEGIN></A></DIV><!-- class="header" -->
<DIV class=ind><!-- End Header --><A id=BCFCJCHF name=BCFCJCHF></A>
<DIV class=sect1><!-- infolevel="all" infotype="General" -->
<H1 class=sect1>Using SQL Calls </H1>
<P><A id=sthref5501 name=sthref5501></A><A id=sthref5502 name=sthref5502></A>The 
TopLink expression framework enables you to define complex queries at the object 
level. If your application requires a more complex query or one that accesses 
data or stored procedures directly, you can specify a custom SQL string in an 
SQL <CODE>Call</CODE> object and provide that <CODE>Call</CODE> object to any 
query. </P>
<P>You can also specify an SQL string directly on <CODE>DatabaseQuery</CODE>. 
For more information, see <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas002.htm#BCFHDHBG">"Specifying a Custom 
SQL String in a DatabaseQuery"</A>. </P>
<P>When using SQL calls, you can use a <CODE>ReturningPolicy</CODE> to control 
whether or not TopLink writes a parameter out or retrieves a value generated by 
the database. For more information, see <A 
href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/descfg026.htm#CHDHCCIG">"Configuring Returning Policy"</A> </P>
<P>This section describes the following: </P>
<UL>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFHDGIG">Using an SQLCall</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFIJIIH">Using a StoredProcedureCall</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFBBJBJ">Using a StoredFunctionCall</A> </P></LI></UL><A 
id=BCFHDGIG name=BCFHDGIG></A>
<DIV class=sect2><!-- infolevel="all" infotype="General" -->
<H2 class=sect2>Using an SQLCall </H2>
<P><A id=sthref5503 name=sthref5503></A><A id=sthref5504 name=sthref5504></A><A 
id=sthref5505 name=sthref5505></A>You can provide an <CODE>SQLCall</CODE> object 
to any query instead of an expression, but the SQL string contained in the 
<CODE>SQLCall</CODE> must return all data required to build an instance of the 
queried class. </P>
<P>The SQL string can be a complex SQL query, a stored procedure call, or a 
stored function call. You can specify input, output, and input/output 
parameters. </P>
<P>You can invoke an <CODE>SQLCall</CODE> through a session query method (as <A 
href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFGHIBE">Example 98-39</A> illustrates) or through a 
<CODE>DatabaseQuery</CODE>. </P>
<DIV class=example><A id=BCFGHIBE name=BCFGHIBE></A>
<P class=titleinexample>Example 98-39 Session Read Query With Custom SQL </P><PRE class=oac_no_warn xml:space="preserve">Employee employee = (Employee) session.executeSelectingCall(
&nbsp;&nbsp;&nbsp;&nbsp;new SQLCall("SELECT * FROM EMPLOYEE WHERE EMP_ID = 44")
);

</PRE></DIV><!-- class="example" -->
<DIV align=center>
<DIV class=inftblnotewarn><BR>
<TABLE class="NoteWarn oac_no_warn" dir=ltr 
title="This is a layout table to format a warning" cellSpacing=0 cellPadding=3 
rules=groups width="80%" summary="This is a layout table to format a warning" 
border=1 frame=hsides>
<TBODY>
<TR>
<TD align=left>
<P class=notep1>WARNING:</P>
<P class=warnsp>Allowing an unverified SQL string to be passed into methods 
makes your application vulnerable to SQL injection attacks. 
</P></TD></TR></TBODY></TABLE><BR></DIV><!-- class="inftblnotewarn" --></DIV>
<P>TopLink assumes that a token in the custom SQL string of an 
<CODE>SQLCall</CODE> is a parameter if it is prefixed with one or more number 
signs (<CODE>&nbsp;#</CODE>&nbsp;). You can bind values to these parameters using query 
API, as the following sections describe: </P>
<UL>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFFJBHE">Specifying a SQLCall Input Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFFBICF">Specifying a SQLCall Output Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFFIHID">Specifying a SQLCall Input / Output Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABIEAHF">Specifying a SQLCall Parameter Type</A> </P></LI></UL><A 
id=BCFFJBHE name=BCFFJBHE></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying a SQLCall Input Parameter </H3>
<P><A id=sthref5506 name=sthref5506></A><A id=sthref5507 name=sthref5507></A><A 
id=sthref5508 name=sthref5508></A>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABCDAEH">Example 98-40</A>, you 
specify <CODE>last_name</CODE> as an input parameter by prefixing its name with 
one number sign (#). <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFFADCD">Example 98-41</A> shows how to bind a 
value to this input parameter when you execute the query. </P>
<DIV class=example><A id=BABCDAEH name=BABCDAEH></A>
<P class=titleinexample>Example 98-40 Specifying an SQLCall with an Input 
Parameter Using the # Prefix</P><PRE class=oac_no_warn xml:space="preserve">SQLCall sqlCall = new SQLCall(
&nbsp;&nbsp;&nbsp;&nbsp;"INSERT INTO EMPLOYEE (L_NAME) VALUES (#last_name)"
);

</PRE></DIV><!-- class="example" -->
<DIV class=example><A id=BCFFADCD name=BCFFADCD></A>
<P class=titleinexample>Example 98-41 Executing an SQLCall with an Input 
Parameter</P><PRE class=oac_no_warn xml:space="preserve">UpdateObjectQuery query = new UpdateObjectQuery(myEmployee);
query.setCall(sqlCall);
query.addArgument("last_name");   <SPAN class=bold>// input</SPAN>
query.bindAllParameters();

Vector arguments = new Vector();
arguments.add("MacDonald");
session.executeQuery(query, arguments);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --><A id=BCFFBICF 
name=BCFFBICF></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying a SQLCall Output Parameter </H3>
<P><A id=sthref5509 name=sthref5509></A>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABDAHHA">Example 
98-42</A>, you specify <CODE>employee_id</CODE> as an output parameter by 
prefixing its name with three number signs (<CODE>###</CODE>). You specify the 
type of the output parameter with <CODE>SQLCall</CODE> method 
<CODE>setCustomSQLArgumentType</CODE> (see <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABIEAHF">"Specifying a 
SQLCall Parameter Type"</A>). You continue to specify <CODE>last_name</CODE> as 
an input parameter by prefixing its name with <CODE>#</CODE>. </P>
<DIV class=example><A id=BABDAHHA name=BABDAHHA></A>
<P class=titleinexample>Example 98-42 Specifying a SQLCall with an Output 
Parameter Using the ### Prefix</P><PRE class=oac_no_warn xml:space="preserve">SQLCall sqlCall = new SQLCall(
&nbsp;&nbsp;&nbsp;&nbsp;"INSERT INTO EMPLOYEE (L_NAME) VALUES (#L_NAME) RETURNING EMP_ID INTO ###employee_id"
);
sqlCall.setCustomSQLArgumentType("employee_id", Integer.class);

</PRE></DIV><!-- class="example" -->
<DIV class=example><A id=sthref5510 name=sthref5510></A>
<P class=titleinexample>Example 98-43 Executing a SQLCall with an Output 
Parameter</P><PRE class=oac_no_warn xml:space="preserve">UpdateObjectQuery query = new UpdateObjectQuery(myEmployee);
query.setCall(sqlCall);
query.addArgument("last_name");   <SPAN class=bold>// input</SPAN>
query.addArgument("employee_id"); <SPAN class=bold>// output</SPAN>
query.bindAllParameters();
 
Vector args = new Vector();
args.add("MacDonald");

DatabaseRecord record = (DatabaseRecord)((Vector)getSession().executeQuery(
&nbsp;&nbsp;&nbsp;&nbsp;query, args)).firstElement();
Integer employeeID = new Integer(((Number)record.get("employee_id")).intValue());

</PRE></DIV><!-- class="example" -->
<P>You can also obtain results for an output parameter declared to be of type 
<CODE>CURSOR</CODE> (see <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qryadv010.htm#CJGIGFGC">"Cursors and 
SQLCall"</A>). </P></DIV><!-- class="sect3" --><A id=BCFFIHID name=BCFFIHID></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying a SQLCall Input / Output Parameter </H3>
<P><A id=sthref5511 name=sthref5511></A>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABJBJCF">Example 
98-44</A>, you specify <CODE>in_out</CODE> as an input and output parameter by 
prefixing its name with four number signs (<CODE>####</CODE>). The type of the 
input value determines the type of the output value. In this example, a 
<CODE>String</CODE> ("MacDonald") is passed in and the output value (for 
<CODE>EMP_ID</CODE>) is returned as a <CODE>String</CODE>. </P>
<DIV class=example><A id=BABJBJCF name=BABJBJCF></A>
<P class=titleinexample>Example 98-44 Specifying an Input and Output Parameter 
Using the #### Prefix</P><PRE class=oac_no_warn xml:space="preserve">SQLCall sqlCall = new SQLCall(
&nbsp;&nbsp;&nbsp;&nbsp;"INSERT INTO EMPLOYEE (L_NAME) VALUES (####in_out) RETURNING EMP_ID INTO ####in_out"
);
</PRE></DIV><!-- class="example" -->
<DIV class=example><A id=sthref5512 name=sthref5512></A>
<P class=titleinexample>Example 98-45 Executing a SQLCall with an Input and 
Output Parameter</P><PRE class=oac_no_warn xml:space="preserve">UpdateObjectQuery query = new UpdateObjectQuery(myEmployee);
query.setCall(sqlCall);
query.addArgument("in_out");   <SPAN class=bold>// input and outpu</SPAN>
query.bindAllParameters();
 
Vector args = new Vector();
args.add("MacDonald");
 
DatabaseRecord record = (DatabaseRecord)((Vector)getSession().executeQuery(
&nbsp;&nbsp;&nbsp;&nbsp;query, args)).firstElement();
Integer employeeID = new Integer(record.get("in_out")); <SPAN class=bold>// out value has same type as input</SPAN>

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --><A id=BABIEAHF 
name=BABIEAHF></A>
<DIV class=sect3>
<H3 class=sect3>Specifying a SQLCall Parameter Type </H3>
<P><A id=sthref5513 name=sthref5513></A><A id=sthref5514 name=sthref5514></A>If 
you map a parameter or identify it in a <CODE>ReturningPolicy</CODE> (see <A 
href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/descfg026.htm#CHDHCCIG">"Configuring Returning Policy"</A>), you do not 
need to explicitly specify the parameter's type. </P>
<P>Otherwise, you must explicitly specify the parameter's type using 
<CODE>SQLCall</CODE> method <CODE>setCustomSQLArgumentType</CODE>. </P>
<P>If TopLink cannot determine the type of the parameter, it throws a 
<CODE>ValidationException</CODE>. </P>
<P>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABDHDDB">Example 98-46</A>, output parameter 
<CODE>EMP_ID</CODE> is mapped or identified in a <CODE>ReturningPolicy</CODE> 
but output parameter <CODE>AGE</CODE> is not: you must specify its type 
(<CODE>Integer</CODE>) explicitly. </P>
<DIV class=example><A id=BABDHDDB name=BABDHDDB></A>
<P class=titleinexample>Example 98-46 Specifying Parameter Types in a 
SQLCall</P><PRE class=oac_no_warn xml:space="preserve">SQLCall sqlCall = new SQLCall(
&nbsp;&nbsp;&nbsp;&nbsp;"INSERT INTO EMPLOYEE (L_NAME) VALUES (#L_NAME) RETURNING EMP_ID, AGE INTO ###EMP_ID, ###AGE"
);
sqlCall.setCustomSQLArgumentType("AGE", Integer.class);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --></DIV><!-- class="sect2" --><A 
id=BCFIJIIH name=BCFIJIIH></A>
<DIV class=sect2><!-- infolevel="all" infotype="General" -->
<H2 class=sect2>Using a StoredProcedureCall </H2>
<P><A id=sthref5515 name=sthref5515></A><A id=sthref5516 name=sthref5516></A><A 
id=sthref5517 name=sthref5517></A>You can provide a 
<CODE>StoredProcedureCall</CODE> object to any query instead of an expression or 
a SQL string, but the procedure must return all data required to build an 
instance of the class you query. </P>
<DIV class=example><A id=sthref5518 name=sthref5518></A>
<P class=titleinexample>Example 98-47 A Read-All Query with a Stored Procedure 
</P><PRE class=oac_no_warn xml:space="preserve">ReadAllQuery readAllQuery = new ReadAllQuery();
call = new StoredProcedureCall();
call.setProcedureName("Read_All_Employees");
readAllQuery.setCall(call);
Vector employees = (Vector) session.executeQuery(readAllQuery);

</PRE></DIV><!-- class="example" -->
<P>Using a <CODE>StoredProcedureCall</CODE>, you can access the following: </P>
<UL>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFIBEBD">Specifying an Input Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFEFAHC">Specifying an Output Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFEBFCJ">Specifying an Input / Output Parameter</A> </P>
<LI type=disc>
<P><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFFCGJE">Using an Output Parameter Event</A> </P></LI></UL>
<DIV align=center>
<DIV class=inftblnote><BR>
<TABLE class="Note oac_no_warn" dir=ltr 
title="This is a layout table to format a note" cellSpacing=0 cellPadding=3 
rules=groups width="80%" summary="This is a layout table to format a note" 
border=1 frame=hsides>
<TBODY>
<TR>
<TD align=left>
<P class=notep1>Note:</P>You no longer need to use <CODE>DatabaseQuery</CODE> 
method <CODE>bindAllParameters</CODE> when using a 
<CODE>StoredProcedureCall</CODE> with <CODE>OUT</CODE> or <CODE>INOUT</CODE> 
parameters. However, you should always specify the Java type for all 
<CODE>OUT</CODE> and <CODE>INOUT</CODE> parameters. If you do not, be aware of 
the fact that they default to type <CODE>String</CODE>. 
</TD></TR></TBODY></TABLE><BR></DIV><!-- class="inftblnote" --></DIV><A 
id=BCFIBEBD name=BCFIBEBD></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying an Input Parameter </H3>
<P>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFGHFID">Example 98-48</A>, you specify the parameter 
<CODE>POSTAL_CODE</CODE> as an input parameter using the 
<CODE>StoredProcedureCall</CODE> method <CODE>addNamedArgument</CODE>, and you 
can specify the value of the argument using method 
<CODE>addNamedArgumentValue</CODE>. </P>
<DIV class=example><A id=BCFGHFID name=BCFGHFID></A>
<P class=titleinexample>Example 98-48 <A id=sthref5519 
name=sthref5519></A>Stored Procedure Call with an Input Parameter </P><PRE class=oac_no_warn xml:space="preserve">StoredProcedureCall call = new StoredProcedureCall();
call.setProcedureName("CHECK_VALID_POSTAL_CODE");
call.addNamedArgument("POSTAL_CODE");
call.addNamedArgumentValue("L5J1H5");
call.addNamedOutputArgument(
&nbsp;&nbsp;&nbsp;&nbsp;"IS_VALID",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// procedure parameter name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;"IS_VALID",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// out argument field name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class&nbsp;&nbsp;<SPAN class=bold>// Java type corresponding to type returned by procedure</SPAN>
);
ValueReadQuery query = new ValueReadQuery();
query.setCall(call);
Number isValid = (Number) session.executeQuery(query);

</PRE></DIV><!-- class="example" -->
<P>The order in which you add arguments must correspond to the order in which 
you add argument values. In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFDEACI">Example 98-49</A>, the argument 
<CODE>NAME</CODE> is bound to the value <CODE>Juliet</CODE> and the argument 
<CODE>SALARY</CODE> is bound to the value <CODE>80000</CODE>. </P>
<DIV class=example><A id=BCFDEACI name=BCFDEACI></A>
<P class=titleinexample>Example 98-49 Matching Arguments and Values in a Stored 
Procedure Call</P><PRE class=oac_no_warn xml:space="preserve">StoredProcedureCall call = new StoredProcedureCall();
call.setProcedureName("CHECK_VALID_POSTAL_CODE");
call.addNamedArgument("NAME");
call.addNamedArgument("SALARY");
call.addNamedArgumentValue("Juliet");
call.addNamedArgumentValue(80000);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --><A id=BCFEFAHC 
name=BCFEFAHC></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying an Output Parameter </H3>
<P>Output parameters enable the stored procedure to return additional 
information. You can use output parameters to define a 
<CODE>readObjectQuery</CODE> if they return all the fields required to build the 
object. </P>
<P>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFBGDDH">Example 98-50</A>, you specify the parameter IS_VALID 
as an output parameter using the <CODE>StoredProcedureCall</CODE> method 
<CODE>addNamedOutputArgument</CODE>. </P>
<DIV class=example><A id=BCFBGDDH name=BCFBGDDH></A>
<P class=titleinexample>Example 98-50 <A id=sthref5520 
name=sthref5520></A>Stored Procedure Call with an Output Parameter </P><PRE class=oac_no_warn xml:space="preserve">StoredProcedureCall call = new StoredProcedureCall();
call.setProcedureName("CHECK_VALID_POSTAL_CODE");
call.addNamedArgument("POSTAL_CODE");
call.addNamedOutputArgument(
&nbsp;&nbsp;&nbsp;&nbsp;"IS_VALID",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// procedure parameter name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;"IS_VALID",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// out argument field name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class&nbsp;&nbsp;<SPAN class=bold>// Java type corresponding to type returned by procedure</SPAN>
);
ValueReadQuery query = new ValueReadQuery();
query.setCall(call);
query.addArgument("POSTAL_CODE");
Vector parameters = new Vector();
parameters.addElement("L5J1H5");
Number isValid = (Number) session.executeQuery(query,parameters);

</PRE></DIV><!-- class="example" -->
<DIV align=center>
<DIV class=inftblnote><BR>
<TABLE class="Note oac_no_warn" dir=ltr 
title="This is a layout table to format a note" cellSpacing=0 cellPadding=3 
rules=groups width="80%" summary="This is a layout table to format a note" 
border=1 frame=hsides>
<TBODY>
<TR>
<TD align=left>
<P class=notep1><SPAN class=bold>Note</SPAN>:</P>Not all databases support the 
use of output parameters to return data. However, because these databases 
generally support returning result sets from stored procedures, they do not 
require output parameters. </TD></TR></TBODY></TABLE><BR></DIV><!-- class="inftblnote" --></DIV>
<P>If you are using an Oracle database, you can make use of TopLink cursor and 
stream query results. For more information, see <A 
href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qryadv008.htm#CJGGCIJA">"Stored Procedure Cursor Output Parameters"</A>. 
</P></DIV><!-- class="sect3" --><A id=BCFEBFCJ name=BCFEBFCJ></A>
<DIV class=sect3><!-- infolevel="all" infotype="General" -->
<H3 class=sect3>Specifying an Input / Output Parameter </H3>
<P>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFEBGIB">Example 98-51</A>, you specify the parameter 
<CODE>LENGTH</CODE> as an input/output parameter and specify the value of the 
argument when it is passed to the stored procedure using the 
<CODE>StoredProcedureCall</CODE> method 
<CODE>addNamedInOutputArgumentValue</CODE>. If you do not want to specify a 
value for the argument, use method <CODE>addNamedInOutputArgument</CODE>. </P>
<DIV class=example><A id=BCFEBGIB name=BCFEBGIB></A>
<P class=titleinexample>Example 98-51 <A id=sthref5521 
name=sthref5521></A>Stored Procedure Call with an Input/Output Parameter </P><PRE class=oac_no_warn xml:space="preserve">StoredProcedureCall call = new StoredProcedureCall();
call.setProcedureName("CONVERT_FEET_TO_METERs");
call.addNamedInOutputArgumentValue(
&nbsp;&nbsp;&nbsp;&nbsp;"LENGTH",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// procedure parameter name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;new Integer(100),&nbsp;&nbsp;<SPAN class=bold>// in argument value</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;"LENGTH",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// out argument field name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// Java type corresponding to type returned by procedure</SPAN>
)
ValueReadQuery query = new ValueReadQuery();
query.setCall(call);
Integer metricLength = (Integer) session.executeQuery(query);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --><A id=BCFFCGJE 
name=BCFFCGJE></A>
<DIV class=sect3>
<H3 class=sect3>Using an Output Parameter Event<A id=sthref5522 
name=sthref5522></A><A id=sthref5523 name=sthref5523></A> </H3>
<P>TopLink manages output parameter events for databases that support them. For 
example, if a stored procedure returns an error code that indicates that the 
application wants to check for an error condition, TopLink raises the session 
event <CODE>OutputParametersDetected</CODE> to allow the application to process 
the output parameters. </P>
<DIV class=example><A id=sthref5524 name=sthref5524></A>
<P class=titleinexample>Example 98-52 Stored Procedure with Reset Set and Output 
Parameter Error Code </P><PRE class=oac_no_warn xml:space="preserve">StoredProcedureCall call = new StoredProcedureCall();
call.setProcedureName("READ_EMPLOYEE");
call.addNamedArgument("EMP_ID");
call.addNamedOutputArgument(
&nbsp;&nbsp;&nbsp;&nbsp;"ERROR_CODE",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// procedure parameter name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;"ERROR_CODE",&nbsp;&nbsp;&nbsp;&nbsp;<SPAN class=bold>// out argument field name</SPAN>
&nbsp;&nbsp;&nbsp;&nbsp;Integer.class&nbsp;&nbsp;<SPAN class=bold>// Java type corresponding to type returned by procedure</SPAN>
);
ReadObjectQuery query = new ReadObjectQuery();
query.setCall(call);
query.addArgument("EMP_ID");
ErrorCodeListener listener = new ErrorCodeListener();
session.getEventManager().addListener(listener);
Vector args = new Vector();
args.addElement(new Integer(44));
Employee employee = (Employee) session.executeQuery(query, args);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect3" --></DIV><!-- class="sect2" --><A 
id=BCFBBJBJ name=BCFBBJBJ></A>
<DIV class=sect2><!-- infolevel="all" infotype="General" -->
<H2 class=sect2>Using a StoredFunctionCall </H2>
<P><A id=sthref5525 name=sthref5525></A><A id=sthref5526 name=sthref5526></A><A 
id=sthref5527 name=sthref5527></A>You use a <CODE>StoredProcedureCall</CODE> to 
invoke stored procedures defined on databases that support them. You can also 
use a <CODE>StoredFunctionCall</CODE> to invoke stored functions defined on 
databases that support them, that is, on databases for which the 
<CODE>DatabasePlatform</CODE> method <CODE>supportsStoredFunctions</CODE> 
returns <CODE>true</CODE>. </P>
<P>In general, both stored procedures and stored functions let you specify input 
parameters, output parameters, and input and output parameters. For more 
information, see <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BCFIJIIH">"Using a StoredProcedureCall"</A>. However, 
stored procedures need not return values, while stored functions always return a 
single value. </P>
<P>The <CODE>StoredFunctionCall</CODE> class extends 
<CODE>StoredProcedureCall</CODE> to add one new method: <CODE>setResult</CODE>. 
Use this method to specify the name (and alternatively both the name and type) 
under which TopLink stores the return value of the stored function. </P>
<P>When TopLink prepares a <CODE>StoredFunctionCall</CODE>, it validates its SQL 
and throws a <CODE>ValidationException</CODE> under the following circumstances: 
</P>
<UL>
<LI type=disc>
<P>If your current platform does not support stored functions. Stored functions 
are supported only for Oracle. </P>
<LI type=disc>
<P>If you fail to specify the return type </P></LI></UL>
<P>In <A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas004.htm#BABCACEC">Example 98-53</A>, note that the name of the stored 
function is set using <CODE>StoredFunctionCall</CODE> method 
<CODE>setProcedureName</CODE>. </P>
<DIV class=example><A id=BABCACEC name=BABCACEC></A>
<P class=titleinexample>Example 98-53 Creating a StoredFunctionCall</P><PRE class=oac_no_warn xml:space="preserve">StoredFunctionCall functionCall = new StoredFunctionCall();
functionCall.setProcedureName("CHECK_VALID_EMPLOYEE");
functionCall.addNamedArgument("EMP_ID");
functionCall.setResult("FUNCTION_RESULT", String);
ValueReadQuery query = new ValueReadQuery();
query.setCall(functionCall);
query.addArgument("EMP_ID");
Vector args = new Vector();
args.addElement(new Integer(44));
String valid = (String) session.executeQuery(query, args);

</PRE></DIV><!-- class="example" --></DIV><!-- class="sect2" --></DIV><!-- class="sect1" --></DIV><!-- Start Footer -->
<DIV class=footer>
<HR>

<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width="100%" 
summary="">
<TBODY>
<TR>
<TD vAlign=bottom width="33%">
<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width=100 
summary="">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas003.htm"><IMG alt=Previous 
src="leftnav.gif" border=0><BR><SPAN 
class=icon>Previous</SPAN></A> </TD>
<TD align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/qrybas005.htm"><IMG alt=Next 
src="rightnav.gif" border=0><BR><SPAN class=icon>Next</SPAN></A> 
</TD></TR></TBODY></TABLE></TD>
<TD class=copyrightlogo><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/support/html/cpyr.htm"><IMG 
class=copyrightlogo alt="Oracle Logo" src="oracle.gif"><BR><SPAN 
class=copyrightlogo>Copyright&nbsp;?&nbsp;1997, 2006,&nbsp;Oracle.&nbsp;All&nbsp;rights&nbsp;reserved. 
</SPAN></A></TD>
<TD vAlign=bottom align=right width="33%">
<TABLE class="simple oac_no_warn" cellSpacing=0 cellPadding=0 width=225 
summary="">
<TBODY>
<TR>
<TD>&nbsp;</TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/products.htm"><IMG 
alt="Go To Documentation Library" src="doclib.gif" 
border=0><BR><SPAN class=icon>Library</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/index.htm"><IMG alt="Go To Product List" 
src="doclib.gif" border=0><BR><SPAN 
class=icon>Product</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/toc.htm"><IMG alt="Go To Table Of Contents" 
src="toc.gif" border=0><BR><SPAN 
class=icon>Contents</SPAN></A></TD>
<TD vAlign=top align=middle><A href="http://www.oracle.com/technology/products/ias/toplink/doc/1013/main/_html/index.htm"><IMG alt="Go To Index" 
src="index.gif" border=0><BR><SPAN 
class=icon>Index</SPAN></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></DIV><!-- class="footer" --><!--EndFragment--></BODY>
</HTML>