<!-- saved from url=http://www.w3china.org/blog/more.asp?name=hongrui&id=30394 -->
<script>
window.onerror = new Function("return(false);")
</script><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>邢红瑞的blog--Java 语言的 XPath API(转自IBM)</TITLE><LINK title=RSS 
href="rss2.asp_name=hongrui" type=application/rss+xml rel=alternate>
<SCRIPT language=javascript>
	function CheckForm()
	{
		if(document.UserLogin.UserName.value=="")
		{
			alert("请输入用户名！");
			document.UserLogin.UserName.focus();
			return false;
		}
		if(document.UserLogin.Password.value == "")
		{
			alert("请输入密码！");
			document.UserLogin.Password.focus();
			return false;
		}
	}
	
</SCRIPT>

<SCRIPT language=javascript>quote='';</SCRIPT>
</HEAD>

<BODY scroll=yes>

<TABLE cellSpacing=1 cellPadding=4 width="100%" bgColor=#cccccc border=0>

<TBODY>

<TR bgColor=#ffffff>

<TD vAlign=top align=middle>

<TABLE style="TABLE-LAYOUT: fixed; WORD-BREAK: break-all" cellSpacing=1 
cellPadding=3 width="98%" bgColor=#cccccc border=0>

<TBODY>

<TR bgColor=#ffffff>

<TD height=0>

<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>

<TBODY>

<TR>

<TD><!--StartFragment--><A name=listing6><B>清单 6. 绑定一个名称空间和默认名称空间的简单上下文</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>import java.util.Iterator;
import javax.xml.*;
import javax.xml.namespace.NamespaceContext;

public class PersonalNamespaceContext implements NamespaceContext {

    public String getNamespaceURI(String prefix) {
        if (prefix == null) throw new NullPointerException("Null prefix");
        else if ("pre".equals(prefix)) return "http://www.example.org/books";
        else if ("xml".equals(prefix)) return XMLConstants.XML_NS_URI;
        return XMLConstants.NULL_NS_URI;
    }

    // This method isn't necessary for XPath processing.
    public String getPrefix(String uri) {
        throw new UnsupportedOperationException();
    }

    // This method isn't necessary for XPath processing either.
    public Iterator getPrefixes(String uri) {
        throw new UnsupportedOperationException();
    }

}</PRE></TD></TR></TBODY></TABLE><BR>
<P>使用映射存储绑定和增加 setter 方法实现名称空间上下文的重用也不难。 </P>
<P>创建 <CODE>NamespaceContext</CODE> 对象后，在编译表达式之前将其安装到 <CODE>XPath</CODE> 
对象上。以后就可以像以前一样是用这些前缀查询了。比如： </P><BR><A name=listing7><B>清单 7. 使用名称空间的 XPath 
查询</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>  XPathFactory factory = XPathFactory.newInstance();
  XPath xpath = factory.newXPath();
  xpath.setNamespaceContext(new PersonalNamespaceContext());
  XPathExpression expr 
    = xpath.compile("//pre:book[pre:author='Neal Stephenson']/pre:title/text()");

  Object result = expr.evaluate(doc, XPathConstants.NODESET);
  NodeList nodes = (NodeList) result;
  for (int i = 0; i &lt; nodes.getLength(); i++) {
      System.out.println(nodes.item(i).getNodeValue()); 
  }</PRE></TD></TR></TBODY></TABLE><BR><!--EndFragment--></TD>
</TR>
</TBODY>
</TABLE>
</TD>
</TR>
</TBODY>
</TABLE>
</TD>
</TR>
</TBODY>
</TABLE>
</BODY>
</HTML>