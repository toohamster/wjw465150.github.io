<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>用 Java 2 标准版本 (J2SE) 1.4 进行 Internet 安全编程</TITLE><LINK 
href="tip.css" type=text/css rel=stylesheet></HEAD>

<BODY><!--StartFragment--><CENTER style="BACKGROUND-COLOR: #eeeeff">
<H2>用 Java 2 标准版本 (J2SE) 1.4 进行 Internet 安全编程</H2>
<H5>第 I 部分：服务器端</H5>
<P><U>Qusay H. Mahmoud</U> 著 (2002 年 11 月)<BR><U>边城狂人</U> 译 (2002 年 11 
月)</P></CENTER>
<P><BR>　　任何在计算机网络或者 Internet 
中传输的消息都可能被拦截，其中不乏一些比较敏感的内容，如信用卡号或者其它一些私人数据。为了更好的在企业环境和电子商务中使用 
Internet，应用软件必须使用加密、验证和安全的通信协议来保护用户的数据安全。安全超文本传输协议 (secure Hypertext Transfer 
Protocol, HTTPS) 是建立于安全套接层 (Secure Sockets Layer, SSL) 上的 
HTTP，它已经成功的应用于电子商务。</P>
<P>　　Java 安全套接扩展 (Java Secure Socket Extension, JSSE) 使 Internet 安全通信成为现实。它是 
100% 纯 Java 实现的 SSL 框架。这个包让 Java 开发人员能够开发安全的网络应用；为基于 TCP/IP 的何应用协议，如 
HTTP、FTP、Telnet、或者 NTTP，在客户端和服务器端之间建立安全的数据通道。</P>
<P>　　JSSE 已经整合在 Java 2 SDK 标准版本 1.4 (J2SE 1.4) 中了，这真是一个好消息。这意味着只要你安装了 J2SE 
1.4，不需要再下载其它的包，就可以创建基于 SSL 的 Internet 应用程序了。这个系列的文章共有 2 篇，它是一本关于为今后的市场开发安全 
Interent 应用的手册。这篇文章主要是讲的服务器端，而下一篇是讲客户端的。这篇文章从概览 SSL 开始，然后告诉你如何进行下列内容：</P>
<UL>
<LI>使用 JSSE 的 API 
<LI>在你的 C/S 应用程序中结合 JSSE 
<LI>开发一个简单的 HTTP 服务器 
<LI>让 HTTP 服务器能够处理 HTTPS 请求 
<LI>使用包含在 J2SE 中的 keytool 产生自己的证书 
<LI>开发、配置和运行一个安全的 HTTP 服务器 </LI></UL>
<P>&nbsp;</P>
<H3>概览 SSL</H3>
<P>　　SSL 协议是 Netscape 在 1994 年开发出来的，以允许服务端 (典型的如浏览器) 和 HTTP 
服务器之间能通过安全的连接来通信。它加密、来源验证、数据完整性等支持，以保护在不安全的公众网络上交换的数据。SSL 有这样一些版本：SSL 2.0 
有安全隐患，现在已经几本上不用了；SSL 3.0 应用则比较广泛；最后，由 SSL 3.0 改进而来的传输层加密 (Transport Layer 
Security, TLS) 已经成为 Internet 标准并应用于几乎所有新近的软件中。</P>
<P>　　在数据传播之前，加密技术通过将数据转变成看起来毫无意义的内容来保护数据不被非法使用。其过程是：数据在一端 (客户端或者服务器端) 
被加密，传输，再在另一端解密。</P>
<P>　　来源认证是验证数据发送者身份的一种办法。浏览器或者其它客户端第一次尝试与网页服务器进行安全连接之上的通信时，服务器会将一套信任信息以<STRONG>证书</STRONG>的形式呈现出来。</P>
<P>　　<STRONG>证书由权威认证机构 
(CA)</STRONG>――值得信赖的授权者发行和验证。一个证书描述一个人的公钥。一个签名的文档会作出如下保证：我证明文档中的这个公钥属于在该文档中命名的实体。签名(权威认证机构)。目前知名的权威认证机构有 
<A href="http://www.verisign.com/">Verisign</A>，<A 
href="http://www.entrust.ca/">Entrust</A> 和 <A 
href="http://www.thawte.com/">Thawte</A> 等。注意现在使用的 SSL/TLS 证书是 X.509 证书。</P>
<P>　　数据完整性就是要确保数据在传输过程中没有被改变。</P>
<H4><BR>SSL 和 TCP/IP 协议的层次</H4>
<P>　　SSL 是名符其实的安全套接层。它的连接动作和 TCP 的连接类似，因此，你可以想象 SSL 连接就是安全的 TCP 连接，因为在协议层次图中 SSL 
的位置正好在 TCP 之上而在应用层之下，如图 1 所示。注意到这点很重要。但是，SSL 不支持某些 TCP 的特性，比如频带外数据。</P>
<P align=center><IMG height=196 src="fig1.gif" 
width=267><BR><EM>图 1： SSL 和 TCP/IP 协议的的层次</EM></P>
<H4><BR>可交流的加密技术</H4>
<P>　　SSL 的特性之一是为电子商务的事务提供可交流的加密技术和验证算法提供标准的方法。SSL 
的开发者认识到不是所有人都会使用同一个客户端软件，从而不是所有客户端都会包括任何详细的加密算法。对于服务器也是同样。位于连接两端的的客户端和服务器在初始化“握手”的时候需要交流加密和解密算法(密码组)。如果它们没有足够的公用算法，连接尝试将会失败。</P>
<P>　　注意当 SSL 允许客户端和服务器端相互验证的时候，典型的作法是只有服务器端在 SSL 层上进行验证。客户端通常在应用层，通过 SSL 
保护通道传送的密码来进行验证。这个模式常用于银行、股份交易和其它的安全网络应用中。</P>
<P>　　SSL 完全“握手”协议如图 2 所示。它展示了在 SSL “握手”过程中的信息交换顺序。</P>
<P align=center><IMG height=419 src="fig2.gif" 
width=359><BR><EM>图 2：SSL “握手”协议</EM></P>
<P>这些消息的意思如下：</P>
<OL>
<LI><EM>ClientHello</EM>：发送信息到服务器的客户端，这些信息如 SSL 协议版本、会话 ID 
和密码组信息，如加密算法和能支持的密匙的大小。 
<LI><EM>ServerHello</EM>：选择最好密码组的服务器并发送这个消息给客户端。密码组包括客户端和服务器支持。 
<LI><EM>Certificate</EM>：服务器将包含其公钥的证书发送给客户端。这个消息是可选的，在服务器请求验证的时候会需要它。换句话说，证书用于向客户端确认服务器的身分。 

<LI><EM>Certificate Request</EM>: 这个消息仅在服务器请求客户端验证它自身的时候发送。多数电子商务应用不需要客户端对自身进行。 
<LI><EM>Server Key Exchange</EM>：如果证书包含了服务器的公钥不足以进行密匙交换，则发送该消息。 
<LI><EM>ServerHelloDone</EM>：这个消息通知客户端，服务器已经完成了交流过程的初始化。 
<LI><EM>Certificate</EM>：仅当服务器请求客户端对自己进行验证的时候发送。 
<LI><EM>Client Key Exchage</EM>：客户端产生一个密匙与服务器共享。如果使用 Rivest-Shamir-Adelman (RSA) 
加密算法，客户端将使用服务器的公钥将密匙加密之后再发送给服务器。服务器使用自己的私钥或者密钥对消息进行解密以得到共享的密匙。现在，客户端和服务器共享着一个已经安全分发的密匙。 

<LI><EM>Certificate Verify</EM>：如果服务器请求验证客户端，这个消息允许服务器完成验证过程。 
<LI><EM>Change Cipher Spec</EM>：客户端要求服务器使用加密模式。 
<LI><EM>Finished</EM>：客户端告诉服务器它已经准备好安全通信了。 
<LI><EM>Change Cipher Spec</EM>：服务器要求客户端使用加密模式。 
<LI><EM>Finished</EM>：服务器告诉客户端它已经准备好安全通信了。这是 SSL “握手”结果的标志。 
<LI><EM>Encrypted Data</EM>：客户端和服务器现在可以开发在安全通信通道上进行加密信息的交流了。 </LI></OL>
<P></P>
<H3>JSSE</H3>
<P>　　Java 安全套接扩展 (JSSE) 提供一个框架及一个 100% 纯 Java 实现的 SSL 和 TLS 
协议。它提供了数据加密、服务器验证、消息完成性和可选的客户端验证等机制。JSSE 
的引人之外就是将复杂的、根本的加密算法抽象化了，这样就降低了受到敏感或者危险的安全性攻击的风险。另外，由于它能将 SSL 
无缝地结合在应用当然，使安全应用的开发变得非常简单。JSSE 框架可以支撑许多不同的安全通信协议，如 SSL 2.0 和 3.0 以及 TLS 1.0，但是 
J2SE v1.4.1 只实现了 SSL 3.0 和 TLS 1.0。</P>
<H4><BR>JSSE 编程</H4>
<P>　　JSSE API 提供了扩充的网络套接字类、信用和密匙管理，以及为简化套接字创建而设计的套接字工厂框架，以此扩充 java.security 和 
java.net 两个包。这些类都包含在 javax.net 和 javax.net.ssl 包中。</P>
<H4><BR>SSLSocket 和 SSLServerSocket </H4>
<P>　　javax.net.ssl.SSLSocket 是 java.net.Socket 的子类，因此他支持所有标准 Socket 
的方法，和一些为安全套接字新增加的方法。javax.net.ssl.SSLServerSocket 类与 SSLSocket 
类相似，只是它用于创建服务器套接子，而 SSLSocket 不是。</P>
<P>　　创建一个 SSLSocket 实例有如何两种方法：</P>
<OL>
<OL>
<LI>用 SSLSocketFactory 实例执行 createSocket 方法来创建。 
<LI>通过 SSLServerSocket 的 accept 方法获得。 </LI></OL></OL>
<H4><BR>SSLSocketFactory 和 SSLServerSocketFactory </H4>
<P>　　javax.net.ssl.SSLSocketFactory 
类是用于创建安全套接字的对象工厂。javax.net.ssl.SSLServerSocketFactory 
也是这样的工厂，但它用于创建安全的服务器套接字。</P>
<P>　　可以通过如下方法获得 SSLSocketFactory 实例：</P>
<OL>
<OL>
<LI>执行 SSLSocketFactory.getDefault 方法获得一个默认的工厂。 
<LI>通过特定的配置行为构造一个新的工厂。 </LI></OL></OL>
<P>　　注意默认的工厂的配置只允许服务器验证。</P>
<P>&nbsp;</P>
<H3>使现有的 Client/Server 应用变得安全</H3>
<P>　　在现有的 C/S 应用中整合 SSL 以使其变得安全比较简单，使用几行 JSSE 
代码就可以做到。为了使服务器变得安全，下面的例子中<STRONG>加黑</STRONG>显示的内容是必须的：</P>
<BLOCKQUOTE><PRE><TT><FONT color=#0033aa>import</FONT> java.io.*;
<FONT color=#0033aa><STRONG>import</STRONG></FONT><STRONG> javax.net.ssl.*;</STRONG>

<FONT color=#0033ff>public</FONT> <FONT color=#0033ff>class</FONT> Server {
    <FONT color=#0033ff>int</FONT> port = portNumber;
    <STRONG>SSLServerSocket server;</STRONG>
    <FONT color=#0033ff>try</FONT> {
<STRONG>        SSLServerSocketFactory factory = 
            (SSLServerSocketFactory) SSLServerSocketFactory.<FONT color=#0033aa>getDefault</FONT>();
        server = (SSLServerSocket) 
            factory.<FONT color=#0033aa>createServerSocket</FONT>(portNumber);
        SSLSocket client = (SSLSocket) 
            server.<FONT color=#0033aa>accept</FONT>();</STRONG>
      
        <FONT color=#008000>// Create input and output streams as usual</FONT>
        <FONT color=#008000>// send secure messages to client through the </FONT>
        <FONT color=#008000>// output stream</FONT>
        <FONT color=#008000>// receive secure messages from client through </FONT>
        <FONT color=#008000>// the input stream</FONT>
    } <FONT color=#0033ff>catch</FONT>(Exception e) {
    }
}</TT></PRE></BLOCKQUOTE>
<P>为了使客户端变得安全，下面的例子中<STRONG>加黑</STRONG>显示的内容是必须的：</P>
<BLOCKQUOTE><PRE><TT><FONT color=#0033aa>import</FONT> java.io.*;
<FONT color=#0033aa><STRONG>import</STRONG></FONT><STRONG> javax.net.ssl.*;</STRONG>

<FONT color=#0033ff>public</FONT> <FONT color=#0033ff>class</FONT> Client {
    ...
    <FONT color=#0033ff>try</FONT> {
<STRONG>        SSLSocketFactory factory = (SSLSocketFactory)
            SSLSocketFactory.<FONT color=#0033aa>getDefault</FONT>();
        server = (SSLServerSocket) 
            factory.<FONT color=#0033aa>createServerSocket</FONT>(portNumber);
        SSLSocket client = (SSLSOcket) 
            factory.<FONT color=#0033aa>createSocket</FONT>(serverHost, port);</STRONG>
      
        <FONT color=#008000>// Create input and output streams as usual</FONT>
        <FONT color=#008000>// send secure messages to server through the </FONT>
        <FONT color=#008000>// output stream receive secure</FONT>
        <FONT color=#008000>// messages from server through the input stream</FONT>
    } <FONT color=#0033ff>catch</FONT>(Exception e) {
    }
}</TT></PRE></BLOCKQUOTE>
<H4><BR>SunJSSE 提供者</H4>
<P>　　J2SE v1.4.1 和一个 JSSE 提供者，SunJSSE 一起发布。SunJSSE 安装并预登记了 Java 的加密体系。请把 SunJSSE 
作为一个实现的名字来考虑，它提供了 SSL v3.0 和 TLS v1.0 的实现，也提供了普通的 SSL 和 TLS 密码组。如果你想找到你的实现 (这里是 
SunJSSE) 所支持的密码组列表，可以调用 SSLSocket 的 getSupportedCipherSuites 
方法。然而，不是所有这些密码组都是可用的。为了找出那些是可用的，调用 getEnabledCipherSuites 方法。这个列表可以用 
setEnabledCipherSuites 方法来更改。</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<H3>一个完整的例子</H3>
<P>　　我发现使用 JSSE 开发最复杂的事情关系到系统设置以及管理证书和密匙。在这个例子中，我演示了如何开发、配置和运行一个完整的支持 GET 请求方法的 
HTTP 服务器应用。</P>
<H4><BR>HTTP 概览</H4>
<P>　　超文本传输协议 (Hypertext Transfer Protocol, HTTP) 是一个“请求-回应”的应用协议。这个协议支持一套固定的方法如 
GET、POST、PUT、DELETE 等。一般用 GET 方法向服务器请求资源。这里有两个 GET 请求的例子：</P>
<P>GET / HTTP/1.0 &lt;empty-line&gt;<BR>GET /names.html HTTP/1.0 
&lt;empty-line&gt;</P>
<H4>不安全的 HTTP 服务器</H4>
<P>　　为了开发一个 HTTP 服务器，你得先搞明白 HTTP 协议是如何工作的。这个服务器是一个只支持 GET 请求方法的简单服务器。代码示例 1 
是这个例子的实现。这是一个多线程的 HTTP 服务器，ProcessConnection 
类用于执行不同线程中新的请求。当服务器收到一个来自浏览器的请求时，它解析这个请求并找出需要的文档。如果被请求的文档在服务器上可用，那么被请求的文档会由 
shipDocument 方法送到服务器。如果被请求的文档没有打开，那么送到服务器的就是出错消息。</P>
<P><STRONG>代码示例 1</STRONG>：HttpServer.java </P>
<BLOCKQUOTE><PRE><TT><FONT color=#0033aa>import</FONT> java.io.*;
<FONT color=#0033aa>import</FONT> java.net.*;
<FONT color=#0033aa>import</FONT> java.util.StringTokenizer;

<FONT color=#008000>/** </FONT>
<FONT color=#008000> * This class implements a multithreaded simple HTTP </FONT>
<FONT color=#008000> * server that supports the GET request method.</FONT>
<FONT color=#008000> * It listens on port 44, waits client requests, and </FONT>
<FONT color=#008000> * serves documents.</FONT>
<FONT color=#008000> */</FONT>

<FONT color=#0033ff>public</FONT> <FONT color=#0033ff>class</FONT> HttpServer {
    <FONT color=#008000>// The port number which the server </FONT>
    <FONT color=#008000>// will be listening on</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>static</FONT> <FONT color=#0033ff>final</FONT> <FONT color=#0033ff>int</FONT> HTTP_PORT = <FONT color=#333333>8080</FONT>;

    <FONT color=#0033ff>public</FONT> ServerSocket <FONT color=#0033aa>getServer</FONT>() <FONT color=#0033ff>throws</FONT> Exception {
        <FONT color=#0033ff>return</FONT> <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>ServerSocket</FONT>(HTTP_PORT);
    }

    <FONT color=#008000>// multi-threading -- create a new connection </FONT>
    <FONT color=#008000>// for each request</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>run</FONT>() {
        ServerSocket listen;
        <FONT color=#0033ff>try</FONT> {
            listen = <FONT color=#0033aa>getServer</FONT>();
            <FONT color=#0033ff>while</FONT>(true) {
                Socket client = listen.<FONT color=#0033aa>accept</FONT>();
                ProcessConnection cc = <FONT color=#0033ff>new</FONT> 
                    <FONT color=#0033aa>ProcessConnection</FONT>(client);
            }
        } <FONT color=#0033ff>catch</FONT>(Exception e) {
            System.out.<FONT color=#0033aa>println</FONT>(<FONT color=#990000>"Exception: </FONT>
<FONT color=#990000>           "</FONT>+e.<FONT color=#0033aa>getMessage</FONT>());
        }
    }

    <FONT color=#008000>// main program</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>static</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>main</FONT>(String argv[]) <FONT color=#0033ff>throws</FONT> 
        Exception {
        HttpServer httpserver = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>HttpServer</FONT>();
        httpserver.<FONT color=#0033aa>run</FONT>();
    }
}


<FONT color=#0033ff>class</FONT> ProcessConnection <FONT color=#0033ff>extends</FONT> Thread {
    Socket client;
    BufferedReader is;

    DataOutputStream os;
   
    <FONT color=#0033ff>public</FONT> <FONT color=#0033aa>ProcessConnection</FONT>(Socket s) { <FONT color=#008000>// constructor</FONT>
        client = s;
        <FONT color=#0033ff>try</FONT> {
            is = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>BufferedReader</FONT>(<FONT color=#0033ff>new</FONT> <FONT color=#0033aa>InputStreamReader</FONT>
                                    (client.<FONT color=#0033aa>getInputStream</FONT>()));
            os = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>DataOutputStream</FONT>(client.<FONT color=#0033aa>getOutputStream</FONT>());
        } <FONT color=#0033ff>catch</FONT> (IOException e) {
            System.out.<FONT color=#0033aa>println</FONT>(<FONT color=#990000>"Exception: "</FONT>+e.<FONT color=#0033aa>getMessage</FONT>());
        }
        <FONT color=#0033ff>this</FONT>.<FONT color=#0033aa>start</FONT>(); <FONT color=#008000>// Thread starts here...this start() </FONT>
        will call <FONT color=#0033aa>run</FONT>()
            }
 
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>run</FONT>() {
        <FONT color=#0033ff>try</FONT> {
            <FONT color=#008000>// get a request and parse it.</FONT>
            String request = is.<FONT color=#0033aa>readLine</FONT>();
            System.out.<FONT color=#0033aa>println</FONT>( <FONT color=#990000>"Request: "</FONT>+request );
            StringTokenizer st = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>StringTokenizer</FONT>( request );
            <FONT color=#0033ff>if</FONT> ( (st.<FONT color=#0033aa>countTokens</FONT>() &gt;= <FONT color=#333333>2</FONT>) &amp;&amp; 
                 st.<FONT color=#0033aa>nextToken</FONT>().<FONT color=#0033aa>equals</FONT>(<FONT color=#990000>"GET"</FONT>) ) {
                <FONT color=#0033ff>if</FONT> ( (request = 
                      st.<FONT color=#0033aa>nextToken</FONT>()).<FONT color=#0033aa>startsWith</FONT>(<FONT color=#990000>"/"</FONT>) )
                    request = request.<FONT color=#0033aa>substring</FONT>( <FONT color=#333333>1</FONT> );
                <FONT color=#0033ff>if</FONT> ( request.<FONT color=#0033aa>equals</FONT>(<FONT color=#990000>""</FONT>) )
                    request = request + <FONT color=#990000>"index.html"</FONT>;
                File f = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>File</FONT>(request);
                <FONT color=#0033aa>shipDocument</FONT>(os, f);
            } <FONT color=#0033ff>else</FONT> {
                os.<FONT color=#0033aa>writeBytes</FONT>( <FONT color=#990000>"400 Bad Request"</FONT> );
            } 
            client.<FONT color=#0033aa>close</FONT>();
        } <FONT color=#0033ff>catch</FONT> (Exception e) {
            System.out.<FONT color=#0033aa>println</FONT>(<FONT color=#990000>"Exception: "</FONT> + 
                               e.<FONT color=#0033aa>getMessage</FONT>());
        } 
    }

    <FONT color=#008000>/**</FONT>
<FONT color=#008000>     * Read the requested file and ships it </FONT>
<FONT color=#008000>     * to the browser if found.</FONT>
<FONT color=#008000>     */</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>static</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>shipDocument</FONT>(DataOutputStream out, 
                                    File f) <FONT color=#0033ff>throws</FONT> Exception {
        <FONT color=#0033ff>try</FONT> {
            DataInputStream in = <FONT color=#0033ff>new</FONT> 
                <FONT color=#0033aa>DataInputStream</FONT>(<FONT color=#0033ff>new</FONT> <FONT color=#0033aa>FileInputStream</FONT>(f));
            <FONT color=#0033ff>int</FONT> len = (<FONT color=#0033ff>int</FONT>) f.<FONT color=#0033aa>length</FONT>();
            <FONT color=#0033ff>byte</FONT>[] buf = <FONT color=#0033ff>new</FONT> <FONT color=#0033ff>byte</FONT>[len];
            in.<FONT color=#0033aa>readFully</FONT>(buf);
            in.<FONT color=#0033aa>close</FONT>();
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"HTTP/1.0 200 OK\r\n"</FONT>);
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"Content-Length: "</FONT> + 
                           f.<FONT color=#0033aa>length</FONT>() +<FONT color=#990000>"\r\n"</FONT>);
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"Content-Type: </FONT>
<FONT color=#990000>            text/html\r\n\r\n"</FONT>);
            out.<FONT color=#0033aa>write</FONT>(buf);
            out.<FONT color=#0033aa>flush</FONT>();
        } <FONT color=#0033ff>catch</FONT> (Exception e) {
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"&lt;html&gt;&lt;head&gt;&lt;title&gt;error&lt;/title&gt;</FONT>
<FONT color=#990000>            &lt;/head&gt;&lt;body&gt;\r\n\r\n"</FONT>);
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"HTTP/1.0 400 "</FONT> + e.<FONT color=#0033aa>getMessage</FONT>() + <FONT color=#990000>"\r\n"</FONT>);
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"Content-Type: text/html\r\n\r\n"</FONT>);
            out.<FONT color=#0033aa>writeBytes</FONT>(<FONT color=#990000>"&lt;/body&gt;&lt;/html&gt;"</FONT>);
            out.<FONT color=#0033aa>flush</FONT>();
        } <FONT color=#0033ff>finally</FONT> {
            out.<FONT color=#0033aa>close</FONT>();
        }
    }
}</TT></PRE></BLOCKQUOTE>
<P>　　实验一下 HttpServer 类：</P>
<OL>
<OL>
<LI>将 HttpServer 的代码保存在文件 HttpServer.java 中，并选择一个目录把它存放在那里。 
<LI>使用 javac 编译 HttpServer.java 
<LI>建立一些 HTML 文件作为例子，要有一个“index.html”，因为它是这个例子中默认的 HTML 文档。 
<LI>运行 HttpServer。服务器运行时使用 8080 端口。 
<LI>打开网页浏览器，并发出请求：http://localhost:8080 或者 http://127.0.0.1:8080/index.html。 
</LI></OL></OL>
<P>
<HR>
<STRONG>注意</STRONG>：你能想到 HttpServer 可能接收到一些恶意的 URL 吗？比如像 
http://serverDomainName:8080/../../etc/passwd 或者 
http://serverDomainName:8080//somefile.txt 等。作为一个练习，修改 HttpServer 以使其不允许这些 URL 
的访问。<STRONG>提示</STRONG>：写你自己的 SecurityManager 或者使用 
java.lang.SecurityManager。你可以在 main 方法的第一行添加语句 System.setSecurityManager(new 
Java.lang.SecurityManager) 来安装这个安全的管理器。试试吧！<BR>
<HR>

<P>&nbsp;</P>
<H3>扩展 HttpServer 使其能够处理 https://URL </H3>
<P>　　现在，我要们修改 HttpServer 类，使它变得安全。我希望 HTTP 服务器能处理 https://URL 请求。我在前面就提到过，JSSE 
让你可以很容易的把 SSL 整合到应用中去。</P>
<H4><BR>创建一个服务器证书</H4>
<P>　　就像我前面提到的那样，SSL 使用证书来进行验证。对于需要使用 SSL 来保证通信安全的客户端和服务器，都必须创建证书。JSSE 使用的证书要用与 
J2SE 一起发布的 Java keytool 来创建。用下列命令来为 HTTP 服务器创建一个 RSA 证书。</P>
<P>　　prompt&gt; keytool -genkey -keystore serverkeys -keyalg rsa -alias qusay 
</P>
<P>　　这个命令会产生一个由别名 qusay 引用的证书，并将其保存在一个名为 serverkeys 
的文件中。产生证书的时候，这个工具会提示我们一些信息，如下面的信息，其中<STRONG>加黑</STRONG>的内容是我写的。</P>
<BLOCKQUOTE><PRE><TT>Enter keystore password:  <STRONG>hellothere</STRONG>
What is your first and last name?
  [Unknown]:  <STRONG>ultra.domain.com</STRONG>
What is the name of your organizational unit?
  [Unknown]:  <STRONG>Training and Consulting</STRONG>
What is the name of your organization?
  [Unknown]:  <STRONG>javacourses.com</STRONG>
What is the name of your City or Locality?
  [Unknown]:  <STRONG>Toronto</STRONG>
What is the name of your State or Province?
  [Unknown]:  <STRONG>Ontario</STRONG>
What is the two-letter country code for this unit?
  [Unknown]:  <STRONG>CA</STRONG>
Is CN=ultra, OU=Training and Consulting, 
O=javacourses.com, L=Toronto, ST=Ontario, C=CA correct?
  [no]:  <STRONG>yes</STRONG>

Enter key password for <QUSAY>
        (RETURN if same as keystore password):  <STRONG>hiagain</STRONG></TT></PRE></BLOCKQUOTE>
<P>　　正如你所看到的，keytool 提示为 keystore 输入密码，那是因为让服务器能访问 keystore 
就必须让它知道密码。那工具也要求为别名输入一个密码。如果你愿意，这些密码信息能由 keytool 从命令行指定，使用参数 -storepass 和 
-keypass 就行了。注意我使用了“ultra.domain.com”作为姓名，这个名字是为我的机器假想的一个名字。你应该输入服务器的主机名或者 IP 
地址。</P>
<P>　　在你运行 keytool 命令的时候，它可能会花几秒钟的时间来产生你的密码，具体速度得看你机器的速度了。</P>
<P>　　既然我为服务器创建了证书，现在可以修改 HttpServer 使其变得安全了。如果你检查 HttpServer 类，你会注意到 getServer 
方法用来返回一个服务器套接子。也就是说，只需要修改 getServer 方法让它返回一个安全的服务器套接字就可以了。在代码示例 2 
中<STRONG>加黑</STRONG>的部分就是所做的改变。请注意我将端口号改成了 443，这是 https 默认的端口号。还有一点非常值得注意：0 到 
1023 之间的端口号都是保留的。如果你在不同的端口运行 HttpsServer，那么 URL 
应该是：https://localhost:portnumber。但如果你在 443 端口运行 HttpsServer，那么 URL 
应该是：https://localhost。</P>
<P><STRONG>示例代码 2</STRONG>：HttpsServer.java </P>
<BLOCKQUOTE><PRE><TT><FONT color=#0033aa>import</FONT> java.io.*;
<FONT color=#0033aa>import</FONT> java.net.*;
<FONT color=#0033aa>import</FONT> javax.net.*;
<FONT color=#0033aa><STRONG>import</STRONG></FONT><STRONG> javax.net.ssl.*;
<FONT color=#0033aa>import</FONT> java.security.*;</STRONG>
<FONT color=#0033aa>import</FONT> java.util.StringTokenizer;

<FONT color=#008000>/** </FONT>
<FONT color=#008000> * This class implements a multithreaded simple HTTPS </FONT>
<FONT color=#008000> * server that supports the GET request method.</FONT>
<FONT color=#008000> * It listens on port 44, waits client requests</FONT>
<FONT color=#008000> * and serves documents.</FONT>
<FONT color=#008000> */</FONT>

<FONT color=#0033ff>public</FONT> <FONT color=#0033ff>class</FONT> HttpsServer {

<STRONG>    String keystore = <FONT color=#990000>"serverkeys"</FONT>;
    <FONT color=#0033ff>char</FONT> keystorepass[] = <FONT color=#990000>"hellothere"</FONT>.<FONT color=#0033aa>toCharArray</FONT>();
    <FONT color=#0033ff>char</FONT> keypassword[] = <FONT color=#990000>"hiagain"</FONT>.<FONT color=#0033aa>toCharArray</FONT>();

    <FONT color=#008000>// The port number which the server will be listening on</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>static</FONT> <FONT color=#0033ff>final</FONT> <FONT color=#0033ff>int</FONT> HTTPS_PORT = <FONT color=#333333>443</FONT>;</STRONG>

    
    <FONT color=#0033ff>public</FONT> ServerSocket <FONT color=#0033aa>getServer</FONT>() <FONT color=#0033ff>throws</FONT> Exception {

<STRONG>        KeyStore ks = KeyStore.<FONT color=#0033aa>getInstance</FONT>(<FONT color=#990000>"JKS"</FONT>);
        ks.<FONT color=#0033aa>load</FONT>(<FONT color=#0033ff>new</FONT> <FONT color=#0033aa>FileInputStream</FONT>(keystore), keystorepass);
        KeyManagerFactory kmf = 
            KeyManagerFactory.<FONT color=#0033aa>getInstance</FONT>(<FONT color=#990000>"SunX509"</FONT>);
        kmf.<FONT color=#0033aa>init</FONT>(ks, keypassword);
        SSLContext sslcontext = 
            SSLContext.<FONT color=#0033aa>getInstance</FONT>(<FONT color=#990000>"SSLv3"</FONT>);
        sslcontext.<FONT color=#0033aa>init</FONT>(kmf.<FONT color=#0033aa>getKeyManagers</FONT>(), <FONT color=#0033ff>null</FONT>, <FONT color=#0033ff>null</FONT>);
        ServerSocketFactory ssf = 
            sslcontext.<FONT color=#0033aa>getServerSocketFactory</FONT>();
        SSLServerSocket serversocket = (SSLServerSocket) 
            ssf.<FONT color=#0033aa>createServerSocket</FONT>(HTTPS_PORT);
        <FONT color=#0033ff>return</FONT> serversocket;</STRONG>

    }


    <FONT color=#008000>// multi-threading -- create a new connection </FONT>
    <FONT color=#008000>// for each request</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>run</FONT>() {
        ServerSocket listen;
        <FONT color=#0033ff>try</FONT> {
            listen = <FONT color=#0033aa>getServer</FONT>();
            <FONT color=#0033ff>while</FONT>(true) {
                Socket client = listen.<FONT color=#0033aa>accept</FONT>();
                ProcessConnection cc = <FONT color=#0033ff>new</FONT> 
                    <FONT color=#0033aa>ProcessConnection</FONT>(client);
            }
        } <FONT color=#0033ff>catch</FONT>(Exception e) {
            System.out.<FONT color=#0033aa>println</FONT>(<FONT color=#990000>"Exception: "</FONT>+e.<FONT color=#0033aa>getMessage</FONT>());
        }
    }

    <FONT color=#008000>// main program</FONT>
    <FONT color=#0033ff>public</FONT> <FONT color=#0033ff>static</FONT> <FONT color=#0033ff>void</FONT> <FONT color=#0033aa>main</FONT>(String argv[]) <FONT color=#0033ff>throws</FONT> Exception {
        HttpsServer https = <FONT color=#0033ff>new</FONT> <FONT color=#0033aa>HttpsServer</FONT>();
        https.<FONT color=#0033aa>run</FONT>();
    }
}</TT></PRE></BLOCKQUOTE>
<P>这几行：</P>
<P>String keystore = "serverkeys";<BR>char keystorepass[] = 
"hellothere".toCharArray();<BR>char keypassword[] = "hiagain".toCharArray();</P>
<P>指定了 keystore 的名字、密码和密匙密码。直接在代码中写出密码文本是个糟糕的主意，不过我们可以在运行服务器的时候在命令行指定密码。</P>
<P>　　getServer 方法中的其它 JSSE 代码：</P>
<BLOCKQUOTE>
<UL>
<LI>它访问 serverkeys keystore，JSK 是 Java KeyStore (一种由 keytool 产生的 keystore)。 
<LI>用 KeyManagerFactory 为 keystore 创建 X.509 密匙管理。 
<LI>SSLContext 是实现 JSSE 的环境。用它来创建可以创建 SSLServerSocket 的 
ServerSocketFactory。虽然我们指定使用 SSL 3.0，但是返回来的实现常常支持其它协议版本，如 TLS 1.0。旧的浏览器中更多时候使用 
SSL 3.0。 </LI></UL></BLOCKQUOTE>
<P>　　注意默认情况下不需要客户端的验证。如果你想要服务器请求客户端进行验证，使用：<BR>　　serversocket.setNeedClientAuth(true). 
</P>
<P>　　现在用 HttpsServer 类做个实验：</P>
<OL>
<OL>
<LI>将 HttpsServer 和 ProcessConnection 两个类 (上面的代码) 保存在文件 HttpsServer.java 中。 
<LI>让HttpsServer.java 与 keytool 创建的 serverkyes 文件在同一目录。 
<LI>使用 javac 编译 HttpsServer。 
<LI>运行 HttpsServer。默认情况下它应该使用 443 端口，不过如果你不能在这个端口上使用它，请选择另一个大于 1024 的端口号。 
<LI>打开网页浏览器并输入请求：https://localhost 或者 https://127.0.0.1。这是假译服务器使用 443 
端口的情况。如果不是这个端口，那么使用：use: https://localhost:port </LI></OL></OL>
<P>　　你在浏览器中输入 https://URL 的时候，你会得到一个安全警告的弹出窗口，就像图 3 那样。这是因为 HTTP 
服务器证书是自己产生的。换句话说，它由未知的 CA 创建，在你的浏览器保存的 CA 中没有找到这个 CA。有一个选项让你显示证书 
(检查它是不是正确的证书以及是谁签的名) 和安装该证书、拒绝该证书或者接受该证书。</P>
<P align=center><IMG height=301 src="fig3.gif" 
width=384><BR><EM>图 3：由未知 CA 颁发的服务器证书</EM></P>
<BLOCKQUOTE>
<HR>
注意：在内部的私有系统中产生你自己的证书是个很好的主意。但在公共系统中，最好从知名的 CA 处获得证书，以避免浏览器的安全警告。<BR>
<HR>
</BLOCKQUOTE>
<P>　　如果你接受证书，你就可以看到安全连接之后的页面。以后访问同一个网站的时候浏览器就不再会弹出安全警告了。注意有许多网站使用 
HTTPS，而证书是自己产生或者由不知名的 CA 产生的。例如，https://www.jam.ca。如果你没访问过这个网页，你会看到一个像图 3 
一样的安全警告。</P>
<BLOCKQUOTE>
<HR>
注意：你接受证书以后，它只对当前的会话有效，也就是说，如果你完全退出浏览器后，它就失效了。Netscape 和 Microsoft Internet 
Explorer (MSIE) 都允许你永久保证证书。在 MSIE 中的作法是：选择图 3 所示的“View 
Certificate”并在新开的窗口中选择“Install Certificate”。<BR>
<HR>
</BLOCKQUOTE>
<P>&nbsp;</P>
<H3>总结</H3>
<P>　　这篇文章谈到了 SSL 并描述了 JSSE 框架及其实现。文中的例子可以说明把 SSL 整合到你的 C/S 
应用中是一件很容易的事情。文中给出了一个安全 HTTP 服务器的例子，你可以使用它来进行实验。文中还介绍了 JSSE API 以及可以发生 HTTPS 
请求的网页浏览器。 </P>
<P style="BACKGROUND-COLOR: #f8f8f8"><EM>发表于 <STRONG>计算机世界网 知识中心</STRONG> (2002 
年 11 月)</EM></P><!--EndFragment--></BODY>
</HTML>