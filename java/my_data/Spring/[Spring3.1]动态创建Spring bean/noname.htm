<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>[Spring3.1]动态创建Spring bean</TITLE><LINK 
rel="shortcut icon" type=image/x-icon href="favicon.ico"><LINK 
title=ITeye rel=search type=application/opensearchdescription+xml 
href="open_search.xml"><LINK title="Blue Sky" rel=alternate 
type=application/rss+xml href="rss"><LINK rel=stylesheet type=text/css 
href="blog.css_1347416251" media=screen><LINK 
rel=stylesheet type=text/css 
href="blue.css_1326191326" 
media=screen>
<LINK rel=stylesheet type=text/css 
href="SyntaxHighlighter.css_1324994303" 
media=screen>
<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

</HEAD>

<BODY>

<DIV id=page>

<DIV id=content class=clearfix>

<DIV id=main>

<DIV class=blog_main><!--StartFragment--><DIV class=blog_title>
<H3><A href="http://dinguangx.iteye.com/blog/1677683">[Spring3.1]动态创建Spring bean</A> <EM 
class=actions></EM></H3>
<UL class=blog_categories><STRONG>博客分类：</STRONG> 
<LI><A href="http://dinguangx.iteye.com/category/247752">Spring</A></LI></UL>
<DIV class=news_tag><A href="http://www.iteye.com/blogs/tag/spring">spring</A><A 
href="http://www.iteye.com/blogs/tag/beanfactory">beanfactory</A>&nbsp;</DIV></DIV>
<DIV id=blog_content class=blog_content>
<P>&nbsp;</P>
<P style="TEXT-INDENT: 21pt" class=MsoNormal><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">目前正在使用的软件开发包中有一个业务服务基类</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">BaseService</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">，所有的自定义服务类都会继续于这个</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">BaseService</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">，但是业务服务实例是由软件包中封装好的</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">BaseServiceFactory</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">创建的，在需要使用具体的业务实例时，</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">BaseServiceFactory</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">接收具体的</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">BaseService</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">类名来创建服务实例，如下：</SPAN></P>
<P style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt" class=MsoNormal>&nbsp;</P>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" href="http://dinguangx.iteye.com/blog/1677683#"><IMG 
alt=复制代码 src="icon_copy.gif"></A>&nbsp;<A title=收藏这段代码 
onclick="code_favorites_do_favorite(this);return false;" 
href="javascript:void()"><IMG class=star alt=收藏代码 
src="icon_star.png"><IMG style="DISPLAY: none" class=spinner 
src="spinner.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BaseService&nbsp;getService(String&nbsp;className);&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE style="DISPLAY: none" class=java title="[Spring3.1]动态创建Spring bean" name="code" codeable_id="1677683" codeable_type="Blog" source_url="http://dinguangx.iteye.com/blog/1677683" pre_index="0">public BaseService getService(String className);</PRE>&nbsp; 

<P style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt" class=MsoNormal><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">现在想要将该软件开发包与</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">spring</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">进行整合，将所有的业务服务类加入到</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">spring</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">容器中，作为</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">spring bean</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">使用，所以就想采用动态创建</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">spring bean</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">的方式来实现：首先由</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">className</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">生成</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">Bean</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">定义，再由</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">Bean</SPAN><SPAN 
style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt">定义来产生代码业务类。</SPAN></P>
<P style="LINE-HEIGHT: 150%; TEXT-INDENT: 10pt" 
class=MsoNormal><SPAN>目前</SPAN><SPAN>spring</SPAN><SPAN>提供基于</SPAN><SPAN>XML</SPAN><SPAN>和</SPAN><SPAN>annotation</SPAN><SPAN>等多种方式的</SPAN><SPAN>bean</SPAN><SPAN>配置，但是这些配置都是在容器启动的时候已经确定了</SPAN><SPAN>bean</SPAN><SPAN>的类型以及参数类型，要实现我们现在的这种业务场景，只有通过</SPAN><SPAN 
style="LINE-HEIGHT: 150%; BACKGROUND-COLOR: white">BeanDefinitionBuilder</SPAN><SPAN>来创建</SPAN><SPAN 
style="LINE-HEIGHT: 150%; BACKGROUND-COLOR: white">Bean</SPAN><SPAN>定义并加入</SPAN><SPAN 
style="LINE-HEIGHT: 150%; BACKGROUND-COLOR: white">BeanFactory</SPAN><SPAN>。</SPAN></P>
<P style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt" 
class=MsoNormal><SPAN>spring</SPAN><SPAN>的</SPAN><SPAN>BeanFactory</SPAN><SPAN>子类众多，其中</SPAN><SPAN 
style="LINE-HEIGHT: 150%; BACKGROUND-COLOR: silver; FONT-SIZE: 10pt">DefaultListableBeanFactory</SPAN><SPAN>可以支持动态增加</SPAN><SPAN>Bean</SPAN><SPAN>定义，代码实现如下</SPAN><SPAN>：</SPAN></P>
<DIV style="TEXT-ALIGN: left; TEXT-INDENT: 13px">
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" href="http://dinguangx.iteye.com/blog/1677683#"><IMG 
alt=复制代码 src="icon_copy.gif"></A>&nbsp;<A title=收藏这段代码 
onclick="code_favorites_do_favorite(this);return false;" 
href="javascript:void()"><IMG class=star alt=收藏代码 
src="icon_star.png"><IMG style="DISPLAY: none" class=spinner 
src="spinner.gif"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;CustomBaseServiceFactory&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>final</SPAN><SPAN>&nbsp;String&nbsp;BEAN_POSTFIX&nbsp;=&nbsp;</SPAN><SPAN 
class=string>".service"</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;BaseService&nbsp;getService(String&nbsp;className)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;beanName&nbsp;=&nbsp;className&nbsp;+&nbsp;BEAN_POSTFIX; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConfigurableApplicationContext&nbsp;applicationContext&nbsp;=&nbsp;(ConfigurableApplicationContext)&nbsp;SpringContextHolder 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getApplicationContext(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultListableBeanFactory&nbsp;beanFactory&nbsp;=&nbsp;(DefaultListableBeanFactory)&nbsp;applicationContext 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getBeanFactory(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>&nbsp;(!beanFactory.containsBean(beanName))&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanDefinitionBuilder&nbsp;bdb&nbsp;=&nbsp;BeanDefinitionBuilder 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.rootBeanDefinition(className); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdb.setScope(</SPAN><SPAN 
class=string>"prototype"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beanFactory.registerBeanDefinition(beanName, &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdb.getBeanDefinition()); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;(BaseService)&nbsp;beanFactory.getBean(beanName); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE style="DISPLAY: none" class=java title="[Spring3.1]动态创建Spring bean" name="code" codeable_id="1677683" codeable_type="Blog" source_url="http://dinguangx.iteye.com/blog/1677683" pre_index="1">public class CustomBaseServiceFactory {
 
  private static final String BEAN_POSTFIX = ".service";
  public BaseService getService(String className) {
     String beanName = className + BEAN_POSTFIX;
     ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) SpringContextHolder
            .getApplicationContext();
     DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext
            .getBeanFactory();
     if (!beanFactory.containsBean(beanName)) {
         BeanDefinitionBuilder bdb = BeanDefinitionBuilder
                .rootBeanDefinition(className);
         bdb.setScope("prototype");
         beanFactory.registerBeanDefinition(beanName,
                bdb.getBeanDefinition());
     }
 
     return (BaseService) beanFactory.getBean(beanName);
  }
}</PRE>&nbsp;</DIV>
<P style="LINE-HEIGHT: 150%; TEXT-INDENT: 21pt" 
class=MsoNormal><SPAN>这样，即完成了对</SPAN><SPAN>BaseService</SPAN><SPAN>的改造，无论是对业务类增加</SPAN><SPAN>AOP</SPAN><SPAN>或者注入属性都可以方便地实现。更为方便的是，如果使用的是该类的子类，不再需要在子类上增加</SPAN><SPAN>@Service,@Component</SPAN><SPAN>之类的标记了；如果需要在子类中注入其他的</SPAN><SPAN>bean</SPAN><SPAN>，只需要在该属性上增加</SPAN><SPAN>@autowired</SPAN><SPAN>或</SPAN><SPAN>@resource</SPAN><SPAN>即可实现属性的注入。</SPAN></P></DIV><!--EndFragment--></DIV>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>