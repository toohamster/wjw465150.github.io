<!-- saved from url=http://coolyongzi.javaeye.com/blog/218558 -->
<script>
window.onerror = new Function("return(false);")
</script><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">

<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>使用 Spring 2.5 基于注解驱动的 Spring MVC 1 - 程序人生―路漫漫 - JavaEye技术网站</TITLE><LINK 
href="favicon.ico" type=image/x-icon rel="shortcut icon"><LINK 
title=程序人生―路漫漫 href="rss" type=application/rss+xml rel=alternate><LINK 
media=screen href="blog.css_1217128319" 
type=text/css rel=stylesheet><LINK media=screen 
href="purple.css_1200451876" 
type=text/css rel=stylesheet>
<SCRIPT src="application.js_1214967926" 
type=text/javascript></SCRIPT>

<SCRIPT id=__onDOMContentLoaded src="http://:/" defer></SCRIPT>
<LINK media=screen 
href="SyntaxHighlighter.css_1201588027" 
type=text/css rel=stylesheet>
<SCRIPT 
src="shCoreCommon.js_1203397332" 
type=text/javascript></SCRIPT>

<SCRIPT src="se_hilite.js_1203397332" 
type=text/javascript></SCRIPT>

<STYLE>
    div#main {background-color: transparent; border: 0; padding: 0px; width: 740px;}
  </STYLE>
<LINK media=screen 
href="ui.css_1212551310" 
type=text/css rel=stylesheet>
<SCRIPT src="compress.js_1209370586" 
type=text/javascript></SCRIPT>
</HEAD>

<BODY>

<DIV id=page>

<DIV class=clearfix id=content>

<DIV id=main>

<DIV class=blog_main><!--StartFragment--><DIV class=blog_title>
<DIV class=date><SPAN class=year>2008</SPAN><SPAN class=sep_year>-</SPAN><SPAN 
class=month>07</SPAN><SPAN class=sep_month>-</SPAN><SPAN 
class=day>23</SPAN></DIV>
<H3 class=type_reprint title=转载><A href="http://coolyongzi.javaeye.com/blog/218558">使用 Spring 2.5 基于注解驱动的 
Spring MVC 1 </A></H3></DIV>
<DIV class=blog_content>概述 <BR><BR>继 Spring 2.0 对 Spring MVC 进行重大升级后，Spring 2.5 
又为 Spring MVC 引入了注解驱动功能。现在你无须让 Controller 继承任何接口，无需在 XML 配置文件中定义请求和 Controller 
的映射关系，仅仅使用注解就可以让一个 POJO 具有 Controller 的绝大部分功能 ―― Spring MVC 
框架的易用性得到了进一步的增强.在框架灵活性、易用性和扩展性上，Spring MVC 已经全面超越了其它的 MVC 框架，伴随着 Spring 
一路高唱猛进，可以预见 Spring MVC 在 MVC 市场上的吸引力将越来越不可抗拒。 <BR><BR>本文将介绍 Spring 2.5 新增的 Sping 
MVC 注解功能，讲述如何使用注解配置替换传统的基于 XML 的 Spring MVC 配置。 <BR><BR><BR>一个简单的基于注解的 
Controller <BR><BR>使 用过低版本 Spring MVC 的读者都知道：当创建一个 Controller 时，我们需要直接或间接地实现 
org.springframework.web.servlet.mvc.Controller 接口。一般情况下，我们是通过继承 
SimpleFormController 或 MultiActionController 来定义自己的 Controller 的。在定义 Controller 
后，一个重要的事件是在 Spring MVC 的配置文件中通过 HandlerMapping 定义请求和控制器的映射关系，以便将两者关联起来。 
<BR><BR>来看一下基于注解的 Controller 是如何定义做到这一点的，下面是使用注解的 BbtForumController： 
<BR><BR><BR>清单 1. BbtForumController.java <BR>package com.baobaotao.web; 
<BR>import com.baobaotao.service.BbtForumService; <BR>import 
org.springframework.beans.factory.annotation.Autowired; <BR>import 
org.springframework.stereotype.Controller; <BR>import 
org.springframework.web.bind.annotation.ModelAttribute; <BR>import 
org.springframework.web.bind.annotation.RequestMapping; <BR>import 
org.springframework.web.bind.annotation.RequestMethod; <BR>import 
java.util.Collection;@Controller <BR>//&lt;――①@RequestMapping("/forum.do") 
<BR>public class BbtForumController { <BR>@Autowired <BR>private BbtForumService 
bbtForumService; <BR>@RequestMapping <BR>//&lt;――② <BR>public String 
listAllBoard() { <BR>bbtForumService.getAllBoard(); <BR>System.out.println("call 
listAllBoard method."); <BR>return "listBoard"; <BR>}} <BR><BR><BR>从上面代码中，我们可以看出 
BbtForumController 和一般的类并没有区别，它没有实现任何特殊的接口，因而是一个地道的 POJO。让这个 POJO 与众不同的魔棒就是 
Spring MVC 的注解！ <BR><BR>在 ① 处使用了两个注解，分别是 @Controller 和 @RequestMapping。在“使用 
Spring 2.5 基于注解驱动的 IoC” 这篇文章里，笔者曾经指出过 @Controller、@Service 以及 @Repository 和 
@Component 注解的作用是等价的：将一个类成为 Spring 容器的 Bean。由于 Spring MVC 的 Controller 必须事先是一个 
Bean，所以 @Controller 注解是不可缺少的。 <BR><BR>真正让 BbtForumController 具备 Spring MVC 
Controller 功能的是 @RequestMapping 这个注解。@RequestMapping 可以标注在类定义处，将 Controller 
和特定请求关联起来；还可以标注在方法签名处，以便进一步对请求进行分流。在 ① 处，我们让 BbtForumController 
关联“/forum.do”的请求，而 ② 处，我们具体地指定 listAllBoard() 方法来处理请求。所以在类声明处标注的 @RequestMapping 
相当于让 POJO 实现了 Controller 接口，而在方法定义处的 @RequestMapping 相当于让 POJO 扩展 Spring 预定义的 
Controller（如 SimpleFormController 等）。 <BR><BR>为了让基于注解的 Spring MVC 真正工作起来，需要在 
Spring MVC 对应的 xxx-servlet.xml 配置文件中做一些手脚。在此之前，还是先来看一下 web.xml 的配置吧： 
<BR><BR><BR>清单 2. web.xml：启用 Spring 容器和 Spring MVC 框架 <BR>&lt;?xml version="1.0" 
encoding="UTF-8"?&gt;&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5"&gt; 
&lt;display-name&gt;Spring Annotation MVC Sample&lt;/display-name&gt; 
<BR>&lt;!-- Spring 服务层的配置文件 --&gt; <BR>&lt;context-param&gt; 
<BR>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; 
<BR>&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; 
&lt;/context-param&gt; <BR>&lt;!-- Spring 容器启动监听器 --&gt; <BR>&lt;listener&gt; 
<BR>&lt;listener_class&gt; 
<BR>org.springframework.web.context.ContextLoaderListener 
&lt;/listener-class&gt; <BR>&lt;/listener&gt; <BR>&lt;!-- Spring MVC 
的Servlet，它将加载WEB-INF/annomvc-servlet.xml 的配置文件，以启动Spring MVC模块--&gt; 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;annomvc&lt;/servlet-name&gt; 
<BR>&lt;servlet_class&gt; <BR>org.springframework.web.servlet.DispatcherServlet 
&lt;/servlet-class&gt; &lt;load-on-startup&gt;2&lt;/load-on-startup&gt; 
&lt;/servlet&gt; &lt;servlet-mapping&gt; 
&lt;servlet-name&gt;annomvc&lt;/servlet-name&gt; 
&lt;url-pattern&gt;*.do&lt;/url-pattern&gt; 
&lt;/servlet-mapping&gt;&lt;/web-app&gt; <BR><BR><BR>web.xml 中定义了一个名为 annomvc 的 
Spring MVC 模块，按照 Spring MVC 的契约，需要在 WEB-INF/annomvc-servlet.xml 配置文件中定义 Spring 
MVC 模块的具体配置。annomvc-servlet.xml 的配置内容如下所示： <BR><BR>清单 3. annomvc-servlet.xml 
<BR><BR>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans 
xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:p="http://www.springframework.org/schema/p" 
xmlns:context="http://www.springframework.org/schema/context" 
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt; 
&lt;!-- ①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 --&gt; &lt;context:component-scan 
base-package="com.baobaotao.web"/&gt; &lt;!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 
--&gt; &lt;bean class="org.springframework.web.servlet.mvc.annotation. 
AnnotationMethodHandlerAdapter"/&gt; &lt;!-- ③：对模型视图名称的解析，即在模型视图名称添加前后缀 --&gt; 
&lt;bean 
class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/&gt;&lt;/beans&gt; <BR><BR><BR>因为 
Spring 所有功能都在 Bean 的基础上演化而来，所以必须事先将 Controller 变成 Bean，这是通过在类中标注 @Controller 并在 
annomvc-servlet.xml 中启用组件扫描机制来完成的，如 ① 所示。 <BR><BR>在 ② 处，配置了一个 
AnnotationMethodHandlerAdapter，它负责根据 Bean 中的 Spring MVC 注解对 Bean 进行加工处理，使这些 Bean 
变成控制器并映射特定的 URL 请求。 <BR><BR>而 ③ 处的工作是定义模型视图名称的解析规则，这里我们使用了 Spring 2.5 的特殊命名空间，即 
p 命名空间，它将原先需要通过 &lt;property&gt; 元素配置的内容转化为 &lt;bean&gt; 属性配置，在一定程度上简化了 
&lt;bean&gt; 的配置。 <BR><BR>启动 Tomcat，发送 http://localhost/forum.do URL 
请求，BbtForumController 的 listAllBoard() 方法将响应这个请求，并转向 WEB-INF/jsp/listBoard.jsp 
的视图页面。 <BR><BR><BR>让一个 Controller 处理多个 URL 请求 <BR><BR>在低版本的 Spring MVC 
中，我们可以通过继承 MultiActionController 让一个 Controller 处理多个 URL 请求。使用 @RequestMapping 
注解后，这个功能更加容易实现了。请看下面的代码： <BR><BR>清单 3. 每个请求处理参数对应一个 URL <BR><BR>package 
com.baobaotao.web;import com.baobaotao.service.BbtForumService;import 
org.springframework.beans.factory.annotation.Autowired;import 
org.springframework.stereotype.Controller;import 
org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class 
BbtForumController { @Autowired private BbtForumService bbtForumService; 
@RequestMapping("/listAllBoard.do") // &lt;―― ① public String listAllBoard() { 
bbtForumService.getAllBoard(); System.out.println("call listAllBoard method."); 
return "listBoard"; } @RequestMapping("/listBoardTopic.do") // &lt;―― ② public 
String listBoardTopic(int topicId) { bbtForumService.getBoardTopics(topicId); 
System.out.println("call listBoardTopic method."); return "listTopic"; }} 
<BR><BR><BR>在这里，我们分别在 ① 和 ② 处为 listAllBoard() 和 listBoardTopic() 方法标注了 
@RequestMapping 注解，分别指定这两个方法处理的 URL 请求，这相当于将 BbtForumController 改造为 
MultiActionController。这样 /listAllBoard.do 的 URL 请求将由 listAllBoard() 负责处理，而 
/listBoardTopic.do?topicId=1 的 URL 请求则由 listBoardTopic() 方法处理。 <BR><BR>对 于处理多个 
URL 请求的 Controller 来说，我们倾向于通过一个 URL 参数指定 Controller 处理方法的名称（如 
method=listAllBoard），而非直接通过不同的 URL 指定 Controller 的处理方法。使用 @RequestMapping 
注解很容易实现这个常用的需求。来看下面的代码： <BR><BR><BR>清单 4. 一个 Controller 对应一个 URL，由请求参数决定请求处理方法 
<BR>package com.baobaotao.web;import 
com.baobaotao.service.BbtForumService;import 
org.springframework.beans.factory.annotation.Autowired;import 
org.springframework.stereotype.Controller;import 
org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping("/bbtForum.do") 
// &lt;―― ① 指定控制器对应URL请求public class BbtForumController { @Autowired private 
BbtForumService bbtForumService; // &lt;―― ② 
如果URL请求中包括"method=listAllBoard"的参数，由本方法进行处理 @RequestMapping(params = 
"method=listAllBoard") public String listAllBoard() { 
bbtForumService.getAllBoard(); System.out.println("call listAllBoard method."); 
return "listBoard"; } // &lt;―― ③ 如果URL请求中包括"method=listBoardTopic"的参数，由本方法进行处理 
@RequestMapping(params = "method=listBoardTopic") public String 
listBoardTopic(int topicId) { bbtForumService.getBoardTopics(topicId); 
System.out.println("call listBoardTopic method."); return "listTopic"; }} 
<BR><BR><BR>在类定义处标注的 @RequestMapping 让 BbtForumController 处理所有包含 /bbtForum.do 的 
URL 请求，而 BbtForumController 中的请求处理方法对 URL 请求的分流规则在 ② 和 ③ 处定义分流规则按照 URL 的 method 
请求参数确定。所以分别在类定义处和方法定义处使用 @RequestMapping 注解，就可以很容易通过 URL 参数指定 Controller 的处理方法了。 
<BR><BR>@RequestMapping 注解中除了 params 属性外，还有一个常用的属性是 method，它可以让 Controller 
方法处理特定 HTTP 请求方式的请求，如让一个方法处理 HTTP GET 请求，而另一个方法处理 HTTP POST 请求，如下所示： 
<BR><BR><BR>清单 4. 让请求处理方法处理特定的 HTTP 请求方法 <BR>package com.baobaotao.web;import 
com.baobaotao.service.BbtForumService;import 
org.springframework.beans.factory.annotation.Autowired;import 
org.springframework.stereotype.Controller;import 
org.springframework.web.bind.annotation.RequestMapping;import 
org.springframework.web.bind.annotation.RequestMethod;@Controller@RequestMapping("/bbtForum.do") 
public class BbtForumController { @RequestMapping(params = 
"method=createTopic",method = RequestMethod.POST) public String createTopic(){ 
System.out.println("call createTopic method."); return "createTopic"; }} 
<BR><BR><BR>这样只有当 /bbtForum.do?method=createTopic 请求以 HTTP POST 
方式提交时，createTopic() 方法才会进行处理。 <BR><BR><BR>处理方法入参如何绑定 URL 参数 <BR><BR>按契约绑定 
<BR><BR>Controller 的方法标注了 @RequestMapping 注解后，它就能处理特定的 URL 
请求。我们不禁要问：请求处理方法入参是如何绑定 URL 参数的呢？在回答这个问题之前先来看下面的代码： <BR><BR>清单 5. 按参数名匹配进行绑定 
<BR><BR>@RequestMapping(params = "method=listBoardTopic") //&lt;―― ① 
topicId入参是如何绑定URL请求参数的？ public String listBoardTopic(int topicId) { 
bbtForumService.getBoardTopics(topicId); System.out.println("call listBoardTopic 
method."); return "listTopic"; } <BR><BR><BR>当我们发送 
http://localhost//bbtForum.do?method=listBoardTopic&amp;topicId=10 的 URL 
请求时，Spring 不但让 listBoardTopic() 方法处理这个请求，而且还将 topicId 请求参数在类型转换后绑定到 
listBoardTopic() 方法的 topicId 入参上。而 listBoardTopic() 方法的返回类型是 
String，它将被解析为逻辑视图的名称。也就是说 Spring 在如何给处理方法入参自动赋值以及如何将处理方法返回值转化为 ModelAndView 
中的过程中存在一套潜在的规则，不熟悉这个规则就不可能很好地开发基于注解的请求处理方法，因此了解这个潜在规则无疑成为理解 Spring MVC 
框架基于注解功能的核心问题。 <BR><BR>我们不妨从最常见的开始说起：请求处理方法入参的类型可以是 Java 基本数据类型或 String 
类型，这时方法入参按参数名匹配的原则绑定到 URL 请求参数，同时还自动完成 String 类型的 URL 
请求参数到请求处理方法参数类型的转换。下面给出几个例子： <BR><BR>listBoardTopic(int topicId)：和 topicId URL 
请求参数绑定； <BR>listBoardTopic(int topicId,String boardName)：分别和 topicId、boardName 
URL 请求参数绑定； <BR>? <BR>特别的，如果入参是基本数据类型（如 int、long、float 等），URL 
请求参数中一定要有对应的参数，否则将抛出 TypeMismatchException 异常，提示无法将 null 转换为基本数据类型。 
<BR><BR>另外，请求处理方法的入参也可以一个 JavaBean，如下面的 User 对象就可以作为一个入参： <BR><BR><BR>清单 6. 
User.java：一个 JavaBean <BR>package com.baobaotao.web;public class User { private 
int userId; private String userName; //省略get/setter方法 public String toString(){ 
return this.userName +","+this.userId; }} <BR><BR><BR>下面是将 User 作为 
listBoardTopic() 请求处理方法的入参： <BR><BR><BR>清单 7. 使用 JavaBean 作为请求处理方法的入参 
<BR>@RequestMapping(params = "method=listBoardTopic") public String 
listBoardTopic(int topicId,User user) { bbtForumService.getBoardTopics(topicId); 
System.out.println("topicId:"+topicId); System.out.println("user:"+user); 
System.out.println("call listBoardTopic method."); return "listTopic"; } 
<BR><BR><BR>这时，如果我们使用以下的 URL 
请求：http://localhost/bbtForum.do?method=listBoardTopic&amp;topicId=1&amp;userId=10&amp;userName=tom 
<BR><BR>topicId URL 参数将绑定到 topicId 入参上，而 userId 和 userName URL 参数将绑定到 user 对象的 
userId 和 userName 属性中。和 URL 请求中不允许没有 topicId 参数不同，虽然 User 的 userId 
属性的类型是基本数据类型，但如果 URL 中不存在 userId 参数，Spring 也不会报错，此时 user.userId 值为 0。如果 User 
对象拥有一个 dept.deptId 的级联属性，那么它将和 dept.deptId URL 参数绑定。 <BR><BR>通过注解指定绑定的 URL 参数 
<BR><BR>如果我们想改变这种默认的按名称匹配的策略，比如让 listBoardTopic(int topicId,User user) 中的 
topicId 绑定到 id 这个 URL 参数，那么可以通过对入参使用 @RequestParam 注解来达到目的： <BR><BR>清单 8. 通过 
@RequestParam 注解指定 <BR><BR>package com.baobaotao.web;import 
org.springframework.web.bind.annotation.RequestMapping;import 
org.springframework.web.bind.annotation.RequestParam;…@Controller@RequestMapping("/bbtForum.do")public 
class BbtForumController { @RequestMapping(params = "method=listBoardTopic") 
public String listBoardTopic(@RequestParam("id") int topicId,User user) { 
bbtForumService.getBoardTopics(topicId); System.out.println("topicId:"+topicId); 
System.out.println("user:"+user); System.out.println("call listBoardTopic 
method."); return "listTopic"; }…} <BR><BR><BR>这里，对 listBoardTopic() 请求处理方法的 
topicId 入参标注了 @RequestParam("id") 注解，所以它将和 id 的 URL 参数绑定。 <BR><BR>绑定模型对象中某个属性 
<BR><BR>Spring 2.0 定义了一个 org.springframework.ui.ModelMap 
类，它作为通用的模型数据承载对象，传递数据供视图所用。我们可以在请求处理方法中声明一个 ModelMap 类型的入参，Spring 
会将本次请求模型对象引用通过该入参传递进来，这样就可以在请求处理方法内部访问模型对象了。来看下面的例子： <BR><BR><BR>清单 9. 使用 
ModelMap 访问请示对应的隐含模型对象 <BR>@RequestMapping(params = "method=listBoardTopic") 
public String listBoardTopic(@RequestParam("id")int topicId, User user,ModelMap 
model) { bbtForumService.getBoardTopics(topicId); System.out.println("topicId:" 
+ topicId); System.out.println("user:" + user); //① 将user对象以currUser为键放入到model中 
model.addAttribute("currUser",user); return "listTopic"; } 
<BR><BR><BR>对于当次请求所对应的模型对象来说，其所 有属性都将存放到 request 的属性列表中。象上面的例子，ModelMap 中的 
currUser 属性将放到 request 的属性列表中，所以可以在 JSP 视图页面中通过 request.getAttribute(“currUser”) 
或者通过 ${currUser} EL 表达式访问模型对象中的 user 对象。从这个角度上看， ModelMap 相当于是一个向 request 
属性列表中添加对象的一条管道，借由 ModelMap 对象的支持，我们可以在一个不依赖 Servlet API 的 Controller 中向 request 
中添加属性。 <BR><BR>在默认情况下，ModelMap 中的属性作用域是 request 级别是，也就是说，当本次请求结束后，ModelMap 
中的属性将销毁。如果希望在多个请求中共享 ModelMap 中的属性，必须将其属性转存到 session 中，这样 ModelMap 的属性才可以被跨请求访问。 
<BR><BR>Spring 允许我们有选择地指定 ModelMap 中的哪些属性需要转存到 session 中，以便下一个请求属对应的 ModelMap 
的属性列表中还能访问到这些属性。这一功能是通过类定义处标注 @SessionAttributes 注解来实现的。请看下面的代码： <BR><BR><BR>清单 
10. 使模型对象的特定属性具有 Session 范围的作用域 <BR>package com.baobaotao.web;…import 
org.springframework.ui.ModelMap;import 
org.springframework.web.bind.annotation.SessionAttributes;@Controller@RequestMapping("/bbtForum.do")@SessionAttributes("currUser") 
//①将ModelMap中属性名为currUser的属性//放到Session属性列表中，以便这个属性可以跨请求访问public class 
BbtForumController {… @RequestMapping(params = "method=listBoardTopic") public 
String listBoardTopic(@RequestParam("id")int topicId, User user,ModelMap model) 
{ bbtForumService.getBoardTopics(topicId); System.out.println("topicId:" + 
topicId); System.out.println("user:" + user); 
model.addAttribute("currUser",user); //②向ModelMap中添加一个属性 return "listTopic"; }} 
<BR><BR><BR>我们在 ② 处添加了一个 ModelMap 属性，其属性名为 currUser，而 ① 处通过 @SessionAttributes 
注解将 ModelMap 中名为 currUser 的属性放置到 Session 中，所以我们不但可以在 listBoardTopic() 请求所对应的 JSP 
视图页面中通过 request.getAttribute(“currUser”) 和 session.getAttribute(“currUser”) 获取 
user 对象，还可以在下一个请求所对应的 JSP 视图页面中通过 session.getAttribute(“currUser”) 或 
ModelMap#get(“currUser”) 访问到这个属性。 <BR><BR>这里我们仅将一个 ModelMap 的属性放入 Session 中，其实 
@SessionAttributes 允许指定多个属性。你可以通过字符串数组的方式指定多个属性，如 
@SessionAttributes({“attr1”,”attr2”})。此外，@SessionAttributes 还可以通过属性类型指定要 session 
化的 ModelMap 属性，如 @SessionAttributes(types = User.class)，当然也可以指定多个类，如 
@SessionAttributes(types = 
{User.class,Dept.class})，还可以联合使用属性名和属性类型指定：@SessionAttributes(types = 
{User.class,Dept.class},value={“attr1”,”attr2”})。 <BR><BR>上面 
讲述了如何往ModelMap中放置属性以及如何使ModelMap中的属性拥有Session域的作用范围。除了在JSP视图页面中通过传统的方法访问 
ModelMap中的属性外，读者朋友可能会问：是否可以将ModelMap中的属性绑定到请求处理方法的入参中呢？答案是肯定的。Spring为此提供 
了一个@ModelAttribute的注解，下面是使用@ModelAttribute注解的例子： <BR><BR>清单 11. 使模型对象的特定属性具有 
Session 范围的作用域 <BR><BR>package com.baobaotao.web;import 
com.baobaotao.service.BbtForumService;import 
org.springframework.beans.factory.annotation.Autowired;import 
org.springframework.stereotype.Controller;import 
org.springframework.ui.ModelMap;import 
org.springframework.web.bind.annotation.RequestMapping;import 
org.springframework.web.bind.annotation.RequestParam;import 
org.springframework.web.bind.annotation.SessionAttributes;import 
org.springframework.web.bind.annotation.ModelAttribute;import 
javax.servlet.http.HttpServletRequest;import 
javax.servlet.http.HttpSession;@Controller@RequestMapping("/bbtForum.do")@SessionAttributes("currUser") 
//①让ModelMap的currUser属性拥有session级作用域public class BbtForumController { 
@Autowiredprivate BbtForumService bbtForumService; @RequestMapping(params = 
"method=listBoardTopic") public String listBoardTopic(@RequestParam("id")int 
topicId, User user,ModelMap model) { bbtForumService.getBoardTopics(topicId); 
System.out.println("topicId:" + topicId); System.out.println("user:" + user); 
model.addAttribute("currUser",user); //②向ModelMap中添加一个属性 return "listTopic"; } 
@RequestMapping(params = "method=listAllBoard") //③将ModelMap中的public String 
listAllBoard(@ModelAttribute("currUser") User user) { //currUser属性绑定到user入参中。 
bbtForumService.getAllBoard(); System.out.println("user:"+user); return 
"listBoard"; }} <BR><BR><BR>在 ② 处，我们向 ModelMap 中添加一个名为 currUser 的属性，而 ① 外的注解使这个 
currUser 属性拥有了 session 级的作用域。所以，我们可以在 ③ 处通过 @ModelAttribute 注解将 ModelMap 中的 
currUser 属性绑定以请求处理方法的 user 入参中。 <BR><BR>所以当我们先调用以下 URL 请求： 
http://localhost/bbtForum.do?method=listBoardTopic&amp;id=1&amp;userName=tom&amp;dept.deptId=12 
<BR><BR>以执行listBoardTopic()请求处理方法，然后再访问以下URL： 
http://localhost/sample/bbtForum.do?method=listAllBoard <BR><BR>你将可以看到 
listAllBoard() 的 user 入参已经成功绑定到 listBoardTopic() 中注册的 session 级的 currUser 属性上了。 
<BR><BR>请求处理方法的签名规约 <BR><BR>方法入参 <BR><BR>我们知道标注了 @RequestMapping 注解的 Controller 
方法就成为了请求处理方法，Spring MVC 允许极其灵活的请求处理方法签名方式。对于方法入参来说，它允许多种类型的入参，通过下表进行说明： 
<BR><BR>请求处理方法入参的可选类型 说明 <BR>Java 基本数据类型和 String 默认情况下将按名称匹配的方式绑定到 URL 参数上，可以通过 
@RequestParam 注解改变默认的绑定规则 <BR>request/response/session 既可以是 Servlet API 的也可以是 
Portlet API 对应的对象，Spring 会将它们绑定到 Servlet 和 Portlet 容器的相应对象上 
<BR>org.springframework.web.context.request.WebRequest 内部包含了 request 对象 
<BR>java.util.Locale 绑定到 request 对应的 Locale 对象上 
<BR>java.io.InputStream/java.io.Reader 可以借此访问 request 的内容 
<BR>java.io.OutputStream / java.io.Writer 可以借此操作 response 的内容 <BR>任何标注了 
@RequestParam 注解的入参 被标注 @RequestParam 注解的入参将绑定到特定的 request 参数上。 
<BR>java.util.Map / org.springframework.ui.ModelMap 它绑定 Spring MVC 
框架中每个请求所创建的潜在的模型对象，它们可以被 Web 视图对象访问（如 JSP） <BR>命令/表单对象（注：一般称绑定使用 HTTP GET 发送的 
URL 参数的对象为命令对象，而称绑定使用 HTTP POST 发送的 URL 参数的对象为表单对象） 它们的属性将以名称匹配的规则绑定到 URL 
参数上，同时完成类型的转换。而类型转换的规则可以通过 @InitBinder 注解或通过 HandlerAdapter 的配置进行调整 
<BR>org.springframework.validation.Errors / 
org.springframework.validation.BindingResult 
为属性列表中的命令/表单对象的校验结果，注意检验结果参数必须紧跟在命令/表单对象的后面 
<BR>rg.springframework.web.bind.support.SessionStatus 可以通过该类型 status 
对象显式结束表单的处理，这相当于触发 session 清除其中的通过 @SessionAttributes 定义的属性 <BR><BR>Spring MVC 
框架的易用之处在于，你可以按任意顺序定义请求处理方法的入参（除了 Errors 和 BindingResult 
必须紧跟在命令对象/表单参数后面以外），Spring MVC 会根据反射机制自动将对应的对象通过入参传递给请求处理方法。这种机制让开发者完全可以不依赖 
Servlet API 开发控制层的程序，当请求处理方法需要特定的对象时，仅仅需要在参数列表中声明入参即可，不需要考虑如何获取这些对象，Spring MVC 
框架就象一个大管家一样“不辞辛苦”地为我们准备好了所需的一切。下面演示一下使用 SessionStatus 的例子： <BR><BR><BR>清单 12. 使用 
SessionStatus 控制 Session 级别的模型属性 <BR>@RequestMapping(method = 
RequestMethod.POST)public String processSubmit(@ModelAttribute Owner owner, 
BindingResult result, SessionStatus status) {//&lt;――① new 
OwnerValidator().validate(owner, result); if (result.hasErrors()) { return 
"ownerForm"; } else { this.clinic.storeOwner(owner); 
status.setComplete();//&lt;――② return "redirect:owner.do?ownerId=" + 
owner.getId(); }} <BR><BR><BR>processSubmit() 方法中的 owner 表单对象将绑定到 ModelMap 
的“owner”属性中，result 参数用于存放检验 owner 结果的对象，而 status 用于控制表单处理的状态。在 ② 处，我们通过调用 
status.setComplete() 方法，该 Controller 所有放在 session 级别的模型属性数据将从 session 中清空。 
<BR><BR>方法返回参数 <BR><BR>在低版本的 Spring MVC 中，请求处理方法的返回值类型都必须是 ModelAndView。而在 
Spring 2.5 中，你拥有多种灵活的选择。通过下表进行说明： <BR><BR>请求处理方法入参的可选类型 说明 <BR>void 
此时逻辑视图名由请求处理方法对应的 URL 确定，如以下的方法： <BR><BR>@RequestMapping("/welcome.do")public 
void welcomeHandler() {} <BR><BR><BR>对应的逻辑视图名为“welcome” <BR><BR>String 
此时逻辑视图名为返回的字符，如以下的方法： <BR><BR>@RequestMapping(method = RequestMethod.GET)public 
String setupForm(@RequestParam("ownerId") int ownerId, ModelMap model) { Owner 
owner = this.clinic.loadOwner(ownerId); model.addAttribute(owner); return 
"ownerForm";} <BR><BR><BR>对应的逻辑视图名为“ownerForm” 
<BR><BR>org.springframework.ui.ModelMap 和返回类型为 void 一样，逻辑视图名取决于对应请求的 URL，如下面的例子： 
<BR><BR>@RequestMapping("/vets.do")public ModelMap vetsHandler() { return new 
ModelMap(this.clinic.getVets());} <BR><BR><BR>对应的逻辑视图名为“vets”，返回的 ModelMap 
将被作为请求对应的模型对象，可以在 JSP 视图页面中访问到。 <BR><BR>ModelAndView 当然还可以是传统的 ModelAndView。 
<BR><BR>应该说使用 String 作为请求处理方法的返回值类型是比较通用的方法，这样返回的逻辑视图名不会和请求 URL 
绑定，具有很大的灵活性，而模型数据又可以通过 ModelMap 控制。当然直接使用传统的 ModelAndView 也不失为一个好的选择。</DIV><!--EndFragment--></DIV>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>