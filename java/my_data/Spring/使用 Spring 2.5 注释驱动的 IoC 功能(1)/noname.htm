<!-- saved from url=file:///D:/temp/a/noname.htm -->
<script>
window.onerror = new Function("return(false);")
</script><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<HTML><HEAD><TITLE>使用 Spring 2.5 注释驱动的 IoC 功能(1)</TITLE><LINK href="favicon.ico" 
rel="SHORTCUT ICON"><LINK href="ie6v14.css" type=text/css rel=stylesheet><LINK 
href="main.css" type=text/css rel=stylesheet><LINK media=all href="screen.css" 
type=text/css rel=stylesheet><LINK media=print href="print.css" type=text/css 
rel=stylesheet><LINK media=screen href="ie2_screen.css" type=text/css 
rel=stylesheet></HEAD>

<BODY scroll=yes><!--StartFragment--><!--StartFragment--><!--MASTHEAD_BEGIN--><!--
<script src="pmh.js" language="JavaScript" type="text/javascript"></script>
--><!-- end masthead dw liquid --><!--MASTHEAD_END--><!-- CMA ID for this content is: 291922 -->
<TABLE id=v14-body-table cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR vAlign=top><!--LEFTNAV_BEGIN-->
<TD id=navigation width=150>&nbsp;</TD><!--LEFTNAV_END-->
<TD width="100%">
<TABLE id=content-table cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR vAlign=top>
<TD width="100%">
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><A name=main><IMG height=1 alt=跳转到主要内容 src="c.gif" width=592 
border=0></A></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR vAlign=top>
<TD width=10 height=18><IMG height=18 alt="" src="c.gif" width=10></TD>
<TD width="100%"><IMG height=6 alt="" src="c.gif" width=1><BR><A class=bctl 
href="http://www.ibm.com/developerworks/cn/" cmImpressionSent="1">developerWorks 
中国</A><SPAN class=bct>&nbsp;&nbsp;&gt;&nbsp;&nbsp;</SPAN><A class=bctl 
href="http://www.ibm.com/developerworks/cn/java/" cmImpressionSent="1">Java 
technology</A><SPAN class=bct>&nbsp;|&nbsp;</SPAN><A class=bctl 
href="http://www.ibm.com/developerworks/cn/opensource/" 
cmImpressionSent="1">Open source</A><SPAN class=bct>&nbsp;&nbsp;&gt;</SPAN><IMG height=1 
alt="" src="c.gif" width=1><BR>
<H1>使用 Spring 2.5 注释驱动的 IoC 功能</H1><IMG class=display-img height=6 alt="" 
src="c.gif" width=1></TD>
<TD class=no-print 
width=192>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR vAlign=top>
<TD width=10><IMG height=1 alt="" src="c.gif" width=10></TD>
<TD width="100%">
<TABLE class=no-print cellSpacing=0 cellPadding=0 width=160 align=right 
border=0>
<TBODY>
<TR>
<TD width=10></TR>
<TBODY></TBODY></TABLE>
<P>2008 年 2 月 28 日</P>
<BLOCKQUOTE>基于注释（Annotation）的配置有越来越流行的趋势，Spring 2.5 顺应这种趋势，提供了完全基于注释配置 Bean、装配 
Bean 的功能，您可以使用基于注释的 Spring IoC 替换原来基于 XML 的配置。本文通过实例详细讲述了 Spring 2.5 基于注释 IoC 
功能的使用。</BLOCKQUOTE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- include java script once we verify teams wants to use this and it will work on dbcs and cyrillic characters --><!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
<P><A name=N1004D><SPAN class=atitle>概述</SPAN></A></P>
<P>注释配置相对于 XML 配置具有很多的优势：</P>
<UL>
<LI>它可以充分利用 Java 的反射机制获取类结构信息，这些信息可以有效减少配置的工作。如使用 JPA 注释配置 ORM 映射时，我们就不需要指定 PO 
的属性名、类型等信息，如果关系表字段和 PO 属性名、类型都一致，您甚至无需编写任务属性映射信息――因为这些信息都可以通过 Java 反射机制获取。 
<LI>注释和 Java 代码位于一个文件中，而 XML 配置采用独立的配置文件，大多数配置信息在程序开发完成后都不会调整，如果配置信息和 Java 
代码放在一起，有助于增强程序的内聚性。而采用独立的 XML 
配置文件，程序员在编写一个功能时，往往需要在程序文件和配置文件中不停切换，这种思维上的不连贯会降低开发效率。 </LI></UL>
<P>因此在很多情况下，注释配置比 XML 配置更受欢迎，注释配置有进一步流行的趋势。Spring 2.5 
的一大增强就是引入了很多注释类，现在您已经可以使用注释配置完成大部分 XML 配置的功能。在这篇文章里，我们将向您讲述使用注释进行 Bean 
定义和依赖注入的内容。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N10063><SPAN class=atitle>原来我们是怎么做的</SPAN></A></P>
<P>在使用注释配置之前，先来回顾一下传统上是如何配置 Bean 并完成 Bean 之间依赖关系的建立。下面是 3 个类，它们分别是 Office、Car 和 
Boss，这 3 个类需要在 Spring 容器中配置为 Bean：</P>
<P>Office 仅有一个属性：</P><BR><A name=N10071><B>清单 1. Office.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;
public class Office {
    private String officeNo =”001”;

    //省略 get/setter

    @Override
    public String toString() {
        return "officeNo:" + officeNo;
    }
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>Car 拥有两个属性：</P><BR><A name=N1007D><B>清单 2. Car.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

public class Car {
    private String brand;
    private double price;

    // 省略 get/setter

    @Override
    public String toString() {
        return "brand:" + brand + "," + "price:" + price;
    }
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>Boss 拥有 Office 和 Car 类型的两个属性：</P><BR><A name=N10089><B>清单 3. 
Boss.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

public class Boss {
    private Car car;
    private Office office;

    // 省略 get/setter

    @Override
    public String toString() {
        return "car:" + car + "\n" + "office:" + office;
    }
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>我们在 Spring 容器中将 Office 和 Car 声明为 Bean，并注入到 Boss Bean 中：下面是使用传统 XML 
完成这个工作的配置文件 beans.xml：</P><BR><A name=N10095><B>清单 4. beans.xml 将以上三个类配置成 
Bean</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;
    &lt;bean id="boss" class="com.baobaotao.Boss"&gt;
        &lt;property name="car" ref="car"/&gt;
        &lt;property name="office" ref="office" /&gt;
    &lt;/bean&gt;
    &lt;bean id="office" class="com.baobaotao.Office"&gt;
        &lt;property name="officeNo" value="002"/&gt;
    &lt;/bean&gt;
    &lt;bean id="car" class="com.baobaotao.Car" scope="singleton"&gt;
        &lt;property name="brand" value=" 红旗 CA72"/&gt;
        &lt;property name="price" value="2000"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>当我们运行以下代码时，控制台将正确打出 boss 的信息：</P><BR><A name=N100A1><B>清单 5. 
测试类：AnnoIoCTest.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class AnnoIoCTest {

    public static void main(String[] args) {
        String[] locations = {"beans.xml"};
        ApplicationContext ctx = 
		    new ClassPathXmlApplicationContext(locations);
        Boss boss = (Boss) ctx.getBean("boss");
        System.out.println(boss);
    }
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这说明 Spring 容器已经正确完成了 Bean 创建和装配的工作。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N100AA><SPAN class=atitle>使用 @Autowired 注释</SPAN></A></P>
<P>Spring 2.5 引入了 <CODE>@Autowired</CODE> 
注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。来看一下使用 <CODE>@Autowired</CODE> 
进行成员变量自动注入的代码：</P><BR><A name=N100BD><B>清单 6. 使用 @Autowired 注释的 
Boss.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;
import org.springframework.beans.factory.annotation.Autowired;

public class Boss {

    @Autowired
    private Car car;

    @Autowired
    private Office office;

    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>Spring 通过一个 <CODE>BeanPostProcessor</CODE> 对 <CODE>@Autowired</CODE> 
进行解析，所以要让 <CODE>@Autowired</CODE> 起作用必须事先在 Spring 容器中声明 
<CODE>AutowiredAnnotationBeanPostProcessor</CODE> Bean。</P><BR><A 
name=N100D9><B>清单 7. 让 @Autowired 注释工作起来</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

    &lt;!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 --&gt;
    &lt;bean class="org.springframework.beans.factory.annotation.
        AutowiredAnnotationBeanPostProcessor"/&gt;

    &lt;!-- 移除 boss Bean 的属性注入配置的信息 --&gt;
    &lt;bean id="boss" class="com.baobaotao.Boss"/&gt;
 
    &lt;bean id="office" class="com.baobaotao.Office"&gt;
        &lt;property name="officeNo" value="001"/&gt;
    &lt;/bean&gt;
    &lt;bean id="car" class="com.baobaotao.Car" scope="singleton"&gt;
        &lt;property name="brand" value=" 红旗 CA72"/&gt;
        &lt;property name="price" value="2000"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这样，当 Spring 容器启动时，<CODE>AutowiredAnnotationBeanPostProcessor</CODE> 将扫描 
Spring 容器中所有 Bean，当发现 Bean 中拥有 <CODE>@Autowired</CODE> 注释时就找到和其匹配（默认按类型匹配）的 
Bean，并注入到对应的地方中去。</P>
<P>按照上面的配置，Spring 将直接采用 Java 反射机制对 Boss 中的 <CODE>car</CODE> 和 
<CODE>office</CODE> 这两个私有成员变量进行自动注入。所以对成员变量使用 <CODE>@Autowired</CODE> 后，您大可将它们的 
setter 方法（<CODE>setCar()</CODE> 和 <CODE>setOffice()</CODE>）从 Boss 中删除。</P>
<P>当然，您也可以通过 <CODE>@Autowired</CODE> 对方法或构造函数进行标注，来看下面的代码：</P><BR><A 
name=N1010B><B>清单 8. 将 @Autowired 注释标注在 Setter 方法上</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

public class Boss {
    private Car car;
    private Office office;

     @Autowired
    public void setCar(Car car) {
        this.car = car;
    }
 
    @Autowired
    public void setOffice(Office office) {
        this.office = office;
    }
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这时，<CODE>@Autowired</CODE> 将查找被标注的方法的入参类型的 Bean，并调用方法自动注入这些 
Bean。而下面的使用方法则对构造函数进行标注：</P><BR><A name=N1011B><B>清单 9. 将 @Autowired 
注释标注在构造函数上</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

public class Boss {
    private Car car;
    private Office office;
 
    @Autowired
    public Boss(Car car ,Office office){
        this.car = car;
        this.office = office ;
    }
 
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>由于 <CODE>Boss()</CODE> 构造函数有两个入参，分别是 <CODE>car</CODE> 和 
<CODE>office</CODE>，<CODE>@Autowired</CODE> 将分别寻找和它们类型匹配的 Bean，将它们作为 
<CODE>Boss(Car car ,Office office)</CODE> 的入参来创建 <CODE>Boss</CODE> Bean。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N1013C><SPAN class=atitle>当候选 Bean 数目不为 1 时的应对方法</SPAN></A></P>
<P>在默认情况下使用 <CODE>@Autowired</CODE> 注释进行自动注入时，Spring 容器中匹配的候选 Bean 
数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出 <CODE>BeanCreationException</CODE> 
异常，并指出必须至少拥有一个匹配的 Bean。我们可以来做一个实验：</P><BR><A name=N1014F><B>清单 10. 候选 Bean 数目为 0 
时</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd "&gt;
 
    &lt;bean class="org.springframework.beans.factory.annotation.
        AutowiredAnnotationBeanPostProcessor"/&gt; 

    &lt;bean id="boss" class="com.baobaotao.Boss"/&gt;

    &lt;!-- 将 office Bean 注释掉 --&gt;
    &lt;!-- &lt;bean id="office" class="com.baobaotao.Office"&gt;
    &lt;property name="officeNo" value="001"/&gt;
    &lt;/bean&gt;--&gt;

    &lt;bean id="car" class="com.baobaotao.Car" scope="singleton"&gt;
        &lt;property name="brand" value=" 红旗 CA72"/&gt;
        &lt;property name="price" value="2000"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>由于 <CODE>office</CODE> Bean 被注释掉了，所以 Spring 容器中将没有类型为 <CODE>Office</CODE> 的 
Bean 了，而 Boss 的 <CODE>office</CODE> 属性标注了 <CODE>@Autowired</CODE>，当启动 Spring 
容器时，异常就产生了。</P>
<P>当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方可以使用 
<CODE>@Autowired(required = false)</CODE>，这等于告诉 Spring：在找不到匹配 Bean 
时也不报错。来看一下具体的例子：</P><BR><A name=N10172><B>清单 11. 使用 @Autowired(required = 
false)</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;

public class Boss {

    private Car car;
    private Office office;

    @Autowired
    public void setCar(Car car) {
        this.car = car;
    }
    @Autowired(required = false)
    public void setOffice(Office office) {
        this.office = office;
    }
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>当然，一般情况下，使用 <CODE>@Autowired</CODE> 的地方都是需要注入 Bean 
的，使用了自动注入而又允许不注入的情况一般仅会在开发期或测试期碰到（如为了快速启动 Spring 容器，仅引入一些模块的 Spring 配置文件），所以 
<CODE>@Autowired(required = false)</CODE> 会很少用到。</P>
<P>和找不到一个类型匹配 Bean 相反的一个错误是：如果 Spring 容器中拥有多个候选 Bean，Spring 容器在启动时也会抛出 
<CODE>BeanCreationException</CODE> 异常。来看下面的例子：</P><BR><A name=N1018D><B>清单 12. 在 
beans.xml 中配置两个 Office 类型的 Bean</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
… 
&lt;bean id="office" class="com.baobaotao.Office"&gt;
    &lt;property name="officeNo" value="001"/&gt;
&lt;/bean&gt;
&lt;bean id="office2" class="com.baobaotao.Office"&gt;
    &lt;property name="officeNo" value="001"/&gt;
&lt;/bean&gt;
…
</PRE></TD></TR></TBODY></TABLE><BR>
<P>我们在 Spring 容器中配置了两个类型为 <CODE>Office</CODE> 类型的 Bean，当对 Boss 的 
<CODE>office</CODE> 成员变量进行自动注入时，Spring 容器将无法确定到底要用哪一个 Bean，因此异常发生了。</P>
<P>Spring 允许我们通过 <CODE>@Qualifier</CODE> 注释指定注入 Bean 
的名称，这样歧义就消除了，可以通过下面的方法解决异常：</P><BR><A name=N101A8><B>清单 13. 使用 @Qualifier 注释指定注入 
Bean 的名称</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
@Autowired
public void setOffice(@Qualifier("office")Office office) {
    this.office = office;
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P><CODE>@Qualifier("office")</CODE> 中的 <CODE>office</CODE> 是 Bean 的名称，所以 
<CODE>@Autowired</CODE> 和 <CODE>@Qualifier</CODE> 结合使用时，自动注入的策略就从 byType 转变成 
byName 了。<CODE>@Autowired</CODE> 可以对成员变量、方法以及构造函数进行注释，而 <CODE>@Qualifier</CODE> 
的标注对象是成员变量、方法入参、构造函数入参。正是由于注释对象的不同，所以 Spring 不将 <CODE>@Autowired</CODE> 和 
<CODE>@Qualifier</CODE> 统一成一个注释类。下面是对成员变量和构造函数入参进行注释的代码：</P>
<P>对成员变量进行注释：</P><BR><A name=N101D7><B>清单 14. 对成员变量使用 @Qualifier 注释</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
public class Boss {
    @Autowired
    private Car car;
 
    @Autowired
    @Qualifier("office")
    private Office office;
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>对构造函数入参进行注释：</P><BR><A name=N101E3><B>清单 15. 对构造函数变量使用 @Qualifier 
注释</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
public class Boss {
    private Car car;
    private Office office;

    @Autowired
    public Boss(Car car , @Qualifier("office")Office office){
        this.car = car;
        this.office = office ;
	}
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P><CODE>@Qualifier</CODE> 只能和 <CODE>@Autowired</CODE> 结合使用，是对 
<CODE>@Autowired</CODE> 有益的补充。一般来讲，<CODE>@Qualifier</CODE> 
对方法签名中入参进行注释会降低代码的可读性，而对成员变量注释则相对好一些。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N101FC><SPAN class=atitle>使用 JSR-250 的注释</SPAN></A></P>
<P>Spring 不但支持自己定义的 <CODE>@Autowired</CODE> 的注释，还支持几个由 JSR-250 规范定义的注释，它们分别是 
<CODE>@Resource</CODE>、<CODE>@PostConstruct</CODE> 以及 
<CODE>@PreDestroy</CODE>。</P>
<P><A name=N10214><SPAN class=smalltitle>@Resource</SPAN></A></P>
<P><CODE>@Resource</CODE> 的作用相当于 <CODE>@Autowired</CODE>，只不过 
<CODE>@Autowired</CODE> 按 byType 自动注入，面 <CODE>@Resource</CODE> 默认按 byName 
自动注入罢了。<CODE>@Resource</CODE> 有两个属性是比较重要的，分别是 name 和 type，Spring 将 
<CODE>@Resource</CODE> 注释的 name 属性解析为 Bean 的名字，而 type 属性则解析为 Bean 的类型。所以如果使用 
name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不指定 name 也不指定 type 
属性，这时将通过反射机制使用 byName 自动注入策略。</P>
<P>Resource 注释类位于 Spring 发布包的 lib/j2ee/common-annotations.jar 
类包中，因此在使用之前必须将其加入到项目的类库中。来看一个使用 <CODE>@Resource</CODE> 的例子：</P><BR><A 
name=N1023E><B>清单 16. 使用 @Resource 注释的 Boss.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import javax.annotation.Resource;

public class Boss {
    // 自动注入类型为 Car 的 Bean
    @Resource
    private Car car;

    // 自动注入 bean 名称为 office 的 Bean
    @Resource(name = "office")
    private Office office;
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>一般情况下，我们无需使用类似于 <CODE>@Resource(type=Car.class)</CODE> 的注释方式，因为 Bean 
的类型信息可以通过 Java 反射从代码中获取。</P>
<P>要让 JSR-250 的注释生效，除了在 Bean 类中标注这些注释外，还需要在 Spring 容器中注册一个负责处理这些注释的 
<CODE>BeanPostProcessor</CODE>：</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>&lt;bean 
  class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P><CODE>CommonAnnotationBeanPostProcessor</CODE> 实现了 
<CODE>BeanPostProcessor</CODE> 接口，它负责扫描使用了 JSR-250 注释的 Bean，并对它们进行相应的操作。</P>
<P><A name=N10261><SPAN class=smalltitle>@PostConstruct 和 
@PreDestroy</SPAN></A></P>
<P>Spring 容器中的 Bean 是有生命周期的，Spring 允许在 Bean 在初始化完成后以及 Bean 销毁前执行特定的操作，您既可以通过实现 
InitializingBean/DisposableBean 接口来定制初始化之后 / 销毁之前的操作方法，也可以通过 &lt;bean&gt; 元素的 
init-method/destroy-method 属性指定初始化之后 / 销毁之前调用的操作方法。关于 Spring 的生命周期，笔者在《精通 Spring 
2.x―企业应用开发精解》第 3 章进行了详细的描述，有兴趣的读者可以查阅。</P>
<P>JSR-250 为初始化之后/销毁之前方法的指定定义了两个注释类，分别是 @PostConstruct 和 
@PreDestroy，这两个注释只能应用于方法上。标注了 @PostConstruct 注释的方法将在类实例化后调用，而标注了 @PreDestroy 
的方法将在类销毁之前调用。</P><BR><A name=N1026F><B>清单 17. 使用 @PostConstruct 和 @PreDestroy 
注释的 Boss.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import javax.annotation.Resource;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class Boss {
    @Resource
    private Car car;

    @Resource(name = "office")
    private Office office;

    @PostConstruct
    public void postConstruct1(){
        System.out.println("postConstruct1");
    }

    @PreDestroy
    public void preDestroy1(){
        System.out.println("preDestroy1"); 
    }
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>您只需要在方法前标注 <CODE>@PostConstruct</CODE> 或 <CODE>@PreDestroy</CODE>，这些方法就会在 
Bean 初始化后或销毁之前被 Spring 容器执行了。</P>
<P>我们知道，不管是通过实现 <CODE>InitializingBean</CODE>/<CODE>DisposableBean</CODE> 
接口，还是通过 &lt;bean&gt; 元素的 <CODE>init-method/destroy-method</CODE> 属性进行配置，都只能为 
Bean 指定一个初始化 / 销毁的方法。但是使用 <CODE>@PostConstruct</CODE> 和 <CODE>@PreDestroy</CODE> 
注释却可以指定多个初始化 / 销毁方法，那些被标注 <CODE>@PostConstruct</CODE> 或 <CODE>@PreDestroy</CODE> 
注释的方法都会在初始化 / 销毁时被执行。</P>
<P>通过以下的测试代码，您将可以看到 Bean 的初始化 / 销毁方法是如何被执行的：</P><BR><A name=N102A5><B>清单 18. 
测试类代码</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AnnoIoCTest {

    public static void main(String[] args) {
        String[] locations = {"beans.xml"};
        ClassPathXmlApplicationContext ctx = 
            new ClassPathXmlApplicationContext(locations);
        Boss boss = (Boss) ctx.getBean("boss");
        System.out.println(boss);
        ctx.destroy();// 关闭 Spring 容器，以触发 Bean 销毁方法的执行
    }
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这时，您将看到标注了 <CODE>@PostConstruct</CODE> 的 <CODE>postConstruct1()</CODE> 方法将在 
Spring 容器启动时，创建 <CODE>Boss</CODE> Bean 的时候被触发执行，而标注了 <CODE>@PreDestroy</CODE> 
注释的 <CODE>preDestroy1()</CODE> 方法将在 Spring 容器关闭前销毁 <CODE>Boss</CODE> Bean 
的时候被触发执行。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N102C6><SPAN class=atitle>使用 &lt;context:annotation-config/&gt; 
简化配置</SPAN></A></P>
<P>Spring 2.1 添加了一个新的 context 的 Schema 
命名空间，该命名空间对注释驱动、属性文件引入、加载期织入等功能提供了便捷的配置。我们知道注释本身是不会做任何事情的，它仅提供元数据信息。要使元数据信息真正起作用，必须让负责处理这些元数据的处理器工作起来。 
</P>
<P>而我们前面所介绍的 <CODE>AutowiredAnnotationBeanPostProcessor</CODE> 和 
<CODE>CommonAnnotationBeanPostProcessor</CODE> 就是处理这些注释元数据的处理器。但是直接在 Spring 
配置文件中定义这些 Bean 显得比较笨拙。Spring 为我们提供了一种方便的注册这些 <CODE>BeanPostProcessor</CODE> 
的方式，这就是 &lt;context:annotation-config/&gt;。请看下面的配置：</P><BR><A name=N102E1><B>清单 
19. 调整 beans.xml 配置文件</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
 http://www.springframework.org/schema/context 
 http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;
 
    &lt;context:annotation-config/&gt; 

    &lt;bean id="boss" class="com.baobaotao.Boss"/&gt;
    &lt;bean id="office" class="com.baobaotao.Office"&gt;
        &lt;property name="officeNo" value="001"/&gt;
    &lt;/bean&gt;
    &lt;bean id="car" class="com.baobaotao.Car" scope="singleton"&gt;
        &lt;property name="brand" value=" 红旗 CA72"/&gt;
        &lt;property name="price" value="2000"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>&lt;context:annotationconfig/&gt; 将隐式地向 Spring 容器注册 
<CODE>AutowiredAnnotationBeanPostProcessor</CODE>、<CODE>CommonAnnotationBeanPostProcessor</CODE>、<CODE>PersistenceAnnotationBeanPostProcessor</CODE> 
以及 <CODE>equiredAnnotationBeanPostProcessor</CODE> 这 4 个 BeanPostProcessor。</P>
<P>在配置文件中使用 context 命名空间之前，必须在 &lt;beans&gt; 元素中声明 context 命名空间。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N102FD><SPAN class=atitle>使用 @Component</SPAN></A></P>
<P>虽然我们可以通过 <CODE>@Autowired</CODE> 或 <CODE>@Resource</CODE> 在 Bean 
类中使用自动注入功能，但是 Bean 还是在 XML 文件中通过 &lt;bean&gt; 进行定义 ―― 也就是说，在 XML 配置文件中定义 Bean，通过 
<CODE>@Autowired</CODE> 或 <CODE>@Resource</CODE> 为 Bean 
的成员变量、方法入参或构造函数入参提供自动注入的功能。能否也通过注释定义 Bean，从 XML 配置文件中完全移除 Bean 
定义的配置呢？答案是肯定的，我们通过 Spring 2.5 提供的 <CODE>@Component</CODE> 注释就可以达到这个目标了。</P>
<P>下面，我们完全使用注释定义 Bean 并完成 Bean 之间装配：</P><BR><A name=N1031F><B>清单 20. 使用 
@Component 注释的 Car.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import org.springframework.stereotype.Component;

@Component
public class Car {
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>仅需要在类定义处，使用 <CODE>@Component</CODE> 注释就可以将一个类定义了 Spring 容器中的 Bean。下面的代码将 
<CODE>Office</CODE> 定义为一个 Bean：</P><BR><A name=N10333><B>清单 21. 使用 @Component 
注释的 Office.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import org.springframework.stereotype.Component;

@Component
public class Office {
    private String officeNo = "001";
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这样，我们就可以在 Boss 类中通过 <CODE>@Autowired</CODE> 注入前面定义的 <CODE>Car</CODE> 和 
<CODE>Office Bean</CODE> 了。</P><BR><A name=N1034B><B>清单 22. 使用 @Component 注释的 
Boss.java</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("boss")
public class Boss {
    @Autowired
    private Car car;

    @Autowired
    private Office office;
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P><CODE>@Component</CODE> 有一个可选的入参，用于指定 Bean 的名称，在 Boss 中，我们就将 Bean 
名称定义为“<CODE>boss</CODE>”。一般情况下，Bean 都是 singleton 的，需要注入 Bean 的地方仅需要通过 byType 
策略就可以自动注入了，所以大可不必指定 Bean 的名称。</P>
<P>在使用 <CODE>@Component</CODE> 注释后，Spring 容器必须启用类扫描机制以启用注释驱动 Bean 定义和注释驱动 Bean 
自动注入的策略。Spring 2.5 对 context 命名空间进行了扩展，提供了这一功能，请看下面的配置：</P><BR><A 
name=N10366><B>清单 23. 简化版的 beans.xml</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
 http://www.springframework.org/schema/context 
 http://www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;
    &lt;context:component-scan base-package="com.baobaotao"/&gt;
&lt;/beans&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这里，所有通过 &lt;bean&gt; 元素定义 Bean 的配置内容已经被移除，仅需要添加一行 
&lt;context:component-scan/&gt; 配置就解决所有问题了――Spring XML 
配置文件得到了极致的简化（当然配置元数据还是需要的，只不过以注释形式存在罢了）。&lt;context:component-scan/&gt; 的 
base-package 属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。</P>
<P>&lt;context:component-scan/&gt; 还允许定义过滤器将基包下的某些类纳入或排除。Spring 支持以下 4 
种类型的过滤方式，通过下表说明：</P><BR><A name=N10372><B>表 1. 扫描过滤方式</B></A><BR>
<TABLE class=data-table-1 cellSpacing=0 cellPadding=0 width="100%" summary="" 
border=0>
<TBODY>
<TR>
<TH width="20%">过滤器类型</TH>
<TH width="80%">说明</TH></TR>
<TR>
<TD>注释</TD>
<TD>假如 com.baobaotao.SomeAnnotation 是一个注释类，我们可以将使用该注释的类过滤出来。</TD></TR>
<TR>
<TD>类名指定</TD>
<TD>通过全限定类名进行过滤，如您可以指定将 com.baobaotao.Boss 纳入扫描，而将 com.baobaotao.Car 
排除在外。</TD></TR>
<TR>
<TD>正则表达式</TD>
<TD>通过正则表达式定义过滤的类，如下所示： com\.baobaotao\.Default.*</TD></TR>
<TR>
<TD>AspectJ 表达式</TD>
<TD>通过 AspectJ 表达式定义过滤的类，如下所示： com. 
baobaotao..*Service+</TD></TR></TBODY></TABLE>
<P>下面是一个简单的例子：</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>&lt;context:component-scan base-package="com.baobaotao"&gt;
    &lt;context:include-filter type="regex" 
        expression="com\.baobaotao\.service\..*"/&gt;
    &lt;context:exclude-filter type="aspectj" 
        expression="com.baobaotao.util..*"/&gt;
&lt;/context:component-scan&gt;
</PRE></TD></TR></TBODY></TABLE><BR>
<P>值得注意的是 &lt;context:component-scan/&gt; 配置项不但启用了对类包进行扫描以实施注释驱动 Bean 
定义的功能，同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了 
<CODE>AutowiredAnnotationBeanPostProcessor</CODE> 和 
<CODE>CommonAnnotationBeanPostProcessor</CODE>），因此当使用 
&lt;context:component-scan/&gt; 后，就可以将 &lt;context:annotation-config/&gt; 
移除了。</P>
<P>默认情况下通过 <CODE>@Component</CODE> 定义的 Bean 都是 singleton 的，如果需要使用其它作用范围的 
Bean，可以通过 <CODE>@Scope</CODE> 注释来达到目标，如以下代码所示：</P><BR><A name=N103CF><B>清单 24. 
通过 @Scope 指定 Bean 的作用范围</B></A><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD class=code-outline><PRE class=displaycode>                
package com.baobaotao;
import org.springframework.context.annotation.Scope;
…
@Scope("prototype")
@Component("boss")
public class Boss {
    …
}
</PRE></TD></TR></TBODY></TABLE><BR>
<P>这样，当从 Spring 容器中获取 <CODE>boss</CODE> Bean 时，每次返回的都是新的实例了。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N103DC><SPAN class=atitle>采用具有特殊语义的注释</SPAN></A></P>
<P>Spring 2.5 中除了提供 <CODE>@Component</CODE> 
注释外，还定义了几个拥有特殊语义的注释，它们分别是：<CODE>@Repository</CODE>、<CODE>@Service</CODE> 和 
<CODE>@Controller</CODE>。在目前的 Spring 版本中，这 3 个注释和 <CODE>@Component</CODE> 
是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和 
<CODE>@Component</CODE> 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果 Web 
应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用 
<CODE>@Repository</CODE>、<CODE>@Service</CODE> 和 <CODE>@Controller</CODE> 
对分层中的类进行注释，而用 <CODE>@Component</CODE> 对那些比较中立的类进行注释。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N1040C><SPAN class=atitle>注释配置和 XML 配置的适用场合</SPAN></A></P>
<P>是否有了这些 IOC 注释，我们就可以完全摒除原来 XML 配置的方式呢？答案是否定的。有以下几点原因：</P>
<UL>
<LI>注释配置不一定在先天上优于 XML 配置。如果 Bean 的依赖关系是固定的，（如 Service 使用了哪几个 DAO 
类），这种配置信息不会在部署时发生调整，那么注释配置优于 XML 配置；反之如果这种依赖关系会在部署时发生调整，XML 配置显然又优于注释配置，因为注释是对 
Java 源代码的调整，您需要重新改写源代码并重新编译才可以实施调整。 
<LI>如果 Bean 不是自己编写的类（如 <CODE>JdbcTemplate</CODE>、<CODE>SessionFactoryBean</CODE> 
等），注释配置将无法实施，此时 XML 配置是唯一可用的方式。 
<LI>注释配置往往是类级别的，而 XML 配置则可以表现得更加灵活。比如相比于 <CODE>@Transaction</CODE> 事务注释，使用 
aop/tx 命名空间的事务配置更加灵活和简单。 </LI></UL>
<P>所以在实现应用中，我们往往需要同时使用注释配置和 XML 
配置，对于类级别且不会发生变动的配置可以优先考虑注释配置；而对于那些第三方类以及容易发生调整的配置则应优先考虑使用 XML 配置。Spring 会在具体实施 
Bean 创建和 Bean 注入之前将这两种配置方式的元信息融合在一起。</P><BR>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD><IMG height=1 alt="" src="blue_rule.gif" width="100%"><BR><IMG height=6 
alt="" src="c.gif" width=8 border=0></TD></TR></TBODY></TABLE>
<TABLE class=no-print cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=4 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR>
<P><A name=N1042F><SPAN class=atitle>小结</SPAN></A></P>
<P>Spring 在 2.1 以后对注释配置提供了强力的支持，注释配置功能成为 Spring 2.5 的最大的亮点之一。合理地使用 Spring 2.5 
的注释配置，可以有效减少配置的工作量，提高程序的内聚性。但是这并不意味着传统 XML 配置将走向消亡，在第三方类 Bean 
的配置，以及那些诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。</P><BR><BR>
<P><A name=resources><SPAN class=atitle>参考资料 </SPAN></A></P><B>学习</B><BR>
<UL>
<LI><A href="http://www.ibm.com/developerworks/cn/java/wa-spring1/" 
cmImpressionSent="1">Spring 系列：Spring 框架简介</A>：优秀的 Spring 框架入门系列，了解 Spring 
框架的基本概念。<BR><BR>
<LI><A href="http://www.ibm.com/developerworks/cn/opensource/os-lightweight3/" 
cmImpressionSent="1">轻量级开发的成功秘诀，第 3 部分: Spring 露出水面</A>：介绍了在 Spring 框架的轻量级 Ioc 
容器。<BR><BR>
<LI><A 
href="http://www.ibm.com/developerworks/cn/websphere/library/techarticles/0706_johnsonbuck/0706_johnsonbuck.html" 
cmImpressionSent="1">Spring Framework 和 IBM WebSphere Application 
Server</A>：Interface21 的首席执行官 Rod Johnson 和 IBM 的 WebSphere Open Source 主管 Paul 
Buck 讨论了 Spring Framework 通过 IBM WebSphere Application Server 认证对 Spring 和 
WebSphere 产品系列的开发人员和客户有何重要意义。<BR><BR>
<LI><A href="http://www.ibm.com/developerworks/cn/java/j-annotate1/" 
cmImpressionSent="1">Tiger 中的注释，第 1 部分: 向 Java 代码中添加元数据</A>：解释了元数据如此有用的原因，向您介绍了 
Java 语言中的注释，并研究了 Tiger 的内置注释。<BR><BR>
<LI><A href="http://www.ibm.com/developerworks/cn/java/j-annotate2.html" 
cmImpressionSent="1">Tiger 中的注释，第 2 部分: 
定制注释</A>：说明了如何创建定制注释，如何用自己的注释注解文档，并进一步定制代码。<BR><BR></LI></UL><BR><B>获得产品和技术</B><BR>
<UL>
<LI><A href="http://www.springframework.org/download" 
cmImpressionSent="1">Springframework 网站</A>：下载 Spring 框架。</LI></UL><BR><BR>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD width="100%"><IMG height=5 alt="" src="c.gif" 
width="100%"></TD></TR></TBODY></TABLE><BR><BR><BR>
<P class=no-print>&nbsp;</P><SPAN class=no-print>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR vAlign=top>
<TD bgColor=#ffffff><IMG height=8 alt="" src="c.gif" width=100 
border=0></TD></TR></TBODY></TABLE></SPAN><SPAN class=no-print>
<TABLE cellSpacing=0 cellPadding=0 align=right>
<TBODY>
<TR align=right>
<TD><IMG height=8 alt="" src="c.gif" width="100%"><BR>
<TABLE cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD vAlign=center><IMG height=16 alt="" src="u_bold.gif" width=16 
border=0><BR></TD>
<TD vAlign=top align=right><A class=fbox 
href="http://www.ibm.com/developerworks/cn/java/j-lo-spring25-ioc/?S_TACT=105AGX52&amp;S_CMP=NL&amp;ca=dnl-cn-03052008#main" 
cmImpressionSent="1"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR></SPAN></TD>
<TD width=10><IMG height=1 alt="" src="c.gif" 
width=10></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!--FOOTER_BEGIN--><!-- IBM FOOTER -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY></TBODY></TABLE><!-- end footer --><!--EndFragment--></BODY>
</HTML>