<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Spring Security 2 配置精讲</TITLE><LINK 
href="favicon.ico" type=image/x-icon rel="shortcut icon"><LINK 
title=JavaEye论坛 href="Java" type=application/rss+xml 
rel=alternate><LINK media=screen 
href="forum.css_1234094693" type=text/css 
rel=stylesheet>
<LINK media=screen 
href="SyntaxHighlighter.css_1201588027" 
type=text/css rel=stylesheet>
<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>

<STYLE type=text/css>.dp-j .annotation {
	COLOR: #646464
}
.dp-j .number {
	COLOR: #c00000
}
</STYLE>
</HEAD>

<BODY>

<DIV id=page>

<DIV class=clearfix id=content>

<DIV id=main>

<TABLE id=forum_main cellSpacing=1>

<TBODY id=posts>

<TR id=p_855490>

<TD class=postcontent>

<DIV class="postbody clearfix"><!--StartFragment--><DIV id=related_topics style="POSITION: relative" _eventID="4" 
_madePositioned="true">相关文章: <SPAN class=close><A title=关闭 
onclick="$('related_topics').hide();return false;" href="http://www.javaeye.com/topic/319965#">&nbsp;</A></SPAN> 
<UL>
<LI><A title="Spring中集成Acegi 2.x安全框架――基于数据库配置" 
href="http://www.javaeye.com/topic/247795" target=_blank>Spring中集成Acegi 
2.x安全框架――基于数据库配置</A> 
<LI><A title="Acegi＋hibernate 动态实现基于角色的权限管理" 
href="http://www.javaeye.com/topic/18210" target=_blank>Acegi＋hibernate 
动态实现基于角色的权限管理</A> 
<LI><A title=请问这样的细粒度权限能否用acegi实现？ href="http://www.javaeye.com/topic/17896" 
target=_blank>请问这样的细粒度权限能否用acegi实现？</A> </LI></UL><BR><SPAN>推荐圈子: <A 
href="http://pipboy.group.javaeye.com/" target=_blank>Pipboy</A></SPAN> <BR><A 
href="http://www.javaeye.com/wiki/topic/319965" target=_blank>更多相关推荐</A> </DIV>
论坛上看了不少Spring 
Security的相关文章。这些文章基本上都还是基于Acegi-1.X的配置方式，而主要的配置示例也来自于SpringSide的贡献。 
<BR><BR>众所周知，Spring 
Security针对Acegi的一个重大的改进就在于其配置方式大大简化了。所以如果配置还是基于Acegi-1.X这样比较繁琐的配置方式的话，那么我们还不如直接使用Acegi而不要去升级了。所以在这里，我将结合一个示例，重点讨论一下Spring 
Security 2是如何进行配置简化的。 <BR><BR><STRONG><SPAN 
style="FONT-SIZE: medium">搭建基础环境</SPAN></STRONG> 
<BR><BR>首先我们为示例搭建基本的开发环境，环境的搭建方式，可以参考我的另外一篇文章：<A 
href="http://www.javaeye.com/wiki/struts2/1321-struts2-development-environment-to-build" 
target=_blank>http://www.javaeye.com/wiki/struts2/1321-struts2-development-environment-to-build</A> 
<BR><BR>整个环境的搭建包括：创建合适的目录结构、加入了合适的Library，加入了基本的Jetty启动类、加入基本的配置文件等。最终的项目结构，可以参考我的附件。 
<BR><BR><STRONG><SPAN style="FONT-SIZE: medium">参考文档</SPAN></STRONG> 
<BR><BR>这里主要的参考文档是Spring Security的自带的Reference。网络上有一个它的中文翻译，地址如下：<A 
href="http://www.family168.com/tutorial/springsecurity/html/springsecurity.html" 
target=_blank>http://www.family168.com/tutorial/springsecurity/html/springsecurity.html</A> 
<BR><BR>除此之外，springside有一个比较完整的例子，不过是基于Acegi的，我也参阅了其中的一些实现。 
<BR><BR><STRONG><SPAN style="FONT-SIZE: medium">Spring 
Security基本配置</SPAN></STRONG> <BR><BR>Spring 
Security是基于Spring的的权限认证框架，对于Spring和Acegi已经比较熟悉的同学对于之前的配置方式应该已经非常了解。接下来的例子，将向大家展示Spring 
Security基于schema的配置方式。 <BR><BR><STRONG><SPAN 
style="COLOR: blue">最小化配置</SPAN></STRONG> <BR><BR><STRONG>1. 
在web.xml文件中加入Filter声明</STRONG> <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN 
class=comments>&lt;!--&nbsp;Spring&nbsp;security&nbsp;Filter&nbsp;--&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>filter</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>filter-name</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>springSecurityFilterChain</SPAN><SPAN 
class=tag>&lt;/</SPAN><SPAN class=tag-name>filter-name</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>filter-class</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>org.springframework.web.filter.DelegatingFilterProxy</SPAN><SPAN 
class=tag>&lt;/</SPAN><SPAN class=tag-name>filter-class</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>filter</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>filter-mapping</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>filter-name</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>springSecurityFilterChain</SPAN><SPAN 
class=tag>&lt;/</SPAN><SPAN class=tag-name>filter-name</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>url-pattern</SPAN><SPAN class=tag>&gt;</SPAN><SPAN>/*</SPAN><SPAN 
class=tag>&lt;/</SPAN><SPAN class=tag-name>url-pattern</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>filter-mapping</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;!-- Spring security Filter --&gt;
&lt;filter&gt;
    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;</PRE><BR><BR>这个Filter会拦截所有的URL请求，并且对这些URL请求进行Spring 
Security的验证。 
<BR><BR>注意，springSecurityFilterChain这个名称是由命名空间默认创建的用于处理web安全的一个内部的bean的id。所以你在你的Spring配置文件中，不应该再使用这个id作为你的bean。 
<BR><BR>与Acegi的配置不同，Acegi需要自行声明一个Spring的bean来作为Filter的实现，而使用Spring 
Security后，无需再额外定义bean，而是使用&lt;http&gt;元素进行配置。 <BR><BR><STRONG>2. 
使用最小的&lt;http&gt;配置</STRONG> <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>http</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>auto-config</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>'true'</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/**"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>access</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_USER"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>http</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;http auto-config='true'&gt;
    &lt;intercept-url pattern="/**" access="ROLE_USER" /&gt;
&lt;/http&gt;</PRE><BR><BR>这段配置表示：我们要保护应用程序中的所有URL，只有拥有ROLE_USER角色的用户才能访问。你可以使用多个&lt;intercept-url&gt;元素为不同URL的集合定义不同的访问需求，它们会被归入一个有序队列中，每次取出最先匹配的一个元素使用。 
所以你必须把期望使用的匹配条件放到最上边。 <BR><BR><STRONG>3. 配置UserDetailsService来指定用户和权限</STRONG> 
<BR><BR>接下来，我们来配置一个UserDetailsService来指定用户和权限： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>user-service</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>user</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"downpour"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>password</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"downpour"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authorities</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_USER,&nbsp;ROLE_ADMIN"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>user</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"robbin"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>password</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"robbin"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authorities</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_USER"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>user</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"QuakeWang"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>password</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"QuakeWang"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authorities</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_ADMIN"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>user-service</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;authentication-provider&gt;
    &lt;user-service&gt;
      &lt;user name="downpour" password="downpour" authorities="ROLE_USER, ROLE_ADMIN" /&gt;
      &lt;user name="robbin" password="robbin" authorities="ROLE_USER" /&gt;
      &lt;user name="QuakeWang" password="QuakeWang" authorities="ROLE_ADMIN" /&gt;
    &lt;/user-service&gt;
  &lt;/authentication-provider&gt;</PRE><BR><BR>在这里，downpour拥有ROLE_USER和ROLE_ADMIN的权限，robbin拥有ROLE_USER权限，QuakeWang拥有ROLE_ADMIN的权限 
<BR><BR><STRONG>4. 小结</STRONG> <BR><BR>有了以上的配置，你已经可以跑简单的Spring 
Security的应用了。只不过在这里，我们还缺乏很多基本的元素，所以我们尚不能对上面的代码进行完整性测试。 
<BR><BR>如果你具备Acegi的知识，你会发现，有很多Acegi中的元素，在Spring 
Security中都没有了，这些元素包括：表单和基本登录选项、密码编码器、Remember-Me认证等等。 
<BR><BR>接下来，我们就来详细剖析一下Spring Security中的这些基本元素。 <BR><BR><STRONG><SPAN 
style="COLOR: blue">剖析基本配置元素</SPAN></STRONG> <BR><BR><STRONG>1. 
有关auto-config属性</STRONG> <BR><BR>在上面用到的auto-config属性，其实是下面这些配置的缩写： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN class=tag-name>http</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/**"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>access</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_USER"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>form-login</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>anonymous</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>http-basic</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>logout</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>remember-me</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>http</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;http&gt;
    &lt;intercept-url pattern="/**" access="ROLE_USER" /&gt;
    &lt;form-login /&gt;
    &lt;anonymous /&gt;
    &lt;http-basic /&gt;
    &lt;logout /&gt;
    &lt;remember-me /&gt;
&lt;/http&gt;</PRE><BR><BR>这些元素分别与登录认证，匿名认证，基本认证，注销处理和remember-me对应。 
他们拥有各自的属性，可以改变他们的具体行为。 <BR><BR>这样，我们在Acegi中所熟悉的元素又浮现在我们的面前。只是在这里，我们使用的是命名空间而已。 
<BR><BR><STRONG>2. 与Acegi的比较</STRONG> 
<BR><BR>我们仔细观察一下没有auto-config的那段XML配置，是不是熟悉多了？让我们来将基于命名空间的配置与传统的Acegi的bean的配置做一个比较，我们会发现以下的区别： 
<BR><BR>1) 基于命名空间的配置更加简洁，可维护性更强 <BR><BR>例如，基于命名空间进行登录认证的配置代码，可能像这样： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>form-login</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>login-page</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authentication-failure-url</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp?error=true"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>default-target-url</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/work"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;form-login login-page="/login.jsp" authentication-failure-url="/login.jsp?error=true" default-target-url="/work" /&gt;</PRE><BR><BR>如果使用老的Acegi的Bean的定义方式，可能像这样： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationProcessingFilter"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.acegisecurity.ui.webapp.AuthenticationProcessingFilter"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationManager"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationManager"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationFailureUrl"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp?error=1"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"defaultTargetUrl"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/work"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"filterProcessesUrl"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/j_acegi_security_check"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"rememberMeServices"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"rememberMeServices"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;bean id="authenticationProcessingFilter"
		  class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter"&gt;
	&lt;property name="authenticationManager"
				  ref="authenticationManager"/&gt;
	&lt;property name="authenticationFailureUrl"
				  value="/login.jsp?error=1"/&gt;
	&lt;property name="defaultTargetUrl" value="/work"/&gt;
	&lt;property name="filterProcessesUrl"
				  value="/j_acegi_security_check"/&gt;
	&lt;property name="rememberMeServices" ref="rememberMeServices"/&gt;
&lt;/bean&gt;
</PRE><BR><BR>这样的例子很多，有兴趣的读者可以一一进行比较。 <BR><BR>2) 
基于命名空间的配置，我们无需再担心由于过滤器链的顺序而导致的错误 
<BR><BR>以前，Acegi在缺乏默认内置配置的情况下，你需要自己来定义所有的bean，并指定这些bean在过滤器链中的顺序。一旦顺序错了，很容易发生错误。而现在，过滤器链的顺序被默认指定，你不需要在担心由于顺序的错误而导致的错误。 
<BR><BR><STRONG>3. 过滤器链在哪里</STRONG> <BR><BR>到目前为止，我们都还没有讨论过整个Spring 
Security的核心部分：过滤器链。在原本Acegi的配置中，我们大概是这样配置我们的过滤器链的： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"filterChainProxy"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.acegisecurity.util.FilterChainProxy"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"filterInvocationDefinitionSource"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>value</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PATTERN_TYPE_APACHE_ANT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/common/**=#NONE#&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/css/**=#NONE#&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/images/**=#NONE# &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/js/**=#NONE#&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/</SPAN><SPAN 
class=attribute>login.jsp</SPAN><SPAN>=#NONE# &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,exceptionTranslationFilter,filterSecurityInterceptor 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>value</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>property</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;bean id="filterChainProxy"
		  class="org.acegisecurity.util.FilterChainProxy"&gt;
	&lt;property name="filterInvocationDefinitionSource"&gt;
		&lt;value&gt;
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT 				
				/common/**=#NONE# 
				/css/**=#NONE# 
				/images/**=#NONE#
				/js/**=#NONE# 
				/login.jsp=#NONE#
				/**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,exceptionTranslationFilter,filterSecurityInterceptor
		&lt;/value&gt;
	&lt;/property&gt;
&lt;/bean&gt;</PRE><BR><BR>其中，每个过滤器链都将对应于Spring配置文件中的bean的id。 <BR><BR>现在，在Spring 
Security中，我们将看不到这些配置，这些配置都被内置在&lt;http&gt;节点中。让我们来看看这些默认的，已经被内置的过滤器： <BR><IMG 
class=magplus title=点击查看原始大小图片 height=357 
src="281ebd9a-16ef-3984-9e31-773cd47c16ac.gif" 
width=760 _counted="undefined"> 
<BR><BR>这些过滤器已经被Spring容器默认内置注册，这也就是我们不再需要在配置文件中定义那么多bean的原因。 
<BR><BR>同时，过滤器顺序在使用命名空间的时候是被严格执行的。它们在初始化的时候就预先被排好序。不仅如此，Spring 
Security规定，<STRONG><SPAN 
style="COLOR: red">你不能替换那些&lt;http&gt;元素自己使用而创建出的过滤器，比如HttpSessionContextIntegrationFilter, 
ExceptionTranslationFilter 或 FilterSecurityInterceptor</SPAN></STRONG>。 
<BR><BR>当然，这样的规定是否合理，有待进一步讨论。因为实际上在很多时候，我们希望覆盖过滤器链中的某个过滤器的默认行为。而Spring 
Security的这种规定在一定程度上限制了我们的行为。 <BR><BR>不过Spring 
Security允许你把你自己的过滤器添加到队列中，使用custom-filter元素，并且指定你的过滤器应该出现的位置： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"myFilter"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"com.mycompany.MySpecialAuthenticationFilter"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>custom-filter</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>position</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"AUTHENTICATION_PROCESSING_FILTER"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans:bean id="myFilter" class="com.mycompany.MySpecialAuthenticationFilter"&gt;
    &lt;custom-filter position="AUTHENTICATION_PROCESSING_FILTER"/&gt;
&lt;/beans:bean&gt;</PRE><BR><BR>不仅如此，你还可以使用after或before属性，如果你想把你的过滤器添加到队列中另一个过滤器的前面或后面。 
可以分别在position属性使用"FIRST"或"LAST"来指定你想让你的过滤器出现在队列元素的前面或后面。 
<BR><BR>这个特性或许能够在一定程度上弥补Spring Security的死板规定，而在之后的应用中，我也会把它作为切入点，对资源进行管理。 
<BR><BR>另外，我需要补充一点的是，<STRONG>对于在http/intercept-url中没有进行定义的URL，将会默认使用系统内置的过滤器链进行权限认证。</STRONG>所以，你并不需要在http/intercept-url中额外定义一个类似/**的匹配规则。 
<BR><BR><STRONG><SPAN style="FONT-SIZE: medium">使用数据库对用户和权限进行管理</SPAN></STRONG> 
<BR><BR>一般来说，我们都有使用数据库对用户和权限进行管理的需求，而不会把用户写死在配置文件里。所以，我们接下来就重点讨论使用数据库对用户和权限进行管理的方法。 
<BR><BR><STRONG><SPAN style="COLOR: blue">用户和权限的关系设计</SPAN></STRONG> 
<BR><BR>在此之前，我们首先需要讨论一下用户（User）和权限（Role）之间的关系。Spring 
Security在默认情况下，把这两者当作一对多的关系进行处理。所以，在Spring Security中对这两个对象所采用的表结构关系大概像这样： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN>CREATE&nbsp;TABLE&nbsp;users&nbsp;( &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;username&nbsp;VARCHAR(</SPAN><SPAN 
class=number>50</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL&nbsp;PRIMARY&nbsp;KEY, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;password&nbsp;VARCHAR(</SPAN><SPAN 
class=number>50</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;enabled&nbsp;BIT&nbsp;NOT&nbsp;NULL &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>CREATE&nbsp;TABLE&nbsp;authorities&nbsp;( &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;username&nbsp;VARCHAR(</SPAN><SPAN 
class=number>50</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;authority&nbsp;VARCHAR(</SPAN><SPAN 
class=number>50</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>);&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">CREATE TABLE users (
  username VARCHAR(50) NOT NULL PRIMARY KEY,
  password VARCHAR(50) NOT NULL,
  enabled BIT NOT NULL
);

CREATE TABLE authorities (
  username VARCHAR(50) NOT NULL,
  authority VARCHAR(50) NOT NULL
);</PRE><BR><BR>不过这种设计方式在实际生产环境中基本上不会采用。一般来说，我们会使用逻辑主键ID来标示每个User和每个Authorities（Role）。而且从典型意义上讲，他们之间是一个多对多的关系，我们会采用3张表来表示，下面是我在MySQL中建立的3张表的schema示例： 
<BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN>CREATE&nbsp;TABLE&nbsp;`user`&nbsp;( &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL&nbsp;auto_increment, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`name`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`password`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`disabled`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>1</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`id`) &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>CREATE&nbsp;TABLE&nbsp;`role`&nbsp;( &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL&nbsp;auto_increment, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`name`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`id`) &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>CREATE&nbsp;TABLE&nbsp;`user_role`&nbsp;( &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`user_id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`role_id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`user_id`,`role_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;UNIQUE&nbsp;KEY&nbsp;`role_id`&nbsp;(`role_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;KEY&nbsp;`FK143BF46AF6AD4381`&nbsp;(`user_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;KEY&nbsp;`FK143BF46A51827FA1`&nbsp;(`role_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;CONSTRAINT&nbsp;`FK143BF46A51827FA1`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`role_id`)&nbsp;REFERENCES&nbsp;`role`&nbsp;(`id`), 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;CONSTRAINT&nbsp;`FK143BF46AF6AD4381`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`user_id`)&nbsp;REFERENCES&nbsp;`user`&nbsp;(`id`) 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8;&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">CREATE TABLE `user` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `password` varchar(255) default NULL,
  `disabled` int(1) NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `role` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `user_role` (
  `user_id` int(11) NOT NULL,
  `role_id` int(11) NOT NULL,
  PRIMARY KEY  (`user_id`,`role_id`),
  UNIQUE KEY `role_id` (`role_id`),
  KEY `FK143BF46AF6AD4381` (`user_id`),
  KEY `FK143BF46A51827FA1` (`role_id`),
  CONSTRAINT `FK143BF46A51827FA1` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`),
  CONSTRAINT `FK143BF46AF6AD4381` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</PRE><BR><BR><STRONG><SPAN 
style="COLOR: blue">通过配置SQL来模拟用户和权限</SPAN></STRONG> 
<BR><BR>有了数据库的表设计，我们就可以在Spring 
Security中，通过配置SQL，来模拟用户和权限，这依然通过&lt;authentication-provider&gt;来完成： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>jdbc-user-service</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>data-source-ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"dataSource"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>users-by-username-query</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"SELECT&nbsp;U.username,&nbsp;U.password,&nbsp;U.accountEnabled&nbsp;AS&nbsp;'enabled'&nbsp;FROM&nbsp;User&nbsp;U&nbsp;where&nbsp;U.username=?"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>authorities-by-username-query</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"SELECT&nbsp;U.username,&nbsp;R.name&nbsp;as&nbsp;'authority'&nbsp;FROM&nbsp;User&nbsp;U&nbsp;JOIN&nbsp;Authority&nbsp;A&nbsp;ON&nbsp;u.id&nbsp;=&nbsp;A.userId&nbsp;JOIN&nbsp;Role&nbsp;R&nbsp;ON&nbsp;R.id&nbsp;=&nbsp;A.roleId&nbsp;WHERE&nbsp;U.username=?"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;authentication-provider&gt;
    &lt;jdbc-user-service data-source-ref="dataSource"
    users-by-username-query="SELECT U.username, U.password, U.accountEnabled AS 'enabled' FROM User U where U.username=?"
    authorities-by-username-query="SELECT U.username, R.name as 'authority' FROM User U JOIN Authority A ON u.id = A.userId JOIN Role R ON R.id = A.roleId WHERE U.username=?"/&gt;
&lt;/authentication-provider&gt;
</PRE><BR><BR>这里给出的是一个使用SQL进行模拟用户和权限的示例。其中你需要为运行SQL准备相应的dataSource。这个dataSource应该对应于Spring中的某个bean的定义。 
<BR><BR>从这段配置模拟用户和权限的情况来看，实际上Spring 
Security对于用户，需要username，password，accountEnabled三个字段。对于权限，它需要的是username和authority2个字段。 
<BR><BR>也就是说，如果我们能够通过其他的方式，模拟上面的这些对象，并插入到Spring 
Security中去，我们同样能够实现用户和权限的认证。接下来，我们就来看看我们如何通过自己的实现，来完成这件事情。 <BR><BR><STRONG><SPAN 
style="COLOR: blue">通过扩展Spring Security的默认实现来进行用户和权限的管理</SPAN></STRONG> 
<BR><BR>事实上，Spring 
Security提供了2个认证的接口，分别用于模拟用户和权限，以及读取用户和权限的操作方法。这两个接口分别是：UserDetails和UserDetailsService。 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>interface</SPAN><SPAN>&nbsp;UserDetails&nbsp;</SPAN><SPAN 
class=keyword>extends</SPAN><SPAN>&nbsp;Serializable&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;GrantedAuthority[]&nbsp;getAuthorities(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;getPassword(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;getUsername(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isAccountNonExpired(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isAccountNonLocked(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isCredentialsNonExpired(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>boolean</SPAN><SPAN>&nbsp;isEnabled(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">public interface UserDetails extends Serializable {
    
    GrantedAuthority[] getAuthorities();

    String getPassword();

    String getUsername();

    boolean isAccountNonExpired();

    boolean isAccountNonLocked();

    boolean isCredentialsNonExpired();

    boolean isEnabled();
}
</PRE><BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>interface</SPAN><SPAN>&nbsp;UserDetailsService&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;UserDetails&nbsp;loadUserByUsername(String&nbsp;username) &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;UsernameNotFoundException,&nbsp;DataAccessException; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">public interface UserDetailsService {
    UserDetails loadUserByUsername(String username)
        throws UsernameNotFoundException, DataAccessException;
}</PRE><BR><BR>非常清楚，一个接口用于模拟用户，另外一个用于模拟读取用户的过程。所以我们可以通过实现这两个接口，来完成使用数据库对用户和权限进行管理的需求。在这里，我将给出一个使用Hibernate来定义用户和权限之间关系的示例。 
<BR><BR><STRONG>1. 定义User类和Role类，使他们之间形成多对多的关系</STRONG> <BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Entity</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=annotation>@Proxy</SPAN><SPAN>(lazy&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>false</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;User&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>final</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>long</SPAN><SPAN>&nbsp;serialVersionUID&nbsp;=&nbsp;8026813053768023527L; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Id</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@GeneratedValue</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Integer&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;password; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;disabled; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@ManyToMany</SPAN><SPAN>(targetEntity&nbsp;=&nbsp;Role.</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>,&nbsp;fetch&nbsp;=&nbsp;FetchType.EAGER) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@JoinTable</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"user_role"</SPAN><SPAN>,&nbsp;joinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"user_id"</SPAN><SPAN>),&nbsp;inverseJoinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"role_id"</SPAN><SPAN>)) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;Set&lt;Role&gt;&nbsp;roles; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;setters&nbsp;and&nbsp;getters 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Entity
@Proxy(lazy = false)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class User {
	
	private static final long serialVersionUID = 8026813053768023527L;

    @Id
	@GeneratedValue
	private Integer id;
	
	private String name;
	
	private String password;
	
	private boolean disabled;
	
	@ManyToMany(targetEntity = Role.class, fetch = FetchType.EAGER)
    @JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private Set&lt;Role&gt; roles;

        // setters and getters
}</PRE><BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Entity</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Role&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Id</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@GeneratedValue</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Integer&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;setters&nbsp;and&nbsp;getters 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Role {
	
	@Id
	@GeneratedValue
	private Integer id;
	
	private String name;
        
        // setters and getters
}</PRE><BR><BR>请注意这里的Annotation的写法。同时，我为User和Role之间配置了缓存。并且将他们之间的关联关系设置的lazy属性设置成false，从而保证在User对象取出之后的使用不会因为脱离session的生命周期而产生lazy 
loading问题。 <BR><BR><STRONG>2. 使User类实现UserDetails接口</STRONG> 
<BR><BR>接下来，我们让User类去实现UserDetails接口： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Entity</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=annotation>@Proxy</SPAN><SPAN>(lazy&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>false</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;User&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;UserDetails&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>final</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>long</SPAN><SPAN>&nbsp;serialVersionUID&nbsp;=&nbsp;8026813053768023527L; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Id</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@GeneratedValue</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Integer&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;password; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;disabled; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@ManyToMany</SPAN><SPAN>(targetEntity&nbsp;=&nbsp;Role.</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>,&nbsp;fetch&nbsp;=&nbsp;FetchType.EAGER) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@JoinTable</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"user_role"</SPAN><SPAN>,&nbsp;joinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"user_id"</SPAN><SPAN>),&nbsp;inverseJoinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"role_id"</SPAN><SPAN>)) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;Set&lt;Role&gt;&nbsp;roles; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;default&nbsp;constructor 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;User()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#getAuthorities() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;GrantedAuthority[]&nbsp;getAuthorities()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;GrantedAuthority&gt;&nbsp;grantedAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ArrayList&lt;GrantedAuthority&gt;(roles.size()); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(Role&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grantedAuthorities.add(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthorityImpl(role.getName())); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;grantedAuthorities.toArray(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthority[roles.size()]); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#getPassword() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getPassword()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;password; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#getUsername() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getUsername()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#isAccountNonExpired() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isAccountNonExpired()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#isAccountNonLocked() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isAccountNonLocked()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#isCredentialsNonExpired() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isCredentialsNonExpired()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#isEnabled() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;isEnabled()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;!</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.disabled; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;setters&nbsp;and&nbsp;getters 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Entity
@Proxy(lazy = false)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class User implements UserDetails {
	
	private static final long serialVersionUID = 8026813053768023527L;

    @Id
	@GeneratedValue
	private Integer id;
	
	private String name;
	
	private String password;
	
	private boolean disabled;
	
	@ManyToMany(targetEntity = Role.class, fetch = FetchType.EAGER)
    @JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private Set&lt;Role&gt; roles;
	
	/**
	 * The default constructor
	 */
	public User() {
		
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#getAuthorities()
	 */
	public GrantedAuthority[] getAuthorities() {
		List&lt;GrantedAuthority&gt; grantedAuthorities = new ArrayList&lt;GrantedAuthority&gt;(roles.size());
    	for(Role role : roles) {
    		grantedAuthorities.add(new GrantedAuthorityImpl(role.getName()));
    	}
        return grantedAuthorities.toArray(new GrantedAuthority[roles.size()]);
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#getPassword()
	 */
	public String getPassword() {
		return password;
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#getUsername()
	 */
	public String getUsername() {
		return name;
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#isAccountNonExpired()
	 */
	public boolean isAccountNonExpired() {
		return true;
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#isAccountNonLocked()
	 */
	public boolean isAccountNonLocked() {
		return true;
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#isCredentialsNonExpired()
	 */
	public boolean isCredentialsNonExpired() {
		return true;
	}

	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#isEnabled()
	 */
	public boolean isEnabled() {
		return !this.disabled;
	}
      
      // setters and getters
}
</PRE><BR><BR>实现UserDetails接口中的每个函数，其实没什么很大的难度，除了其中的一个函数我需要额外强调一下： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#getAuthorities() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;GrantedAuthority[]&nbsp;getAuthorities()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;GrantedAuthority&gt;&nbsp;grantedAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ArrayList&lt;GrantedAuthority&gt;(roles.size()); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>for</SPAN><SPAN>(Role&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grantedAuthorities.add(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthorityImpl(role.getName())); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;grantedAuthorities.toArray(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthority[roles.size()]); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">/* (non-Javadoc)
 * @see org.springframework.security.userdetails.UserDetails#getAuthorities()
 */
public GrantedAuthority[] getAuthorities() {
	List&lt;GrantedAuthority&gt; grantedAuthorities = new ArrayList&lt;GrantedAuthority&gt;(roles.size());
   	for(Role role : roles) {
	    grantedAuthorities.add(new GrantedAuthorityImpl(role.getName()));
    	}
        return grantedAuthorities.toArray(new GrantedAuthority[roles.size()]);
}
</PRE><BR><BR>这个函数的实际作用是根据User返回这个User所拥有的权限列表。如果以上面曾经用过的例子来说，如果当前User是downpour，我需要得到ROLE_USER和ROLE_ADMIN；如果当前User是robbin，我需要得到ROLE_USER。 
<BR><BR>了解了含义，实现就变得简单了，由于User与Role是多对多的关系，我们可以通过User得到所有这个User所对应的Role，并把这些Role的name拼装起来返回。 
<BR><BR>由此可见，实现UserDetails接口，并没有什么神秘的地方，它只是实际上在一定程度上只是代替了使用配置文件的硬编码： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>user</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"downpour"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>password</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"downpour"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authorities</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"ROLE_USER,&nbsp;ROLE_ADMIN"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;user name="downpour" password="downpour" authorities="ROLE_USER, ROLE_ADMIN" /&gt;</PRE><BR><BR><STRONG>3. 
实现UserDetailsService接口</STRONG> <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Repository</SPAN><SPAN>(</SPAN><SPAN 
class=string>"securityManager"</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;SecurityManagerSupport&nbsp;</SPAN><SPAN 
class=keyword>extends</SPAN><SPAN>&nbsp;HibernateDaoSupport&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;UserDetailsService&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Init&nbsp;sessionFactory&nbsp;here&nbsp;because&nbsp;the&nbsp;annotation&nbsp;of&nbsp;Spring&nbsp;2.5&nbsp;can&nbsp;not&nbsp;support&nbsp;override&nbsp;inject 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sessionFactory </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Autowired</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;init(SessionFactory&nbsp;sessionFactory)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>super</SPAN><SPAN>.setSessionFactory(sessionFactory); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;UserDetails&nbsp;loadUserByUsername(String&nbsp;userName)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;UsernameNotFoundException,&nbsp;DataAccessException&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;User&gt;&nbsp;users&nbsp;=&nbsp;getHibernateTemplate().find(</SPAN><SPAN 
class=string>"FROM&nbsp;User&nbsp;user&nbsp;WHERE&nbsp;user.name&nbsp;=&nbsp;?&nbsp;AND&nbsp;user.disabled&nbsp;=&nbsp;false"</SPAN><SPAN>,&nbsp;userName); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>(users.isEmpty())&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>throw</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;UsernameNotFoundException(</SPAN><SPAN 
class=string>"User&nbsp;"</SPAN><SPAN>&nbsp;+&nbsp;userName&nbsp;+&nbsp;</SPAN><SPAN 
class=string>"&nbsp;has&nbsp;no&nbsp;GrantedAuthority"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;users.get(</SPAN><SPAN 
class=number>0</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Repository("securityManager")
public class SecurityManagerSupport extends HibernateDaoSupport implements UserDetailsService {

    /**
     * Init sessionFactory here because the annotation of Spring 2.5 can not support override inject
     *  
     * @param sessionFactory
     */
    @Autowired
    public void init(SessionFactory sessionFactory) {
        super.setSessionFactory(sessionFactory);
    }

    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException, DataAccessException {
        List&lt;User&gt; users = getHibernateTemplate().find("FROM User user WHERE user.name = ? AND user.disabled = false", userName);
        if(users.isEmpty()) {
            throw new UsernameNotFoundException("User " + userName + " has no GrantedAuthority");
        }
        return users.get(0);
    }
}</PRE><BR><BR>这个实现非常简单，由于我们的User对象已经实现了UserDetails接口。所以我们只要使用Hibernate，根据userName取出相应的User对象即可。注意在这里，由于我们对于User的关联对象Roles都设置了lazy="false"，所以我们无需担心lazy 
loading的问题。 <BR><BR><STRONG>4. 配置文件</STRONG> 
<BR><BR>有了上面的代码，一切都变得很简单，重新定义authentication-provider节点即可。如果你使用Spring 
2.5的Annotation配置功能，你甚至可以不需要在配置文件中定义securityManager的bean。 <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>user-service-ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"securityManager"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>password-encoder</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>hash</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"md5"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;authentication-provider user-service-ref="securityManager"&gt;
	&lt;password-encoder hash="md5"/&gt;
&lt;/authentication-provider&gt;</PRE><BR><BR><STRONG><SPAN 
style="FONT-SIZE: medium">使用数据库对资源进行管理</SPAN></STRONG> 
<BR><BR>在完成了使用数据库来进行用户和权限的管理之后，我们再来看看http配置的部分。在实际应用中，我们不可能使用类似/**的方式来指定URL与权限ROLE的对应关系，而是会针对某些URL，指定某些特定的ROLE。而URL与ROLE之间的映射关系最好可以进行扩展和配置。而URL属于资源的一种，所以接下来，我们就来看看如何使用数据库来对权限和资源的匹配关系进行管理，并且将认证匹配加入到Spring 
Security中去。 <BR><BR><STRONG><SPAN style="COLOR: blue">权限和资源的设计</SPAN></STRONG> 
<BR><BR>上面我们讲到，用户（User）和权限（Role）之间是一个多对多的关系。那么权限（Role）和资源（Resource）之间呢？其实他们之间也是一个典型的多对多的关系，我们同样用3张表来表示： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN>CREATE&nbsp;TABLE&nbsp;`role`&nbsp;( &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL&nbsp;auto_increment, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`name`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`description`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`id`) &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>CREATE&nbsp;TABLE&nbsp;`resource`&nbsp;( &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL&nbsp;auto_increment, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`type`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`value`&nbsp;varchar(</SPAN><SPAN 
class=number>255</SPAN><SPAN>)&nbsp;</SPAN><SPAN 
class=keyword>default</SPAN><SPAN>&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`id`) &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>CREATE&nbsp;TABLE&nbsp;`role_resource`&nbsp;( &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`role_id`&nbsp;</SPAN><SPAN class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;`resource_id`&nbsp;</SPAN><SPAN 
class=keyword>int</SPAN><SPAN>(</SPAN><SPAN 
class=number>11</SPAN><SPAN>)&nbsp;NOT&nbsp;NULL, &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;&nbsp;(`role_id`,`resource_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;KEY&nbsp;`FKAEE599B751827FA1`&nbsp;(`role_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;KEY&nbsp;`FKAEE599B7EFD18D21`&nbsp;(`resource_id`), &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;CONSTRAINT&nbsp;`FKAEE599B751827FA1`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`role_id`)&nbsp;REFERENCES&nbsp;`role`&nbsp;(`id`), 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;CONSTRAINT&nbsp;`FKAEE599B7EFD18D21`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`resource_id`)&nbsp;REFERENCES&nbsp;`resource`&nbsp;(`id`) 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>)&nbsp;ENGINE=InnoDB&nbsp;DEFAULT&nbsp;CHARSET=utf8;&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">CREATE TABLE `role` (
  `id` int(11) NOT NULL auto_increment,
  `name` varchar(255) default NULL,
  `description` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `resource` (
  `id` int(11) NOT NULL auto_increment,
  `type` varchar(255) default NULL,
  `value` varchar(255) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `role_resource` (
  `role_id` int(11) NOT NULL,
  `resource_id` int(11) NOT NULL,
  PRIMARY KEY  (`role_id`,`resource_id`),
  KEY `FKAEE599B751827FA1` (`role_id`),
  KEY `FKAEE599B7EFD18D21` (`resource_id`),
  CONSTRAINT `FKAEE599B751827FA1` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`),
  CONSTRAINT `FKAEE599B7EFD18D21` FOREIGN KEY (`resource_id`) REFERENCES `resource` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;</PRE><BR><BR>在这里Resource可能分成多种类型，比如MENU,URL,METHOD等等。 
<BR><BR><STRONG><SPAN style="COLOR: blue">针对资源的认证</SPAN></STRONG> 
<BR><BR>针对资源的认证，实际上应该由Spring 
Security中的FilterSecurityInterceptor这个过滤器来完成。不过内置的FilterSecurityInterceptor的实现往往无法满足我们的要求，所以传统的Acegi的方式，我们往往会替换FilterSecurityInterceptor的实现，从而对URL等资源进行认证。 
<BR><BR>不过在Spring 
Security中，由于默认的拦截器链内置了FilterSecurityInterceptor，而且上面我们也提到过，这个实现无法被替换。这就使我们犯了难。我们如何对资源进行认证呢？ 
<BR><BR>实际上，我们虽然无法替换FilterSecurityInterceptor的默认实现，不过<STRONG>我们可以再实现一个类似的过滤器，并将我们自己的过滤器作为一个customer-filter，加到默认的过滤器链的最后，从而完成整个过滤检查。</STRONG> 
<BR><BR>接下来我们就来看看一个完整的例子： <BR><BR>1. 建立权限（Role）和资源（Resource）之间的关联关系 
<BR><BR>修改上面的权限（Role）的Entity定义： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Entity</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Role&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Id</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@GeneratedValue</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Integer&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;name; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@ManyToMany</SPAN><SPAN>(targetEntity&nbsp;=&nbsp;Resource.</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>,&nbsp;fetch&nbsp;=&nbsp;FetchType.EAGER) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@JoinTable</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"role_resource"</SPAN><SPAN>,&nbsp;joinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"role_id"</SPAN><SPAN>),&nbsp;inverseJoinColumns&nbsp;=&nbsp;</SPAN><SPAN 
class=annotation>@JoinColumn</SPAN><SPAN>(name&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"resource_id"</SPAN><SPAN>)) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;Set&lt;Resource&gt;&nbsp;resources; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>//&nbsp;setters&nbsp;and&nbsp;getter 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Role {
	
	@Id
	@GeneratedValue
	private Integer id;
	
	private String name;
	
	@ManyToMany(targetEntity = Resource.class, fetch = FetchType.EAGER)
    @JoinTable(name = "role_resource", joinColumns = @JoinColumn(name = "role_id"), inverseJoinColumns = @JoinColumn(name = "resource_id"))
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private Set&lt;Resource&gt; resources;

        // setters and getter
}
</PRE><BR><BR>增加资源（Resource）的Entity定义： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Entity</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;Resource&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Id</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@GeneratedValue</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;Integer&nbsp;id; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;type; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;String&nbsp;value; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@ManyToMany</SPAN><SPAN>(mappedBy&nbsp;=&nbsp;</SPAN><SPAN 
class=string>"resources"</SPAN><SPAN>,&nbsp;targetEntity&nbsp;=&nbsp;Role.</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>,&nbsp;fetch&nbsp;=&nbsp;FetchType.EAGER) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Cache</SPAN><SPAN>(usage&nbsp;=&nbsp;CacheConcurrencyStrategy.READ_WRITE) 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;Set&lt;Role&gt;&nbsp;roles; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;The&nbsp;default&nbsp;constructor 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;Resource()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)

public class Resource {

	@Id
    @GeneratedValue
	private Integer id;
	
	private String type;
	
	private String value;
	
	@ManyToMany(mappedBy = "resources", targetEntity = Role.class, fetch = FetchType.EAGER)
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private Set&lt;Role&gt; roles;
	
	/**
	 * The default constructor
	 */
	public Resource() {
		
	}
}</PRE><BR><BR>注意他们之间的多对多关系，以及他们之间关联关系的缓存和lazy属性设置。 <BR><BR>2. 
在系统启动的时候，把所有的资源load到内存作为缓存 
<BR><BR>由于资源信息对于每个项目来说，相对固定，所以我们可以将他们在系统启动的时候就load到内存作为缓存。这里做法很多，我给出的示例是将资源的存放在servletContext中。 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;ServletContextLoaderListener&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;ServletContextListener&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;javax.servlet.ServletContextListener#contextInitialized(javax.servlet.ServletContextEvent) 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;contextInitialized(ServletContextEvent&nbsp;servletContextEvent)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletContext&nbsp;servletContext&nbsp;=&nbsp;servletContextEvent.getServletContext(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SecurityManager&nbsp;securityManager&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.getSecurityManager(servletContext); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;urlAuthorities&nbsp;=&nbsp;securityManager.loadUrlAuthorities(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;servletContext.setAttribute(</SPAN><SPAN 
class=string>"urlAuthorities"</SPAN><SPAN>,&nbsp;urlAuthorities); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;javax.servlet.ServletContextListener#contextDestroyed(javax.servlet.ServletContextEvent) 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;contextDestroyed(ServletContextEvent&nbsp;servletContextEvent)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;servletContextEvent.getServletContext().removeAttribute(</SPAN><SPAN 
class=string>"urlAuthorities"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Get&nbsp;SecurityManager&nbsp;from&nbsp;ApplicationContext 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;servletContext </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>protected</SPAN><SPAN>&nbsp;SecurityManager&nbsp;getSecurityManager(ServletContext&nbsp;servletContext)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;(SecurityManager)&nbsp;WebApplicationContextUtils.getWebApplicationContext(servletContext).getBean(</SPAN><SPAN 
class=string>"securityManager"</SPAN><SPAN>);&nbsp; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">public class ServletContextLoaderListener implements ServletContextListener {

    /* (non-Javadoc)
     * @see javax.servlet.ServletContextListener#contextInitialized(javax.servlet.ServletContextEvent)
     */
    public void contextInitialized(ServletContextEvent servletContextEvent) {
        ServletContext servletContext = servletContextEvent.getServletContext();
        SecurityManager securityManager = this.getSecurityManager(servletContext);
        
        Map&lt;String, String&gt; urlAuthorities = securityManager.loadUrlAuthorities();
        servletContext.setAttribute("urlAuthorities", urlAuthorities);
    }

    
    /* (non-Javadoc)
     * @see javax.servlet.ServletContextListener#contextDestroyed(javax.servlet.ServletContextEvent)
     */
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        servletContextEvent.getServletContext().removeAttribute("urlAuthorities");
    }

    /**
     * Get SecurityManager from ApplicationContext
     * 
     * @param servletContext
     * @return
     */
    protected SecurityManager getSecurityManager(ServletContext servletContext) {
       return (SecurityManager) WebApplicationContextUtils.getWebApplicationContext(servletContext).getBean("securityManager"); 
    }

}</PRE><BR><BR>这里，我们看到了SecurityManager，这是一个接口，用于权限相关的逻辑处理。还记得之前我们使用数据库管理User的时候所使用的一个实现类SecurityManagerSupport嘛？我们不妨依然借用这个类，让它实现SecurityManager接口，来同时完成url的读取工作。 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=annotation>@Service</SPAN><SPAN>(</SPAN><SPAN 
class=string>"securityManager"</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;SecurityManagerSupport&nbsp;</SPAN><SPAN 
class=keyword>extends</SPAN><SPAN>&nbsp;HibernateDaoSupport&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;UserDetailsService,&nbsp;SecurityManager&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Init&nbsp;sessionFactory&nbsp;here&nbsp;because&nbsp;the&nbsp;annotation&nbsp;of&nbsp;Spring&nbsp;2.5&nbsp;can&nbsp;not&nbsp;support&nbsp;override&nbsp;inject 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sessionFactory </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@Autowired</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;init(SessionFactory&nbsp;sessionFactory)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>super</SPAN><SPAN>.setSessionFactory(sessionFactory); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetailsService#loadUserByUsername(java.lang.String) 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;UserDetails&nbsp;loadUserByUsername(String&nbsp;userName)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;UsernameNotFoundException,&nbsp;DataAccessException&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;User&gt;&nbsp;users&nbsp;=&nbsp;getHibernateTemplate().find(</SPAN><SPAN 
class=string>"FROM&nbsp;User&nbsp;user&nbsp;WHERE&nbsp;user.name&nbsp;=&nbsp;?&nbsp;AND&nbsp;user.disabled&nbsp;=&nbsp;false"</SPAN><SPAN>,&nbsp;userName); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>(users.isEmpty())&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>throw</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;UsernameNotFoundException(</SPAN><SPAN 
class=string>"User&nbsp;"</SPAN><SPAN>&nbsp;+&nbsp;userName&nbsp;+&nbsp;</SPAN><SPAN 
class=string>"&nbsp;has&nbsp;no&nbsp;GrantedAuthority"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;users.get(</SPAN><SPAN 
class=number>0</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;com.javaeye.sample.security.SecurityManager#loadUrlAuthorities() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;loadUrlAuthorities()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;urlAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;HashMap&lt;String,&nbsp;String&gt;(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Resource&gt;&nbsp;urlResources&nbsp;=&nbsp;getHibernateTemplate().find(</SPAN><SPAN 
class=string>"FROM&nbsp;Resource&nbsp;resource&nbsp;WHERE&nbsp;resource.type&nbsp;=&nbsp;?"</SPAN><SPAN>,&nbsp;</SPAN><SPAN 
class=string>"URL"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(Resource&nbsp;resource&nbsp;:&nbsp;urlResources)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;urlAuthorities.put(resource.getValue(),&nbsp;resource.getRoleAuthorities()); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;urlAuthorities; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">@Service("securityManager")
public class SecurityManagerSupport extends HibernateDaoSupport implements UserDetailsService, SecurityManager {
    
    /**
     * Init sessionFactory here because the annotation of Spring 2.5 can not support override inject
     *  
     * @param sessionFactory
     */
    @Autowired
    public void init(SessionFactory sessionFactory) {
        super.setSessionFactory(sessionFactory);
    }
    
    /* (non-Javadoc)
     * @see org.springframework.security.userdetails.UserDetailsService#loadUserByUsername(java.lang.String)
     */
    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException, DataAccessException {
        List&lt;User&gt; users = getHibernateTemplate().find("FROM User user WHERE user.name = ? AND user.disabled = false", userName);
        if(users.isEmpty()) {
            throw new UsernameNotFoundException("User " + userName + " has no GrantedAuthority");
        }
        return users.get(0);
    }
    
    /* (non-Javadoc)
     * @see com.javaeye.sample.security.SecurityManager#loadUrlAuthorities()
     */
    public Map&lt;String, String&gt; loadUrlAuthorities() {
        Map&lt;String, String&gt; urlAuthorities = new HashMap&lt;String, String&gt;();
        List&lt;Resource&gt; urlResources = getHibernateTemplate().find("FROM Resource resource WHERE resource.type = ?", "URL");
        for(Resource resource : urlResources) {
            urlAuthorities.put(resource.getValue(), resource.getRoleAuthorities());
        }
        return urlAuthorities;
    }   
}
</PRE><BR><BR>3. 编写自己的FilterInvocationDefinitionSource实现类，对资源进行认证 <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;SecureResourceFilterInvocationDefinitionSource&nbsp;</SPAN><SPAN 
class=keyword>implements</SPAN><SPAN>&nbsp;FilterInvocationDefinitionSource,&nbsp;InitializingBean&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;UrlMatcher&nbsp;urlMatcher; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;useAntPath&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>private</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;lowercaseComparisons&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;useAntPath&nbsp;the&nbsp;useAntPath&nbsp;to&nbsp;set 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setUseAntPath(</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;useAntPath)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.useAntPath&nbsp;=&nbsp;useAntPath; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;lowercaseComparisons 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;setLowercaseComparisons(</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;lowercaseComparisons)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.lowercaseComparisons&nbsp;=&nbsp;lowercaseComparisons; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.beans.factory.InitializingBean#afterPropertiesSet() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>void</SPAN><SPAN>&nbsp;afterPropertiesSet()&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;Exception&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=comment>//&nbsp;default&nbsp;url&nbsp;matcher&nbsp;will&nbsp;be&nbsp;RegexUrlPathMatcher 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.urlMatcher&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;RegexUrlPathMatcher(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>&nbsp;(useAntPath)&nbsp;{&nbsp;&nbsp;</SPAN><SPAN 
class=comment>//&nbsp;change&nbsp;the&nbsp;implementation&nbsp;if&nbsp;required 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.urlMatcher&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;AntUrlPathMatcher(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=comment>//&nbsp;Only&nbsp;change&nbsp;from&nbsp;the&nbsp;defaults&nbsp;if&nbsp;the&nbsp;attribute&nbsp;has&nbsp;been&nbsp;set 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>&nbsp;(</SPAN><SPAN 
class=string>"true"</SPAN><SPAN>.equals(lowercaseComparisons))&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>&nbsp;(!</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.useAntPath)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((RegexUrlPathMatcher)&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.urlMatcher).setRequiresLowerCaseUrl(</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</SPAN><SPAN class=keyword>else</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>&nbsp;(</SPAN><SPAN 
class=string>"false"</SPAN><SPAN>.equals(lowercaseComparisons))&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>&nbsp;(</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.useAntPath)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((AntUrlPathMatcher)&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.urlMatcher).setRequiresLowerCaseUrl(</SPAN><SPAN 
class=keyword>false</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.intercept.ObjectDefinitionSource#getAttributes(java.lang.Object) 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;ConfigAttributeDefinition&nbsp;getAttributes(Object&nbsp;filter)&nbsp;</SPAN><SPAN 
class=keyword>throws</SPAN><SPAN>&nbsp;IllegalArgumentException&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterInvocation&nbsp;filterInvocation&nbsp;=&nbsp;(FilterInvocation)&nbsp;filter; 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;requestURI&nbsp;=&nbsp;filterInvocation.getRequestUrl(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;urlAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.getUrlAuthorities(filterInvocation); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;grantedAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(Iterator&lt;Map.Entry&lt;String,&nbsp;String&gt;&gt;&nbsp;iter&nbsp;=&nbsp;urlAuthorities.entrySet().iterator();&nbsp;iter.hasNext();)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&lt;String,&nbsp;String&gt;&nbsp;entry&nbsp;=&nbsp;iter.next(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;url&nbsp;=&nbsp;entry.getKey(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>(urlMatcher.pathMatchesUrl(url,&nbsp;requestURI))&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grantedAuthorities&nbsp;=&nbsp;entry.getValue(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>break</SPAN><SPAN>; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>(grantedAuthorities&nbsp;!=&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConfigAttributeEditor&nbsp;configAttrEditor&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ConfigAttributeEditor(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configAttrEditor.setAsText(grantedAuthorities); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;(ConfigAttributeDefinition)&nbsp;configAttrEditor.getValue(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.intercept.ObjectDefinitionSource#getConfigAttributeDefinitions() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@SuppressWarnings</SPAN><SPAN>(</SPAN><SPAN 
class=string>"unchecked"</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;Collection&nbsp;getConfigAttributeDefinitions()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;org.springframework.security.intercept.ObjectDefinitionSource#supports(java.lang.Class) 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@SuppressWarnings</SPAN><SPAN>(</SPAN><SPAN 
class=string>"unchecked"</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>boolean</SPAN><SPAN>&nbsp;supports(Class&nbsp;clazz)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>true</SPAN><SPAN>; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;filterInvocation 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=annotation>@SuppressWarnings</SPAN><SPAN>(</SPAN><SPAN 
class=string>"unchecked"</SPAN><SPAN>) &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>private</SPAN><SPAN>&nbsp;Map&lt;String,&nbsp;String&gt;&nbsp;getUrlAuthorities(FilterInvocation&nbsp;filterInvocation)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletContext&nbsp;servletContext&nbsp;=&nbsp;filterInvocation.getHttpRequest().getSession().getServletContext(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;(Map&lt;String,&nbsp;String&gt;)servletContext.getAttribute(</SPAN><SPAN 
class=string>"urlAuthorities"</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">public class SecureResourceFilterInvocationDefinitionSource implements FilterInvocationDefinitionSource, InitializingBean {
    
    private UrlMatcher urlMatcher;

    private boolean useAntPath = true;
    
    private boolean lowercaseComparisons = true;
    
    /**
     * @param useAntPath the useAntPath to set
     */
    public void setUseAntPath(boolean useAntPath) {
        this.useAntPath = useAntPath;
    }
    
    /**
     * @param lowercaseComparisons
     */
    public void setLowercaseComparisons(boolean lowercaseComparisons) {
        this.lowercaseComparisons = lowercaseComparisons;
    }
    
    /* (non-Javadoc)
     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
     */
    public void afterPropertiesSet() throws Exception {
        
        // default url matcher will be RegexUrlPathMatcher
        this.urlMatcher = new RegexUrlPathMatcher();
        
        if (useAntPath) {  // change the implementation if required
            this.urlMatcher = new AntUrlPathMatcher();
        }
        
        // Only change from the defaults if the attribute has been set
        if ("true".equals(lowercaseComparisons)) {
            if (!this.useAntPath) {
                ((RegexUrlPathMatcher) this.urlMatcher).setRequiresLowerCaseUrl(true);
            }
        } else if ("false".equals(lowercaseComparisons)) {
            if (this.useAntPath) {
                ((AntUrlPathMatcher) this.urlMatcher).setRequiresLowerCaseUrl(false);
            }
        }
        
    }
    
    /* (non-Javadoc)
     * @see org.springframework.security.intercept.ObjectDefinitionSource#getAttributes(java.lang.Object)
     */
    public ConfigAttributeDefinition getAttributes(Object filter) throws IllegalArgumentException {
        
        FilterInvocation filterInvocation = (FilterInvocation) filter;
        String requestURI = filterInvocation.getRequestUrl();
        Map&lt;String, String&gt; urlAuthorities = this.getUrlAuthorities(filterInvocation);
        
        String grantedAuthorities = null;
        for(Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = urlAuthorities.entrySet().iterator(); iter.hasNext();) {
            Map.Entry&lt;String, String&gt; entry = iter.next();
            String url = entry.getKey();
            
            if(urlMatcher.pathMatchesUrl(url, requestURI)) {
                grantedAuthorities = entry.getValue();
                break;
            }
            
        }
        
        if(grantedAuthorities != null) {
            ConfigAttributeEditor configAttrEditor = new ConfigAttributeEditor();
            configAttrEditor.setAsText(grantedAuthorities);
            return (ConfigAttributeDefinition) configAttrEditor.getValue();
        }
        
        return null;
    }

    /* (non-Javadoc)
     * @see org.springframework.security.intercept.ObjectDefinitionSource#getConfigAttributeDefinitions()
     */
    @SuppressWarnings("unchecked")
	public Collection getConfigAttributeDefinitions() {
        return null;
    }

    /* (non-Javadoc)
     * @see org.springframework.security.intercept.ObjectDefinitionSource#supports(java.lang.Class)
     */
    @SuppressWarnings("unchecked")
	public boolean supports(Class clazz) {
        return true;
    }
    
    /**
     * 
     * @param filterInvocation
     * @return
     */
    @SuppressWarnings("unchecked")
	private Map&lt;String, String&gt; getUrlAuthorities(FilterInvocation filterInvocation) {
        ServletContext servletContext = filterInvocation.getHttpRequest().getSession().getServletContext();
        return (Map&lt;String, String&gt;)servletContext.getAttribute("urlAuthorities");
    }

}
</PRE><BR><BR>4. 配置文件修改 <BR><BR>接下来，我们来修改一下Spring 
Security的配置文件，把我们自定义的这个过滤器插入到过滤器链中去。 <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:beans</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>xmlns</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://www.springframework.org/schema/security"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=attribute>xmlns:beans</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://www.springframework.org/schema/beans"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=attribute>xmlns:xsi</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"http://www.w3.org/2001/XMLSchema-instance"</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=attribute>xsi:schemaLocation</SPAN><SPAN>="http://www.springframework.org/schema/beans&nbsp;http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/security&nbsp;http://www.springframework.org/schema/security/spring-security-2.0.4.xsd"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"loggerListener"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.event.authentication.LoggerListener"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>http</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>access-denied-page</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/403.jsp"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/static/**"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>filters</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"none"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/template/**"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>filters</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"none"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>filters</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"none"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>intercept-url</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>pattern</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>filters</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"none"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>form-login</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>login-page</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>authentication-failure-url</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp?error=true"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>default-target-url</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/index"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>logout</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>logout-success-url</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"/login.jsp"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>http-basic</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>http</SPAN><SPAN class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>authentication-manager</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>alias</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationManager"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>user-service-ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"securityManager"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>password-encoder</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>hash</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"md5"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>authentication-provider</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"accessDecisionManager"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.AffirmativeBased"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"allowIfAllAbstainDecisions"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"false"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"decisionVoters"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:list</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.RoleVoter"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.AuthenticatedVoter"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:list</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"resourceSecurityInterceptor"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.intercept.web.FilterSecurityInterceptor"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationManager"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"authenticationManager"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"accessDecisionManager"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"accessDecisionManager"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"objectDefinitionSource"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>ref</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"secureResourceFilterInvocationDefinitionSource"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"observeOncePerRequest"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>value</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"false"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>custom-filter</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>after</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"LAST"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"secureResourceFilterInvocationDefinitionSource"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"com.javaeye.sample.security.interceptor.SecureResourceFilterInvocationDefinitionSource"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:beans</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd"&gt;
	
	&lt;beans:bean id="loggerListener" class="org.springframework.security.event.authentication.LoggerListener" /&gt;
	
	&lt;http access-denied-page="/403.jsp" &gt;
		&lt;intercept-url pattern="/static/**" filters="none" /&gt;
		&lt;intercept-url pattern="/template/**" filters="none" /&gt;
		&lt;intercept-url pattern="/" filters="none" /&gt;
		&lt;intercept-url pattern="/login.jsp" filters="none" /&gt;
	    &lt;form-login login-page="/login.jsp" authentication-failure-url="/login.jsp?error=true" default-target-url="/index" /&gt;
	    &lt;logout logout-success-url="/login.jsp"/&gt;
	    &lt;http-basic /&gt;
	&lt;/http&gt;

	&lt;authentication-manager alias="authenticationManager"/&gt;
	
	&lt;authentication-provider user-service-ref="securityManager"&gt;
		&lt;password-encoder hash="md5"/&gt;
	&lt;/authentication-provider&gt;
	
	&lt;beans:bean id="accessDecisionManager" class="org.springframework.security.vote.AffirmativeBased"&gt;
	    &lt;beans:property name="allowIfAllAbstainDecisions" value="false"/&gt;
	    &lt;beans:property name="decisionVoters"&gt;
	        &lt;beans:list&gt;
	            &lt;beans:bean class="org.springframework.security.vote.RoleVoter"/&gt;
	            &lt;beans:bean class="org.springframework.security.vote.AuthenticatedVoter"/&gt;
	        &lt;/beans:list&gt;
	    &lt;/beans:property&gt;
	&lt;/beans:bean&gt;
	
	&lt;beans:bean id="resourceSecurityInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor"&gt;
		&lt;beans:property name="authenticationManager" ref="authenticationManager"/&gt;
	    &lt;beans:property name="accessDecisionManager" ref="accessDecisionManager"/&gt;
	    &lt;beans:property name="objectDefinitionSource" ref="secureResourceFilterInvocationDefinitionSource" /&gt;
	    &lt;beans:property name="observeOncePerRequest" value="false" /&gt;
	    &lt;custom-filter after="LAST" /&gt;
	&lt;/beans:bean&gt;
	
	&lt;beans:bean id="secureResourceFilterInvocationDefinitionSource" class="com.javaeye.sample.security.interceptor.SecureResourceFilterInvocationDefinitionSource" /&gt;
	
&lt;/beans:beans&gt;
</PRE><BR><BR>请注意，由于我们所实现的，是FilterSecurityInterceptor中的一个开放接口，所以我们实际上定义了一个新的bean，并通过&lt;custom-filter 
after="LAST" /&gt;插入到过滤器链中去。 <BR><BR><STRONG><SPAN 
style="FONT-SIZE: medium">Spring Security对象的访问</SPAN></STRONG> 
<BR><BR><STRONG>1. 访问当前登录用户</STRONG> <BR><BR>Spring 
Security提供了一个线程安全的对象：SecurityContextHolder，通过这个对象，我们可以访问当前的登录用户。我写了一个类，可以通过静态方法去读取： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>class</SPAN><SPAN>&nbsp;SecurityUserHolder&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;current&nbsp;user 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>public</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>static</SPAN><SPAN>&nbsp;User&nbsp;getCurrentUser()&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;(User)&nbsp;SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">public class SecurityUserHolder {

	/**
	 * Returns the current user
	 * 
	 * @return
	 */
	public static User getCurrentUser() {
		return (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	}

}</PRE><BR><BR><STRONG>2. 访问当前登录用户所拥有的权限</STRONG> 
<BR><BR>通过上面的分析，我们知道，用户所拥有的所有权限，其实是通过UserDetails接口中的getAuthorities()方法获得的。只要实现这个接口，就能实现需求。在我的代码中，不仅实现了这个接口，还在上面做了点小文章，这样我们可以获得一个用户所拥有权限的字符串表示： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=comment>/*&nbsp;(non-Javadoc) </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN 
class=comment>&nbsp;*&nbsp;@see&nbsp;org.springframework.security.userdetails.UserDetails#getAuthorities() 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;GrantedAuthority[]&nbsp;getAuthorities()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;GrantedAuthority&gt;&nbsp;grantedAuthorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ArrayList&lt;GrantedAuthority&gt;(roles.size()); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>for</SPAN><SPAN>(Role&nbsp;role&nbsp;:&nbsp;roles)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grantedAuthorities.add(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthorityImpl(role.getName())); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;grantedAuthorities.toArray(</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;GrantedAuthority[roles.size()]); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;Returns&nbsp;the&nbsp;authorites&nbsp;string 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;eg.&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;downpour&nbsp;---&nbsp;ROLE_ADMIN,ROLE_USER 
</SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;robbin&nbsp;---&nbsp;ROLE_ADMIN </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp; </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;@return </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;String&nbsp;getAuthoritiesString()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;authorities&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ArrayList&lt;String&gt;(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(GrantedAuthority&nbsp;authority&nbsp;:&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.getAuthorities())&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authorities.add(authority.getAuthority()); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>return</SPAN><SPAN>&nbsp;StringUtils.join(authorities,&nbsp;</SPAN><SPAN 
class=string>","</SPAN><SPAN>); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">	/* (non-Javadoc)
	 * @see org.springframework.security.userdetails.UserDetails#getAuthorities()
	 */
	public GrantedAuthority[] getAuthorities() {
		List&lt;GrantedAuthority&gt; grantedAuthorities = new ArrayList&lt;GrantedAuthority&gt;(roles.size());
    	for(Role role : roles) {
    		grantedAuthorities.add(new GrantedAuthorityImpl(role.getName()));
    	}
        return grantedAuthorities.toArray(new GrantedAuthority[roles.size()]);
	}
	
	/**
	 * Returns the authorites string
	 * 
	 * eg. 
	 *    downpour --- ROLE_ADMIN,ROLE_USER
	 *    robbin --- ROLE_ADMIN
	 * 
	 * @return
	 */
	public String getAuthoritiesString() {
	    List&lt;String&gt; authorities = new ArrayList&lt;String&gt;();
	    for(GrantedAuthority authority : this.getAuthorities()) {
	        authorities.add(authority.getAuthority());
	    }
	    return StringUtils.join(authorities, ",");
	}</PRE><BR><BR><STRONG>3. 访问当前登录用户能够访问的资源</STRONG> 
<BR><BR>这就涉及到用户（User），权限（Role）和资源（Resource）三者之间的对应关系。我同样在User对象中实现了一个方法： 
<BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Java代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/topic/319965#"><IMG alt=复制代码 
src="icon_copy.gif" 
_counted="undefined"></A></DIV></DIV>
<OL class=dp-j>
<LI><SPAN><SPAN class=comment>/** </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*&nbsp;@return&nbsp;the&nbsp;roleResources </SPAN>&nbsp;</SPAN></LI>
<LI><SPAN><SPAN class=comment>&nbsp;*/</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN 
class=keyword>public</SPAN><SPAN>&nbsp;Map&lt;String,&nbsp;List&lt;Resource&gt;&gt;&nbsp;getRoleResources()&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=comment>//&nbsp;init&nbsp;roleResources&nbsp;for&nbsp;the&nbsp;first&nbsp;time 
</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>if</SPAN><SPAN>(</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources&nbsp;==&nbsp;</SPAN><SPAN 
class=keyword>null</SPAN><SPAN>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources&nbsp;=&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;HashMap&lt;String,&nbsp;List&lt;Resource&gt;&gt;(); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(Role&nbsp;role&nbsp;:&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roles)&nbsp;{ &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;roleName&nbsp;=&nbsp;role.getName(); &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;Resource&gt;&nbsp;resources&nbsp;=&nbsp;role.getResources(); 
&nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>for</SPAN><SPAN>(Resource&nbsp;resource&nbsp;:&nbsp;resources)&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;key&nbsp;=&nbsp;roleName&nbsp;+&nbsp;</SPAN><SPAN 
class=string>"_"</SPAN><SPAN>&nbsp;+&nbsp;resource.getType(); &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>if</SPAN><SPAN>(!</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources.containsKey(key))&nbsp;{ 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources.put(key,&nbsp;</SPAN><SPAN 
class=keyword>new</SPAN><SPAN>&nbsp;ArrayList&lt;Resource&gt;()); 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources.get(key).add(resource);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=keyword>return</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=keyword>this</SPAN><SPAN>.roleResources; &nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>}&nbsp;&nbsp;</SPAN></LI></OL></DIV><PRE class=java style="DISPLAY: none" name="code">/**
 * @return the roleResources
 */
public Map&lt;String, List&lt;Resource&gt;&gt; getRoleResources() {
	// init roleResources for the first time
	if(this.roleResources == null) {			
		this.roleResources = new HashMap&lt;String, List&lt;Resource&gt;&gt;();
			
		for(Role role : this.roles) {
			String roleName = role.getName();
			Set&lt;Resource&gt; resources = role.getResources();
			for(Resource resource : resources) {
				String key = roleName + "_" + resource.getType();
					if(!this.roleResources.containsKey(key)) {
						this.roleResources.put(key, new ArrayList&lt;Resource&gt;());
				}
					this.roleResources.get(key).add(resource);					
			}
		}
			
	}
	return this.roleResources;
}</PRE><BR><BR>这里，会在User对象中设置一个缓存机制，在第一次取的时候，通过遍历User所有的Role，获取相应的Resource信息。 
<BR><BR><!--EndFragment--></DIV>
</TD>
</TR>
</TBODY>
</TABLE>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>