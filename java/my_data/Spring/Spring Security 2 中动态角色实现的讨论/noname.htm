<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Spring Security 2 中动态角色实现的讨论</TITLE><LINK 
href="favicon.ico" type=image/x-icon rel="shortcut icon"><LINK 
title=JavaEye论坛 href="Java" type=application/rss+xml 
rel=alternate><LINK media=screen 
href="forum.css_1248063768" type=text/css 
rel=stylesheet>
<LINK media=screen 
href="SyntaxHighlighter.css_1201588027" 
type=text/css rel=stylesheet>
<STYLE type=text/css>.dp-xml .cdata {
	COLOR: #ff1493
}
.dp-xml .tag {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .tag-name {
	FONT-WEIGHT: bold; COLOR: #069
}
.dp-xml .attribute {
	COLOR: red
}
.dp-xml .attribute-value {
	COLOR: blue
}
</STYLE>
</HEAD>

<BODY>

<DIV id=page>

<DIV class=clearfix id=content>

<DIV id=main>

<TABLE id=forum_main cellSpacing=1>

<TBODY id=posts>

<TR id=p_909407>

<TD class=postcontent>

<DIV class="postbody clearfix"><!--StartFragment--><DIV id=related_topics style="POSITION: relative" _madePositioned="true">相关文章: 
<SPAN class=close><A title=关闭 onclick="$('related_topics').hide();return false;" 
href="http://www.javaeye.com/post/909407#">&nbsp;</A></SPAN> 
<UL>
<LI><A title="Spring Security优劣之我见" href="http://www.javaeye.com/topic/364132" 
target=_blank>Spring Security优劣之我见</A> 
<LI><A title=菜鸟-手把手教你把Acegi应用到实际项目中(8)-扩展UserDetailsService接口 
href="http://www.javaeye.com/topic/259441" 
target=_blank>菜鸟-手把手教你把Acegi应用到实际项目中(8)-扩展UserDetailsService接口</A> 
<LI><A title=请问这样的细粒度权限能否用acegi实现？ href="http://www.javaeye.com/topic/17896" 
target=_blank>请问这样的细粒度权限能否用acegi实现？</A> </LI></UL><BR><SPAN>推荐圈子: <A 
href="http://accessmanager.group.javaeye.com/" target=_blank>权限管理</A></SPAN> 
<BR><A href="http://www.javaeye.com/wiki/topic/342837" target=_blank>更多相关推荐</A> </DIV>
安全框架的主体包括两部分即验权和授权。Spring Security2可以很好的实现这两个过程。Spring 
Security2对其前身acegi最大的改进是提供了自定义的配置标签，通过Security的命名空间定义了http和authentication-provider等标签，这样做的好处是极大地简化了框架的配置，并很好地隐藏了框架实现的细节，在配置的表述上也更清晰，总体上提高了框架的易用性。 
<BR><BR>然而，该框架默认的权限配置方式在xml中，又因为新版本隐藏了实现细节，在动态权限的扩展上，能力变小了。在验权过程中，遇到的问题不多。但在授权时，如果是acegi，人们可以通过继承AbstractFilterInvocationDefinitionSource类实现在授权（即资源角色和用户角色的匹配）前，针对资源的角色的获取。而新版本因为用新标签进行了整合，这个过程被默认的类实现隐藏掉了，包括过滤器，资源获取和角色定义等过程都由框架来实现，于是很多人在使用Spring 
Security2时也想通过改动DefaultFilterInvocationDefinitionSource对资源的获取来实现数据库或文件中的动态的角色。不过这样的改动侵入性比较高，而且还保留了acegi的痕迹，也违背了开闭的原则。 
<BR><BR>其实，我们完全可以通过Spring Security2 
accessManager提供的自定义投票机制来解决这个问题，这样既不影响现有的基于URL的配置，还可以加入自己的动态的权限配置。 
<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其实现策略如下： <BR><BR>1 
定义类DynamicRoleVoter实现AccessDecisionVoter，注入实现接口DynamicRoleProvider（用来定义获取角色的方法）的提供动态角色的类 
<BR><BR>2 在两个supports方法中返回true <BR><BR>3 在vote方法中，有三个参数(Authentication 
authentication, Object object,ConfigAttributeDefinition config) 
通过第一个获取用户的权限集合，第二个可以获取到资源对象，进而通过DynamicRoleProvider获取到角色集合进行匹配。 <BR><BR>4 
在配置文件中加入DynamicRoleVoter，如下： <BR><BR>
<DIV class=dp-highlighter>
<DIV class=bar>
<DIV class=tools>Xml代码 <A title=复制代码 
onclick="dp.sh.Toolbar.CopyToClipboard(this);return false;" 
href="http://www.javaeye.com/post/909407#"><IMG alt=复制代码 
src="icon_copy.gif"></A></DIV></DIV>
<OL class=dp-xml>
<LI><SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"accessDecisionManager"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.AffirmativeBased"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"decisionVoters"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:list</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.RoleVoter"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"org.springframework.security.vote.AuthenticatedVoter"</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"DynamicRoleVoter"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>name</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"dynamicRoleProvider"</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:ref</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>local</SPAN><SPAN>=</SPAN><SPAN 
class=attribute-value>"dynamicRoleProvider"</SPAN><SPAN 
class=tag>/&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:list</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:property</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN>&nbsp;</SPAN><SPAN 
class=attribute>id</SPAN><SPAN>=”&nbsp;dynamicRoleProvider”&nbsp;</SPAN><SPAN 
class=attribute>class</SPAN><SPAN>=”…”</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI>
<LI><SPAN>&nbsp;&nbsp;&nbsp;&nbsp;…… &nbsp;&nbsp;</SPAN></LI>
<LI><SPAN></SPAN><SPAN class=tag>&lt;/</SPAN><SPAN 
class=tag-name>beans:bean</SPAN><SPAN 
class=tag>&gt;</SPAN><SPAN>&nbsp;&nbsp;</SPAN></SPAN></LI></OL></DIV><PRE class=xml style="DISPLAY: none" name="code">&lt;beans:bean id="accessDecisionManager" class="org.springframework.security.vote.AffirmativeBased"&gt;
&lt;beans:property name="decisionVoters"&gt;
&lt;beans:list&gt;
&lt;beans:bean class="org.springframework.security.vote.RoleVoter" /&gt;
&lt;beans:bean class="org.springframework.security.vote.AuthenticatedVoter" /&gt;
&lt;beans:bean class="DynamicRoleVoter"&gt;
    &lt;beans:property name="dynamicRoleProvider"&gt;
        &lt;beans:ref local="dynamicRoleProvider"/&gt;
&lt;/beans:property&gt;
&lt;/beans:bean&gt;
&lt;/beans:list&gt;
&lt;/beans:property&gt;
&lt;/beans:bean&gt;
&lt;beans:bean id=” dynamicRoleProvider” class=”…”&gt;
    ……
&lt;/beans:bean&gt;
</PRE><BR><!--EndFragment--></DIV>
</TD>
</TR>
</TBODY>
</TABLE>
</DIV>
</DIV>
</DIV>
</BODY>
</HTML>